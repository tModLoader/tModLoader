using GeneratorTest = tModLoader.SourceGenerators.Tests.tModLoaderSourceGeneratorVerifier<tModLoader.SourceGenerators.Tests.Adapter<tModLoader.SourceGenerators.NetPacketGeneratorv2>>.Test;

namespace tModLoader.SourceGenerators.Tests;

partial class NetPacketGeneratorv2Tests
{
	[Fact]
	public async Task StructPacketWithDefaultSerializedIgnoredInt32Property()
	{
		const string CodeFile = @"
using Terraria.ModLoader;
using Terraria.ModLoader.Packets;

namespace GeneratedDemo;

public sealed class GeneratedMod : Mod {
}

[NetPacket(typeof(GeneratedMod))]
public partial struct GeneratedPacket {
	public const byte Id = GeneratedDemo.PacketRegistry.GeneratedPacketId;

	public int Default { get; set; }

	[Serialize]
	public int Serialized { get; set; }

	[Ignore]
	public int Ignored { get; set; }

	public readonly void HandlePacket() {
	}

	public void HandleForAll() => throw new System.NotImplementedException();
}

[PacketRegistry]
static partial class PacketRegistry {
	[NetPacketIdOf(typeof(GeneratedPacket))]
	public const byte GeneratedPacketId = 0;
}
";

		const string GeneratedFile = @"// <auto-generated/>
#nullable disable
using System.IO;
using System.Runtime.CompilerServices;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace GeneratedDemo;

partial struct GeneratedPacket : global::Terraria.ModLoader.Packets.INetPacket {
	/// <inheritdoc cref=""global::Terraria.ModLoader.Packets.INetPacket.Send(int, int)""/>
	[CompilerGenerated]
	public void Send(int toClient = -1, int ignoreClient = -1) {
		var packet = ModContent.GetInstance<global::GeneratedDemo.GeneratedMod>().GetPacket();
		packet.Write(Id);

		var encoder_Default = default(global::Terraria.ModLoader.Packets.IntEncoder);
		encoder_Default.Write(packet, Default);
		var encoder_Serialized = default(global::Terraria.ModLoader.Packets.IntEncoder);
		encoder_Serialized.Write(packet, Serialized);

		packet.Send(toClient, ignoreClient);
	}

	/// <inheritdoc cref=""global::Terraria.ModLoader.Packets.INetPacket.Receive(BinaryReader, int)""/>
	[CompilerGenerated]
	public void Receive(BinaryReader reader, int sender) {
		// SetDefaults();

		var encoder_Default = default(global::Terraria.ModLoader.Packets.IntEncoder);
		Default = encoder_Default.Read(reader);
		var encoder_Serialized = default(global::Terraria.ModLoader.Packets.IntEncoder);
		Serialized = encoder_Serialized.Read(reader);

		if (Main.netMode == NetmodeID.Server) {
			Send(-1, sender);
		}
		HandlePacket();
	}
}

#nullable restore";

		await new GeneratorTest {
			TestState = {
				Sources = { CodeFile },
				GeneratedSources = {
					(typeof(Adapter<NetPacketGeneratorv2>), "GeneratedDemo.GeneratedPacket.g.cs", GeneratedFile),
				},
			},
		}.RunAsync();
	}

	[Fact]
	public async Task StructPacketWithDefaultSerializedIgnoredInt32PropertyAutoSerializeOn()
	{
		const string CodeFile = @"
using Terraria.ModLoader;
using Terraria.ModLoader.Packets;

namespace GeneratedDemo;

public sealed class GeneratedMod : Mod {
}

[NetPacket(typeof(GeneratedMod), AutoSerialize = true)]
public partial struct GeneratedPacket {
	public const byte Id = GeneratedDemo.PacketRegistry.GeneratedPacketId;

	public int Default { get; set; }

	[Serialize]
	public int Serialized { get; set; }

	[Ignore]
	public int Ignored { get; set; }

	public readonly void HandlePacket() {
	}

	public void HandleForAll() => throw new System.NotImplementedException();
}

[PacketRegistry]
static partial class PacketRegistry {
	[NetPacketIdOf(typeof(GeneratedPacket))]
	public const byte GeneratedPacketId = 0;
}
";

		const string GeneratedFile = @"// <auto-generated/>
#nullable disable
using System.IO;
using System.Runtime.CompilerServices;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace GeneratedDemo;

partial struct GeneratedPacket : global::Terraria.ModLoader.Packets.INetPacket {
	/// <inheritdoc cref=""global::Terraria.ModLoader.Packets.INetPacket.Send(int, int)""/>
	[CompilerGenerated]
	public void Send(int toClient = -1, int ignoreClient = -1) {
		var packet = ModContent.GetInstance<global::GeneratedDemo.GeneratedMod>().GetPacket();
		packet.Write(Id);

		var encoder_Default = default(global::Terraria.ModLoader.Packets.IntEncoder);
		encoder_Default.Write(packet, Default);
		var encoder_Serialized = default(global::Terraria.ModLoader.Packets.IntEncoder);
		encoder_Serialized.Write(packet, Serialized);

		packet.Send(toClient, ignoreClient);
	}

	/// <inheritdoc cref=""global::Terraria.ModLoader.Packets.INetPacket.Receive(BinaryReader, int)""/>
	[CompilerGenerated]
	public void Receive(BinaryReader reader, int sender) {
		// SetDefaults();

		var encoder_Default = default(global::Terraria.ModLoader.Packets.IntEncoder);
		Default = encoder_Default.Read(reader);
		var encoder_Serialized = default(global::Terraria.ModLoader.Packets.IntEncoder);
		Serialized = encoder_Serialized.Read(reader);

		if (Main.netMode == NetmodeID.Server) {
			Send(-1, sender);
		}
		HandlePacket();
	}
}

#nullable restore";

		await new GeneratorTest {
			TestState = {
				Sources = { CodeFile },
				GeneratedSources = {
					(typeof(Adapter<NetPacketGeneratorv2>), "GeneratedDemo.GeneratedPacket.g.cs", GeneratedFile),
				},
			},
		}.RunAsync();
	}

	[Fact]
	public async Task StructPacketWithDefaultSerializedIgnoredInt32PropertyAutoSerializeOff()
	{
		const string CodeFile = @"
using Terraria.ModLoader;
using Terraria.ModLoader.Packets;

namespace GeneratedDemo;

public sealed class GeneratedMod : Mod {
}

[NetPacket(typeof(GeneratedMod), AutoSerialize = false)]
public partial struct GeneratedPacket {
	public const byte Id = GeneratedDemo.PacketRegistry.GeneratedPacketId;

	public int Default { get; set; }

	[Serialize]
	public int Serialized { get; set; }

	[Ignore]
	public int Ignored { get; set; }

	public readonly void HandlePacket() {
	}

	public void HandleForAll() => throw new System.NotImplementedException();
}

[PacketRegistry]
static partial class PacketRegistry {
	[NetPacketIdOf(typeof(GeneratedPacket))]
	public const byte GeneratedPacketId = 0;
}
";

		const string GeneratedFile = @"// <auto-generated/>
#nullable disable
using System.IO;
using System.Runtime.CompilerServices;
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;

namespace GeneratedDemo;

partial struct GeneratedPacket : global::Terraria.ModLoader.Packets.INetPacket {
	/// <inheritdoc cref=""global::Terraria.ModLoader.Packets.INetPacket.Send(int, int)""/>
	[CompilerGenerated]
	public void Send(int toClient = -1, int ignoreClient = -1) {
		var packet = ModContent.GetInstance<global::GeneratedDemo.GeneratedMod>().GetPacket();
		packet.Write(Id);

		var encoder_Serialized = default(global::Terraria.ModLoader.Packets.IntEncoder);
		encoder_Serialized.Write(packet, Serialized);

		packet.Send(toClient, ignoreClient);
	}

	/// <inheritdoc cref=""global::Terraria.ModLoader.Packets.INetPacket.Receive(BinaryReader, int)""/>
	[CompilerGenerated]
	public void Receive(BinaryReader reader, int sender) {
		// SetDefaults();

		var encoder_Serialized = default(global::Terraria.ModLoader.Packets.IntEncoder);
		Serialized = encoder_Serialized.Read(reader);

		if (Main.netMode == NetmodeID.Server) {
			Send(-1, sender);
		}
		HandlePacket();
	}
}

#nullable restore";

		await new GeneratorTest {
			TestState = {
				Sources = { CodeFile },
				GeneratedSources = {
					(typeof(Adapter<NetPacketGeneratorv2>), "GeneratedDemo.GeneratedPacket.g.cs", GeneratedFile),
				},
			},
		}.RunAsync();
	}
}
