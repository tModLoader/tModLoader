using GeneratorTest = tModLoader.SourceGenerators.Tests.tModLoaderSourceGeneratorVerifier<tModLoader.SourceGenerators.Tests.Adapter<tModLoader.SourceGenerators.NetPacketGeneratorv2>>.Test;

namespace tModLoader.SourceGenerators.Tests;

partial class NetPacketGeneratorv2Tests
{
	[Fact]
	public async Task DefaultEncodedType()
	{
		const string CodeFile = @"
using System.IO;
using Terraria.ModLoader;
using Terraria.ModLoader.Packets;

namespace GeneratedDemo;

public sealed class GeneratedMod : Mod {
}

public class DefaultEncodedType : IDefaultEncoder<DefaultEncodedType.Encoder> {
	public struct Encoder : INetEncoder<DefaultEncodedType> {
		public void Write(ModPacket writer, DefaultEncodedType value) {
		}

		public DefaultEncodedType Read(BinaryReader reader) {
			return new DefaultEncodedType();
		}
	}
}

[NetPacket(typeof(GeneratedMod))]
public partial struct GeneratedPacket {
	public DefaultEncodedType Type;

	public readonly void HandlePacket() {
	}
}
";

		const string GeneratedFile = @"// <auto-generated/>
using System.IO;
using System.Runtime.CompilerServices;

namespace GeneratedDemo;

partial struct GeneratedPacket {
	[CompilerGenerated]
	private void Serialize(global::Terraria.ModLoader.ModPacket writer, int toClient, int ignoreClient) {

		var encoder_Type = default(global::GeneratedDemo.DefaultEncodedType.Encoder);
		encoder_Type.Write(writer, Type);

	}

	[CompilerGenerated]
	private void Deserialize(BinaryReader reader, int sender) {

		var encoder_Type = default(global::GeneratedDemo.DefaultEncodedType.Encoder);
		Type = encoder_Type.Read(reader);

	}
}
";

		await new GeneratorTest {
			TestState = {
				Sources = { CodeFile },
				GeneratedSources = {
					(typeof(Adapter<NetPacketGeneratorv2>), "GeneratedDemo.GeneratedPacket.g.cs", GeneratedFile),
				},
			},
		}.RunAsync();
	}

	[Fact]
	public async Task DefaultEncodedInheritedType()
	{
		const string CodeFile = @"
using System.IO;
using Terraria.ModLoader;
using Terraria.ModLoader.Packets;

namespace GeneratedDemo;

public sealed class GeneratedMod : Mod {
}

public class DefaultEncodedType : IDefaultEncoder<DefaultEncodedType.Encoder> {
	public struct Encoder : INetEncoder<DefaultEncodedType> {
		public void Write(ModPacket writer, DefaultEncodedType value) {
		}

		public DefaultEncodedType Read(BinaryReader reader) {
			return new DefaultEncodedType();
		}
	}
}
public class InheritedEncodedType : DefaultEncodedType {
}

[NetPacket(typeof(GeneratedMod))]
public partial struct GeneratedPacket {
	public InheritedEncodedType Type;

	public readonly void HandlePacket() {
	}
}
";

		const string GeneratedFile = @"// <auto-generated/>
using System.IO;
using System.Runtime.CompilerServices;

namespace GeneratedDemo;

partial struct GeneratedPacket {
	[CompilerGenerated]
	private void Serialize(global::Terraria.ModLoader.ModPacket writer, int toClient, int ignoreClient) {

		var encoder_Type = default(global::GeneratedDemo.DefaultEncodedType.Encoder);
		encoder_Type.Write(writer, (global::GeneratedDemo.DefaultEncodedType)Type);

	}

	[CompilerGenerated]
	private void Deserialize(BinaryReader reader, int sender) {

		var encoder_Type = default(global::GeneratedDemo.DefaultEncodedType.Encoder);
		Type = (global::GeneratedDemo.InheritedEncodedType)encoder_Type.Read(reader);

	}
}
";

		await new GeneratorTest {
			TestState = {
				Sources = { CodeFile },
				GeneratedSources = {
					(typeof(Adapter<NetPacketGeneratorv2>), "GeneratedDemo.GeneratedPacket.g.cs", GeneratedFile),
				},
			},
		}.RunAsync();
	}
}
