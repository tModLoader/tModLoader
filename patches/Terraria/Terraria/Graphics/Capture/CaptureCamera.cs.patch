--- src/decompiled/Terraria/Graphics/Capture/CaptureCamera.cs
+++ src/Terraria/Terraria/Graphics/Capture/CaptureCamera.cs
@@ -2,8 +_,13 @@
 using Microsoft.Xna.Framework.Graphics;
 using System;
 using System.Collections.Generic;
+#if NETCORE
+using SixLabors.ImageSharp;
+using SixLabors.ImageSharp.PixelFormats;
+#else
 using System.Drawing;
 using System.Drawing.Imaging;
+#endif
 using System.IO;
 using System.Runtime.InteropServices;
 using System.Threading;
@@ -14,6 +_,11 @@
 {
 	internal class CaptureCamera
 	{
+#if FNA
+		// ninja hack to reduce patch size
+		enum ImageFormat { Png }
+#endif
+
 		private class CaptureChunk
 		{
 			public readonly Microsoft.Xna.Framework.Rectangle Area;
@@ -95,7 +_,8 @@
 					num = Math.Min(num, 4096f / (float)(area.Height * 16));
 
 				num = Math.Min(1f, num);
-				_outputImageSize = new Size((int)MathHelper.Clamp((int)(num * (float)(area.Width * 16)), 1f, 4096f), (int)MathHelper.Clamp((int)(num * (float)(area.Height * 16)), 1f, 4096f));
+				_outputImageSize.Width = (int)MathHelper.Clamp((int)(num * (float)(area.Width * 16)), 1f, 4096f);
+				_outputImageSize.Height = (int)MathHelper.Clamp((int)(num * (float)(area.Height * 16)), 1f, 4096f);
 				_outputData = new byte[4 * _outputImageSize.Width * _outputImageSize.Height];
 				int num2 = (int)Math.Floor(num * 2048f);
 				_scaledFrameData = new byte[4 * num2 * num2];
@@ -177,10 +_,17 @@
 					byte* ptr4 = ptr3 + (destinationBufferWidth * area.Y + area.X << 2);
 					for (int i = 0; i < area.Height; i++) {
 						for (int j = 0; j < area.Width; j++) {
+#if XNA
 							ptr4[2] = *ptr2;
 							ptr4[1] = ptr2[1];
-							*ptr4 = ptr2[2];
+							ptr4[0] = ptr2[2];
 							ptr4[3] = ptr2[3];
+#else
+							ptr4[0] = ptr2[0];
+							ptr4[1] = ptr2[1];
+							ptr4[2] = ptr2[2];
+							ptr4[3] = ptr2[3];
+#endif
 							ptr2 += 4;
 							ptr4 += 4;
 						}
@@ -199,6 +_,7 @@
 				return false;
 
 			try {
+#if XNA
 				using (Bitmap bitmap = new Bitmap(width, height)) {
 					System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, width, height);
 					BitmapData bitmapData = bitmap.LockBits(rect, ImageLockMode.WriteOnly, PixelFormat.Format32bppPArgb);
@@ -208,6 +_,9 @@
 					bitmap.Save(filename, imageFormat);
 					bitmap.Dispose();
 				}
+#else
+				SavePng(width, height, filename);
+#endif
 
 				return true;
 			}
@@ -217,25 +_,53 @@
 			}
 		}
 
+#if FNA
+		private void SavePng(int width, int height, string filename) {
+			using (FileStream fileStream = File.Create(filename)) {
+#if !NETCORE
+				PlatformUtilities.SavePng(fileStream, width, height, width, height, _outputData);
+#endif
+				if (!Main.dedServ) {
+					//var tex = new Texture2D(Main.graphics.GraphicsDevice, width, height);
+					//tex.SetData(_outputData);
+					//tex.SaveAsPng(fileStream, width, height);
+					var image = Image.LoadPixelData<Rgba32>(_outputData, width, height);
+					image.SaveAsPng(fileStream);
+				}
+			}
+		}
+#endif
+
 		private void SaveImage(Texture2D texture, int width, int height, ImageFormat imageFormat, string foldername, string filename) {
 			string text = Main.SavePath + Path.DirectorySeparatorChar + "Captures" + Path.DirectorySeparatorChar + foldername;
 			string filename2 = Path.Combine(text, filename);
 			if (!Utils.TryCreatingDirectory(text))
 				return;
 
+#if XNA
 			using (Bitmap bitmap = new Bitmap(width, height)) {
 				System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, width, height);
+#else
+			{//keep the formatter happy
+#endif
 				int elementCount = texture.Width * texture.Height * 4;
 				texture.GetData(_outputData, 0, elementCount);
 				int num = 0;
 				int num2 = 0;
 				for (int i = 0; i < height; i++) {
 					for (int j = 0; j < width; j++) {
+#if XNA
 						byte b = _outputData[num + 2];
 						_outputData[num2 + 2] = _outputData[num];
 						_outputData[num2] = b;
 						_outputData[num2 + 1] = _outputData[num + 1];
 						_outputData[num2 + 3] = _outputData[num + 3];
+#else
+						_outputData[num2] = _outputData[num];
+						_outputData[num2 + 1] = _outputData[num + 1];
+						_outputData[num2 + 2] = _outputData[num + 2];
+						_outputData[num2 + 3] = _outputData[num + 3];
+#endif
 						num += 4;
 						num2 += 4;
 					}
@@ -243,12 +_,18 @@
 					num += texture.Width - width << 2;
 				}
 
+#if XNA
 				BitmapData bitmapData = bitmap.LockBits(rect, ImageLockMode.WriteOnly, PixelFormat.Format32bppPArgb);
 				IntPtr scan = bitmapData.Scan0;
 				Marshal.Copy(_outputData, 0, scan, width * height * 4);
 				bitmap.UnlockBits(bitmapData);
 				bitmap.Save(filename2, imageFormat);
 			}
+#else
+			}
+
+			SavePng(width, height, filename);
+#endif
 		}
 
 		private void FinishCapture() {
@@ -279,6 +_,9 @@
 		}
 
 		public void Dispose() {
+			if (Main.dedServ)
+				return;
+
 			Monitor.Enter(_captureLock);
 			if (!_isDisposed) {
 				_frameBuffer.Dispose();
