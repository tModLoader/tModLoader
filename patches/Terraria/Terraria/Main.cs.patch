--- src/decompiled/Terraria/Main.cs
+++ src/Terraria/Terraria/Main.cs
@@ -5,6 +_,9 @@
 using Microsoft.Xna.Framework.Input;
 using ReLogic.Content;
 using ReLogic.Content.Sources;
+#if MAC
+using SDL2;
+#endif
 using ReLogic.Graphics;
 using ReLogic.Localization.IME;
 using ReLogic.OS;
@@ -15,16 +_,23 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
+#if WINDOWS
 using System.Drawing;
+#endif
 using System.IO;
 using System.Linq;
 using System.Reflection;
+#if !WINDOWS
+using System.Runtime.CompilerServices;
+#endif
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
+#if WINDOWS
 using System.Windows.Forms;
+#endif
 using Terraria.Achievements;
 using Terraria.Audio;
 using Terraria.Chat;
@@ -70,10 +_,17 @@
 using Terraria.UI.Gamepad;
 using Terraria.Utilities;
 using Terraria.WorldBuilding;
+#if SERVER
+using Terraria.Server;
+#endif
 
 namespace Terraria
 {
+#if SERVER
+	public class Main : Terraria.Server.Game
+#else
 	public class Main : Game
+#endif
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
@@ -97,6 +_,7 @@
 			Ready
 		}
 
+#if WINDOWS
 		internal static class NativeMethods
 		{
 			public const uint ES_CONTINUOUS = 2147483648u;
@@ -105,6 +_,7 @@
 			[DllImport("kernel32.dll")]
 			public static extern uint SetThreadExecutionState(uint esFlags);
 		}
+#endif
 
 		private struct MouseTextCache
 		{
@@ -482,7 +_,11 @@
 		public static float gFader;
 		public static byte gFadeDir = 1;
 		public static bool shouldDrawNetDiagnosticsUI;
+#if CLIENT
 		public static INetDiagnosticsUI ActiveNetDiagnosticsUI = new NetDiagnosticsUI();
+#else
+		public static INetDiagnosticsUI ActiveNetDiagnosticsUI = new EmptyDiagnosticsUI();
+#endif
 		public static IMultiplayerClosePlayersOverlay ActiveClosePlayersTeamOverlay = new NewMultiplayerClosePlayersOverlay();
 		public static double UpdateTimeAccumulator;
 		public static bool drawSkip;
@@ -1108,8 +_,13 @@
 		public static float MinimumZoomComparerX = 1920f;
 		public static float MinimumZoomComparerY = 1200f;
 		private static int _renderTargetMaxSize = 2048;
+#if XNA
 		private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.Reach;
 		private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.Reach;
+#else
+		private static GraphicsProfile _selectedGraphicsProfile = GraphicsProfile.HiDef;
+		private static GraphicsProfile _currentGraphicsProfile = GraphicsProfile.HiDef;
+#endif
 		public static int LogicCheckScreenWidth = 1920;
 		public static int LogicCheckScreenHeight = 1200;
 		private static WorldPreparationState _worldPreparationState = WorldPreparationState.AwaitingData;
@@ -1936,7 +_,9 @@
 		public static string oldStatusText = "";
 		public static string autoGenFileLocation = null;
 		public static bool autoShutdown;
+#if WINDOWS
 		private uint previousExecutionState;
+#endif
 		public static int sundialCooldown;
 		public static bool fastForwardTime;
 		private static Stopwatch splashTimer = new Stopwatch();
@@ -3172,10 +_,12 @@
 
 		protected void CheckBunny() {
 			try {
+#if WINDOWS //TODO: <https://www.nuget.org/packages/Microsoft.Win32.Registry/>?
 				RegistryKey currentUser = Registry.CurrentUser;
 				currentUser = currentUser.CreateSubKey("Software\\Terraria");
 				if (currentUser != null && currentUser.GetValue("Bunny") != null && currentUser.GetValue("Bunny").ToString() == "1")
 					runningCollectorsEdition = true;
+#endif
 			}
 			catch {
 				runningCollectorsEdition = false;
@@ -3217,6 +_,7 @@
 
 			PendingBorderlessState = screenBorderless;
 			screenBorderlessPendingResizes = (screenBorderless ? 6 : 0);
+#if WINDOWS
 			Form form = (Form)Control.FromHandle(instance.Window.Handle);
 			if (screenBorderless) {
 				SetBorderlessFormStyle(form);
@@ -3230,6 +_,7 @@
 			}
 
 			form.BringToFront();
+#endif
 			int currentValue2 = graphics.PreferredBackBufferWidth;
 			int currentValue3 = graphics.PreferredBackBufferHeight;
 			Configuration.Get("DisplayWidth", ref currentValue2);
@@ -3589,8 +_,11 @@
 							if (num >= 2)
 								terrariasFixedTiming = binaryReader.ReadBoolean();
 
-							if (num >= 91 && binaryReader.ReadBoolean())
+							if (num >= 91 && binaryReader.ReadBoolean()) {
+#if WINDOWS
 								((Form)Control.FromHandle(base.Window.Handle)).WindowState = FormWindowState.Maximized;
+#endif
+							}
 
 							if (num >= 4) {
 								int width = binaryReader.ReadInt32();
@@ -3682,11 +_,16 @@
 		private static void EraseWorld(int i) {
 			try {
 				if (!WorldList[i].IsCloudSave) {
+#if WINDOWS
 					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path + ".bak");
 					for (int j = 2; j <= 9; j++) {
 						FileOperationAPIWrapper.MoveToRecycleBin(WorldList[i].Path + ".bak" + j);
 					}
+#else
+					File.Delete(Main.WorldList[i].Path);
+					File.Delete(Main.WorldList[i].Path + ".bak");
+#endif
 				}
 				else if (SocialAPI.Cloud != null) {
 					SocialAPI.Cloud.Delete(WorldList[i].Path);
@@ -3983,12 +_,16 @@
 		}
 
 		public void NeverSleep() {
+#if WINDOWS
 			previousExecutionState = NativeMethods.SetThreadExecutionState(2147483649u);
+#endif
 		}
 
 		public void YouCanSleepNow() {
+#if WINDOWS
 			if (previousExecutionState != 0)
 				NativeMethods.SetThreadExecutionState(previousExecutionState);
+#endif
 		}
 
 		public void DedServ() {
@@ -3996,9 +_,11 @@
 			rand = new UnifiedRandom();
 			if (autoShutdown) {
 				string lpWindowName = Console.Title = "terraria" + rand.Next(int.MaxValue);
+#if WINDOWS
 				IntPtr intPtr = FindWindow(null, lpWindowName);
 				if (intPtr != IntPtr.Zero)
 					ShowWindow(intPtr, 0);
+#endif
 			}
 			else {
 				Console.Title = "Terraria Server " + versionNumber2;
@@ -4791,6 +_,11 @@
 			instance = this;
 			UnpausedUpdateSeed = (ulong)Guid.NewGuid().GetHashCode();
 			base.Exiting += Main_Exiting;
+
+			if (Main.dedServ) {
+				return;
+			}
+
 			Configuration.Load();
 			graphics = new GraphicsDeviceManager(this as Game);
 			base.Content.RootDirectory = "Content";
@@ -4821,6 +_,9 @@
 		}
 
 		protected void SetTitle() {
+			if (Main.dedServ)
+				return;
+
 			_cachedTitle = Lang.GetRandomGameTitle();
 			Platform.Get<IWindowService>().SetUnicodeTitle(base.Window, _cachedTitle);
 		}
@@ -4862,6 +_,10 @@
 
 		protected override void Initialize() {
 			musicFade[50] = 1f;
+
+			if (Main.dedServ)
+				netMode = 2;
+
 			for (int i = 0; i < 10; i++) {
 				recentWorld[i] = "";
 				recentIP[i] = "";
@@ -4887,7 +_,10 @@
 			WorldGen.Hooks.OnWorldLoad += delegate {
 				AmbienceServer = new AmbienceServer();
 				LocalGolfState = new GolfState();
+
+				if (!dedServ) {
-				Lighting.Clear();
+					Lighting.Clear();
+				}
 			};
 
 			DontStarveSeed.Initialize();
@@ -4901,6 +_,12 @@
 			};
 
 			SceneMetrics = new SceneMetrics();
+
+			if (Main.dedServ) {
+				Initialize_AlmostEverything();
+				return;
+			}
+
 			TimeLogger.Initialize();
 			LoadContent_TryEnteringHiDef();
 			ClientInitialize();
@@ -4941,10 +_,24 @@
 			ItemDropSolver = new ItemDropResolver(itemDropDatabase);
 			ShopHelper = new ShopHelper();
 			CreativeItemSacrificesCatalog.Instance.Initialize();
+
+			if (dedServ)
+				goto ServerCode1;
+
 			BestiaryUI = new UIBestiaryTest(BestiaryDB);
 			ContentThatNeedsRenderTargets.Add(MapPlayerRenderer);
 			Lighting.Initialize();
 			MapHelper.Initialize();
+
+			goto PostServerCode1;
+
+			ServerCode1:
+
+			Mount.Initialize();
+			Minecart.Initialize();
+
+			PostServerCode1:
+
 			WorldGen.RandomizeBackgrounds(rand);
 			if (treeBGSet1[0] == 173)
 				WorldGen.RandomizeBackgrounds(rand);
@@ -5018,11 +_,16 @@
 				ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(myPlayer);
 			}
-			else {
+#if WINDOWS
+			else if (!Main.dedServ) {
 				IntPtr systemMenu = GetSystemMenu(base.Window.Handle, bRevert: false);
 				int menuItemCount = GetMenuItemCount(systemMenu);
 				RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
+#endif
+
+			if (Main.dedServ)
+				return;
 
 			SoundID.FillAccessMap();
 			Star.SpawnStars();
@@ -8349,12 +_,16 @@
 			Configuration.Load();
 			Configuration.Get("UseExperimentalFeatures", ref UseExperimentalFeatures);
 			Configuration.Get("Support4K", ref Support4K);
+#if FNA
+			SetGraphicsProfile(GraphicsProfile.HiDef, forceSet: true);
+#else
 			bool flag = Support4K && base.GraphicsDevice.Adapter.IsProfileSupported(GraphicsProfile.HiDef);
 			if (GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width <= 1920 && GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height <= 1200)
 				flag = false;
 
 			if (Support4K && flag && base.GraphicsDevice.GraphicsProfile != GraphicsProfile.HiDef)
 				SetGraphicsProfile(GraphicsProfile.HiDef, forceSet: false);
+#endif
 		}
 
 		protected IEnumerator LoadContent_Deferred() {
@@ -8408,6 +_,8 @@
 			numClouds = rand.Next(200);
 			Mount.Initialize();
 			Minecart.Initialize();
+			// move instance creation from class constructor to main thread to avoid deadlocks from content loading on JIT thread with FNA
+			CaptureManager.Instance = new CaptureManager();
 			CacheSupportedDisplaySizes();
 			ContentSamples.RebuildItemCreativeSortingIDsAfterRecipesAreSetUp();
 			ContentSamples.CommonlyUsedContentSamples.PrepareAfterEverythingElseLoaded();
@@ -8516,7 +_,7 @@
 			if (!SoundEngine.IsAudioSupported || !_musicLoaded)
 				return;
 
-			if (!showSplash)
+			if (!dedServ && !showSplash) // if (!showSplash)
 				SoundEngine.Update();
 
 			if (musicVolume == 0f)
@@ -12341,6 +_,9 @@
 		}
 
 		public static void NotifyOfEvent(GameNotificationType type) {
+			if (Main.dedServ)
+				return;
+
 			if (!instance.IsActive && _flashNotificationType.HasFlag(type)) {
 				QueueMainThreadAction(delegate {
 					Platform.Get<IWindowService>().StartFlashingIcon(instance.Window);
@@ -12394,13 +_,26 @@
 				InGameUI.SetState(null);
 
 			CurrentInputTextTakerOverride = null;
+
+			if (dedServ)
+				goto SkipAchievemntAdvisorUpdate;
+
 			AchievementAdvisor.Update();
+
+			SkipAchievemntAdvisorUpdate:
+
 			PlayerInput.SetZoom_Unscaled();
 			MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
+
+			if (Main.dedServ)
+				goto SkipSpecialOnTick;
+
 			if (Main.OnTickForThirdPartySoftwareOnly != null)
 				Main.OnTickForThirdPartySoftwareOnly();
 
+			SkipSpecialOnTick:
+
 			if (_hasPendingNetmodeChange) {
 				netMode = _targetNetMode;
 				_hasPendingNetmodeChange = false;
@@ -12603,12 +_,14 @@
 
 				UpdateOldNPCShop();
 				hasFocus = base.IsActive;
+#if WINDOWS && CLIENT
 				Form form = Control.FromHandle(base.Window.Handle) as Form;
 				bool num2 = form.WindowState == FormWindowState.Minimized;
 				bool flag = Form.ActiveForm == form;
 				hasFocus |= flag;
 				if (num2)
 					hasFocus = false;
+#endif
 
 				if (!hasFocus && netMode == 0) {
 					if (!Platform.IsOSX)
@@ -12685,7 +_,9 @@
 			if (Main.OnTickForInternalCodeOnly != null)
 				Main.OnTickForInternalCodeOnly();
 
-			if (netMode != 1 && !gameMenu && !gamePaused && AmbienceServer != null)
+			// Client - if (netMode != 1 && !gameMenu && !gamePaused && AmbienceServer != null)
+			// Server - if (AmbienceServer != null)
+			if ((dedServ || (netMode != 1 && !gameMenu && !gamePaused)) && AmbienceServer != null)
 				AmbienceServer.Update();
 
 			WorldGen.BackgroundsCache.UpdateFlashValues();
@@ -14615,6 +_,10 @@
 		public static extern short GetKeyState(int keyCode);
 
 		public static string GetInputText(string oldString, bool allowMultiLine = false) {
+			if (dedServ) {
+				return "";
+			}
+
 			if (!hasFocus)
 				return oldString;
 
@@ -36040,9 +_,19 @@
 
 		protected void QuitGame() {
 			SaveSettings();
+
+			if (dedServ)
+				goto PostClientThings;
+
 			SocialAPI.Shutdown();
+
+			PostClientThings:
+
 			Assets.TransferCompletedAssets();
 			Exit();
+#if MAC
+			SDL.SDL_DestroyWindow(base.Window.Handle);
+#endif
 		}
 
 		protected Microsoft.Xna.Framework.Color randColor() {
@@ -39489,10 +_,17 @@
 
 		private void OnSubmitServerPassword() {
 			string str = "-autoshutdown -password \"" + ConvertToSafeArgument(Netplay.ServerPassword) + "\" -lang " + Language.ActiveCulture.LegacyId;
+#if LINUX
+			str += IntPtr.Size == 8 ? " -x64": " -x86";
+#endif
 			str = ((!ActiveWorldFileData.IsCloudSave) ? (str + SanitizePathArgument("world", worldPathName)) : (str + SanitizePathArgument("cloudworld", worldPathName)));
 			str = str + " -worldrollbackstokeep " + WorldRollingBackupsCountToKeep;
 			tServer = new Process();
+#if WINDOWS
 			tServer.StartInfo.FileName = "TerrariaServer.exe";
+#else
+			tServer.StartInfo.FileName = "TerrariaServer";
+#endif
 			tServer.StartInfo.Arguments = str;
 			if (libPath != "") {
 				ProcessStartInfo startInfo = tServer.StartInfo;
@@ -39712,6 +_,9 @@
 			_uiScaleWanted = uiScaleWanted;
 		}
 
+#if FNA
+		private static bool IsBorderlessDisplayAvailable() => false;
+#else
 		private static bool IsBorderlessDisplayAvailable() => true;
 
 		private static void SetDisplayModeAsBorderless(ref int width, ref int height, Form form) {
@@ -39739,6 +_,7 @@
 			form.Location = new System.Drawing.Point(0, 0);
 			form.FormBorderStyle = FormBorderStyle.None;
 		}
+#endif
 
 		public static void OpenCharacterSelectUI() {
 			menuMode = 888;
@@ -42132,7 +_,11 @@
 			base.GraphicsDevice.SetRenderTarget(backWaterTarget);
 			base.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color.Transparent);
 			spriteBatch.Begin();
+#if XNA
 			tileBatch.Begin();
+#else
+			tileBatch.Begin(SpriteSortMode.Texture, BlendState.AlphaBlend);
+#endif
 			try {
 				DrawWaters(isBackground: true);
 			}
@@ -43497,6 +_,9 @@
 		}
 
 		public static void TriggerPing(Vector2 position) {
+			if (dedServ)
+				return;
+
 			Pings.Add(position);
 			if (netMode == 1)
 				NetManager.Instance.SendToServer(NetPingModule.Serialize(position));
@@ -47341,6 +_,9 @@
 		}
 
 		private static void CheckMonoliths() {
+			if (dedServ)
+				return;
+
 			bool flag = player[myPlayer].ZoneTowerVortex || player[myPlayer].ZoneTowerNebula || player[myPlayer].ZoneTowerStardust || player[myPlayer].ZoneTowerSolar;
 			for (int i = 0; i < MonolithFilterNames.Length; i++) {
 				if (!flag && i == SceneMetrics.ActiveMonolithType) {
@@ -47426,10 +_,15 @@
 			if (!base.IsActive)
 				maxQ = true;
 
+			if (dedServ)
+				goto SkipOverPreDraw;
+
 			UpdateDisplaySettings();
 			if (Main.OnPreDraw != null)
 				Main.OnPreDraw(gameTime);
 
+			SkipOverPreDraw:
+
 			drawsCountedForFPS++;
 			screenLastPosition = screenPosition;
 			if (stackSplit == 0) {
@@ -49971,6 +_,10 @@
 			CreditsRollEvent.UpdateTime();
 			WorldGen.mysticLogsEvent.UpdateTime();
 			PylonSystem.Update();
+
+			if (dedServ)
+				goto SkipMoonLordEffects;
+
 			if (NPC.MoonLordCountdown > 0) {
 				float num5 = MathHelper.Clamp((float)Math.Sin((float)NPC.MoonLordCountdown / 60f * 0.5f) * 2f, 0f, 1f);
 				num5 *= 0.75f - 0.5f * ((float)NPC.MoonLordCountdown / 3600f);
@@ -49983,6 +_,8 @@
 				Terraria.Graphics.Effects.Filters.Scene.Deactivate("MoonLordShake");
 			}
 
+			SkipMoonLordEffects:
+
 			if (NPC.MoonLordCountdown > 0) {
 				NPC.MoonLordCountdown--;
 				if (NPC.MoonLordCountdown <= 0 && netMode != 1)
@@ -50900,6 +_,7 @@
 		}
 
 		public static void SetDisplayMode(int width, int height, bool fullscreen) {
+#if WINDOWS
 			bool flag = false;
 			Form form = (Form)Control.FromHandle(instance.Window.Handle);
 			screenMaximized = (form.WindowState == FormWindowState.Maximized);
@@ -50907,14 +_,19 @@
 				screenMaximized = false;
 				form.WindowState = FormWindowState.Normal;
 			}
+#else
+			Main.screenMaximized = false;
+#endif
 
+#if WINDOWS
 			flag = (form.FormBorderStyle == FormBorderStyle.None);
+#endif
 			bool flag2 = false;
 			int num3;
 			int num4;
 			if (screenBorderless || screenMaximized || graphics.IsFullScreen || fullscreen) {
 				bool flag3 = false;
-				if (PlayerInput.SteamDeckIsUsed) {
+				if(width > maxScreenW) {
 					flag3 = true;
 					if (!fullscreen && !graphics.IsFullScreen) {
 						width = 1280;
@@ -50923,9 +_,11 @@
 					}
 				}
 
+#if WINDOWS
 				form.MinimumSize = new Size(0, 0);
 				if (!fullscreen && !flag3)
 					SetDisplayModeAsBorderless(ref width, ref height, form);
+#endif
 
 				if (width > maxScreenW) {
 					float num = (float)height / (float)width;
@@ -50953,11 +_,13 @@
 			}
 			else {
 				PlayerInput.RawMouseScale = Vector2.One;
+#if WINDOWS
 				form.MinimumSize = new Size(minScreenW, minScreenH);
 				if (flag) {
 					width = displayWidth[0];
 					height = displayHeight[0];
 				}
+#endif
 
 				width = Math.Min(width, maxScreenW);
 				height = Math.Min(height, maxScreenH);
@@ -50966,6 +_,7 @@
 				flag2 = (graphics.PreferredBackBufferWidth != graphics.GraphicsDevice.Viewport.Width || graphics.PreferredBackBufferHeight != graphics.GraphicsDevice.Viewport.Height);
 			}
 
+#if XNA
 			if (!fullscreen && !flag2) {
 				if (form.ClientSize.Width < graphics.PreferredBackBufferWidth) {
 					width = form.ClientSize.Width;
@@ -50977,9 +_,10 @@
 					flag2 = true;
 				}
 			}
-
-			width &= 0x7FFFFFFE;
-			height &= 0x7FFFFFFE;
+#endif
+			//unknown justification for preventing odd window sizes. Causes excessive device resets. - ChickenBones
+			//width &= 0x7FFFFFFE;
+			//height &= 0x7FFFFFFE;
 			width = Math.Max(width, minScreenW);
 			height = Math.Max(height, minScreenH);
 			if (graphics.IsFullScreen != fullscreen) {
@@ -51007,6 +_,7 @@
 				PendingResolutionWidth = screenWidth;
 				PendingResolutionHeight = screenHeight;
 				PlayerInput.CacheOriginalScreenDimensions();
+#if WINDOWS
 				if (!fullscreen) {
 					if (screenBorderless) {
 						ApplyBorderlessResolution(form);
@@ -51019,6 +_,7 @@
 					form.SendToBack();
 					form.BringToFront();
 				}
+#endif
 
 				Lighting.Initialize();
 				if (!drawToScreen && !_isResizingAndRemakingTargets) {
