--- src/TerrariaNetCore/Terraria/Terraria.csproj
+++ src/tModLoader/Terraria/Terraria.csproj
@@ -11,59 +_,93 @@
 		<Company>Re-Logic</Company>
 		<Copyright>Copyright Â© 2022 Re-Logic</Copyright>
 		<RootNamespace>Terraria</RootNamespace>
-		<AssemblyName>Terraria</AssemblyName>
+		<AssemblyName>tModLoader</AssemblyName>
-		<ApplicationIcon>Icon.ico</ApplicationIcon>
+		<ApplicationIcon>tModLoader.ico</ApplicationIcon>
-
-		<!-- Avoid overwriting Terraria.exe (if it's not Debug it's release) -->
-		<AssemblyName Condition="$(Configuration.Contains('Debug'))">$(AssemblyName)Debug</AssemblyName>
-		<AssemblyName Condition="!$(Configuration.Contains('Debug'))">$(AssemblyName)Release</AssemblyName>
 		<OutputName>$(AssemblyName)</OutputName>
 	</PropertyGroup>
 
 	<!-- Build Configuration -->
 	<PropertyGroup>
+		<UseAppHost>false</UseAppHost>
+		<GenerateDocumentationFile>true</GenerateDocumentationFile>
+		
 		<LibrariesDirectory>Libraries</LibrariesDirectory>
 		<GenerateRuntimeConfigDevFile>true</GenerateRuntimeConfigDevFile>
 		<CopyDebugSymbolFilesFromPackages>true</CopyDebugSymbolFilesFromPackages>
 		<CopyDocumentationFilesFromPackages>true</CopyDocumentationFilesFromPackages>
+		<ValidateExecutableReferencesMatchSelfContained>false</ValidateExecutableReferencesMatchSelfContained>
+	</PropertyGroup>
+
+	<!-- Versioning -->
+	<PropertyGroup>
+		<tMLVersion Condition="'$(TmlVersion)' == ''">9999.0</tMLVersion>
+		<StableVersion Condition="'$(stableVersion)' == ''">0.0</StableVersion>
+		<BuildPurpose Condition="'$(BuildPurpose)' == ''">dev</BuildPurpose>
+		<BranchName Condition="'$(BranchName)' == ''">unknown</BranchName>
+		<BranchName>$(BranchName.Replace("|","-"))</BranchName>
+		<CommitSHA Condition="'$(CommitSHA)' == ''">unknown</CommitSHA>
+		<BuildDate>$([System.DateTime]::UtcNow.ToBinary())</BuildDate>
+		<SourceRevisionId>$(tMLVersion)|$(StableVersion)|$(BranchName)|$(BuildPurpose)|$(CommitSHA)|$(BuildDate)</SourceRevisionId>
 	</PropertyGroup>
 
 	<!-- References -->
 	<ItemGroup>
 		<ProjectReference Include="../../../FNA/FNA.Core.csproj" />
 		<ProjectReference Include="../ReLogic/ReLogic.csproj" />
-		<EmbeddedResource Include="../ReLogic/bin/$(Configuration)/$(TargetFramework)/ReLogic.dll">
-			<Link>Libraries/ReLogic/ReLogic.dll</Link>
-			<LogicalName>Terraria.Libraries.ReLogic.ReLogic.dll</LogicalName>
-		</EmbeddedResource>
+		<ProjectReference Include="../../../tModPorter/tModPorter/tModPorter.csproj" />
 
 		<Reference Include="CsvHelper" />
-		<Reference Include="Ionic.Zip.CF" />
 		<Reference Include="MP3Sharp" />
 		<Reference Include="Newtonsoft.Json" />
 		<Reference Include="NVorbis" />
 		<Reference Include="RailSDK.Net" />
 		<Reference Include="SteelSeriesEngineWrapper" />
+		<Reference Include="log4net" />
+		<Reference Include="TerrariaHooks" />
 
+		<PackageReference Include="DotNetZip" Version="1.16.0" />
 		<PackageReference Include="Steamworks.NET" Version="20.1.0" />
+		<PackageReference Include="Basic.Reference.Assemblies.Net80" Version="1.5.0" />
+		<PackageReference Include="MonoMod.RuntimeDetour" Version="25.1.0" />
+		<PackageReference Include="Microsoft.Win32.Registry" Version="6.0.0-preview.5.21301.5 " />
+		<PackageReference Include="Hjson" Version="3.0.0" />
+		<PackageReference Include="System.Reflection.MetadataLoadContext" Version="8.0.0" />
+		<PackageReference Include="Stubble.Core" Version="1.10.8" PrivateAssets="All" />
+		<!-- ImageSharp is added as a reference here to generate the path to ImageSharp compiled files (GeneratePathProperty, creates $(PkgSixLabors_ImageSharp)). 
+		This is needed to copy the .netstandard2.0 version of ImageSharp to the tModLoader.BuildTasks directory inside Libraries/. If we only had the reference in the BuildTools.csproj (and without PrivateAssets="all"), 
+		the Terraria.csproj would obtain a transitive dependency to ImageSharp and attempt to copy the .netcoreapp3.1 version of ImageSharp to the Libraries/ folder (which was previously 
+		then being copied next to the tModLoader.BuildTasks.dll). The .netcoreapp3.1 version of ImageSharp worked when building from Rider or the command line, but failed when building from Visual Studio 
+		as it uses .NET framework 4.X, so the fix was to force the .netstandard2.0 version. -->
+		<!-- ImageSharp is not copied to the Libraries/ folder automatically due to PrivateAssets and ExcludeAssets, this is intended. -->
+		<PackageReference Include="SixLabors.ImageSharp" Version="2.1.6" GeneratePathProperty="true" PrivateAssets="all" ExcludeAssets="all" />
 	</ItemGroup>
 
 	<!-- Embedded Resources -->
 	<ItemGroup>
+		<EmbeddedResource Include="**\*.png" />
 		<EmbeddedResource Include="GameContent/Creative/Content/*" />
 		<EmbeddedResource Include="GameContent/Metadata/MaterialData/*" />
 		<EmbeddedResource Include="GameContent/WorldBuilding/*" />
 		<EmbeddedResource Include="IO/Data/*" />
 		<EmbeddedResource Include="Localization/Content/**" />
 		<EmbeddedResource Include="Microsoft/**" />
+		
+		<!-- Mod Template -->
+		<None Include="ModLoader/Templates/**" />
+		<Compile Remove="ModLoader/Templates/**" />
+		<EmbeddedResource Remove="ModLoader/Templates/**" />
+		<EmbeddedResource Include="ModLoader/Templates/**">
+			<LogicalName>$([System.String]::Copy('Terraria/%(Identity)').Replace('\', '/'))</LogicalName>
+		</EmbeddedResource>
 	</ItemGroup>
 
 	<!-- Files -->
 	<ItemGroup>
-		<None Remove="Libraries/Mono/**" />
+		<Compile Remove="Libraries/Common/TerrariaHooks.dll" />
 		<None Remove="Libraries/Windows/**" />
 		<None Remove="Libraries/XNA/**" />
 		<Content Include="Libraries/Native/**" CopyToOutputDirectory="PreserveNewest" />
+		<Content Include="release_extras/**" CopyToOutputDirectory="PreserveNewest" Link="%(RecursiveDir)%(Filename)%(Extension)" />
 	</ItemGroup>
 
 	<!-- Import tasks -->
@@ -100,13 +_,30 @@
 
 		<WriteLinesToFile File="$(ProjectRuntimeConfigDevFilePath)" Lines="$(DevRuntimeConfig)" Overwrite="true" Encoding="UTF-8" />
 	</Target>
+	
+	<Target Name="CopyBuildTasksDepsToOutputDirectory" BeforeTargets="CopyToActualOutputDirectory" AfterTargets="Build">
+		<!-- This is a separate task so that the files are copied to the temporary output directory before SynchronizeDirectories runs below -->
+		<!-- As the tModLoader.BuildTasks directory doesn't normally exist, SynchronizeDirectories attempts to delete it -->
+		<!-- from the actual output path, but this can cause errors as MSBuild might have locked the BuildTasks dll files -->
+		
+		<!-- Copy the ImageSharp library from the .nuget folder to the tModLoader.BuildTasks library folder in tModLoader/Libraries -->
+		<!-- Needed for the tModLoader.BuildTasks to be able to convert images to .rawimg that can be packed into the .tmod file -->
+		<Copy SourceFiles="$(PkgSixLabors_ImageSharp)\lib\netstandard2.0\SixLabors.ImageSharp.dll" DestinationFolder="$(TargetDir)Libraries/tModLoader.BuildTasks/1.0.0/" SkipUnchangedFiles="True" />
+		<!-- Newtonsoft.Json is needed for enabling mods in tModLoader.BuildTasks -->
+		<Copy SourceFiles="$(TargetDir)Libraries/Newtonsoft.Json/12.0.0.0/Newtonsoft.Json.dll" DestinationFolder="$(TargetDir)Libraries/tModLoader.BuildTasks/1.0.0/" SkipUnchangedFiles="True" />
+		<Copy SourceFiles="$(BuildTasksAssemblyFile)" DestinationFolder="$(TargetDir)Libraries/tModLoader.BuildTasks/1.0.0/" SkipUnchangedFiles="true" />
+	</Target>
 
 	<!-- Installs the build's output into the relevant game folder. -->
 	<Target Name="CopyToActualOutputDirectory" AfterTargets="Build">
 		<PropertyGroup>
-			<_ActualOutputDirectory>$(TerrariaSteamPath)</_ActualOutputDirectory>
+			<_ActualOutputDirectory>$(tModLoaderSteamPath)</_ActualOutputDirectory>
 		</PropertyGroup>
 
+		<!-- Exclude tModPorter's metadata. -->
+		<Delete Files="$(TargetDir)\tModPorter.runtimeconfig.json" />
+		<Delete Files="$(TargetDir)\tModPorter.deps.json" />
+		
 		<!-- Copy files systematically to output folder -->
 		<ItemGroup>
 			<BinFiles Include="$(TargetDir)**" />
@@ -114,6 +_,7 @@
 
 		<Message Text="Copying $(AssemblyName) to '$(_ActualOutputDirectory)'..." Importance="high" />
 		<Copy SourceFiles="@(BinFiles)" DestinationFolder="$(_ActualOutputDirectory)/%(RecursiveDir)" SkipUnchangedFiles="True" />
+		<RemoveDir Directories="$(_ActualOutputDirectory)\Content" Condition="!Exists('$(TargetDir)\Content')" />
 
 		<!-- Copy the Libraries folder, purging excessive files -->
 		<SynchronizeDirectories Source="$(TargetDir)Libraries" Destination="$(_ActualOutputDirectory)/Libraries" />
