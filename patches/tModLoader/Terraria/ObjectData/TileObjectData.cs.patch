--- src/TerrariaNetCore/Terraria/ObjectData/TileObjectData.cs
+++ src/tModLoader/Terraria/ObjectData/TileObjectData.cs
@@ -4,13 +_,14 @@
 using Terraria.Enums;
 using Terraria.GameContent.Tile_Entities;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.Modules;
 
 namespace Terraria.ObjectData;
 
-public class TileObjectData
+public partial class TileObjectData
 {
-	private TileObjectData _parent;
+	internal TileObjectData _parent;
 	private bool _linkedAlternates;
 	private bool _usesCustomCanPlace;
 	private TileObjectAlternatesModule _alternates;
@@ -35,34 +_,36 @@
 	private bool _hasOwnTileObjectDraw;
 	private bool _hasOwnTileObjectStyle;
 	private bool _hasOwnTileObjectCoords;
-	private static List<TileObjectData> _data;
+	internal static List<TileObjectData> _data;
 	private static TileObjectData _baseObject;
 	private static bool readOnlyData;
+
+	//TML: Everything made public.
-	private static TileObjectData newTile;
+	public static TileObjectData newTile;
-	private static TileObjectData newSubTile;
+	public static TileObjectData newSubTile;
-	private static TileObjectData newAlternate;
+	public static TileObjectData newAlternate;
-	private static TileObjectData StyleSwitch;
+	public static TileObjectData StyleSwitch;
-	private static TileObjectData StyleTorch;
+	public static TileObjectData StyleTorch;
-	private static TileObjectData Style4x2;
+	public static TileObjectData Style4x2;
-	private static TileObjectData Style2x2;
+	public static TileObjectData Style2x2;
-	private static TileObjectData Style1x2;
+	public static TileObjectData Style1x2;
-	private static TileObjectData Style1x1;
+	public static TileObjectData Style1x1;
-	private static TileObjectData StyleAlch;
+	public static TileObjectData StyleAlch;
-	private static TileObjectData StyleDye;
+	public static TileObjectData StyleDye;
-	private static TileObjectData Style2x1;
+	public static TileObjectData Style2x1;
-	private static TileObjectData Style6x3;
+	public static TileObjectData Style6x3;
-	private static TileObjectData StyleSmallCage;
+	public static TileObjectData StyleSmallCage;
-	private static TileObjectData StyleOnTable1x1;
+	public static TileObjectData StyleOnTable1x1;
-	private static TileObjectData Style1x2Top;
+	public static TileObjectData Style1x2Top;
-	private static TileObjectData Style1xX;
+	public static TileObjectData Style1xX;
-	private static TileObjectData Style2xX;
+	public static TileObjectData Style2xX;
-	private static TileObjectData Style3x2;
+	public static TileObjectData Style3x2;
-	private static TileObjectData Style3x3;
+	public static TileObjectData Style3x3;
-	private static TileObjectData Style3x4;
+	public static TileObjectData Style3x4;
-	private static TileObjectData Style5x4;
+	public static TileObjectData Style5x4;
-	private static TileObjectData Style3x3Wall;
+	public static TileObjectData Style3x3Wall;
 
-	private bool LinkedAlternates {
+	public bool LinkedAlternates {
 		get {
 			return _linkedAlternates;
 		}
@@ -87,7 +_,7 @@
 		}
 	}
 
-	private List<TileObjectData> Alternates {
+	internal List<TileObjectData> Alternates {
 		get {
 			if (_alternates == null)
 				return _baseObject.Alternates;
@@ -531,7 +_,7 @@
 		}
 	}
 
-	private List<TileObjectData> SubTiles {
+	internal List<TileObjectData> SubTiles {
 		get {
 			if (_subTiles == null)
 				return _baseObject.SubTiles;
@@ -1372,6 +_,19 @@
 			if (_liquidDeath.water)
 				WaterPlacement = LiquidPlacement.NotAllowed;
 		}
+
+		// Detect modder mistake: IndexOutOfRangeException
+		if (Height != _tileObjectCoords.heights.Length) {
+			// Legacy compatibility, mismatch isn't a problem here
+			if (Height < _tileObjectCoords.heights.Length)
+				return;
+
+			FixNewTile();
+
+			throw new Exception($"TileObjectData Height and CoordinateHeights are incorrect. Height must equal the number of values in CoordinateHeights: [{string.Join(", ", _tileObjectCoords.heights)}] is not {Height} elements long.") {
+				HelpLink = "https://github.com/tModLoader/tModLoader/wiki/Basic-Tile"
+			};
+		}
 	}
 
 	private void WriteCheck()
@@ -1385,7 +_,8 @@
 		readOnlyData = true;
 	}
 
-	public bool LiquidPlace(Tile checkTile)
+	//TML: Added 'checkStay' parameter.
+	public bool LiquidPlace(Tile checkTile, bool checkStay = false)
 	{
 		if (checkTile == null)
 			return false;
@@ -1393,6 +_,9 @@
 		if (checkTile.liquid > 0) {
 			switch (checkTile.liquidType()) {
 				case 1:
+					if (checkStay && !LavaDeath)
+						break;
+
 					if (LavaPlacement == LiquidPlacement.NotAllowed)
 						return false;
 					if (LavaPlacement == LiquidPlacement.OnlyInFullLiquid && checkTile.liquid != byte.MaxValue)
@@ -1401,6 +_,9 @@
 				case 0:
 				case 2:
 				case 3:
+					if (checkStay && !WaterDeath)
+						break;
+
 					if (WaterPlacement == LiquidPlacement.NotAllowed)
 						return false;
 					if (WaterPlacement == LiquidPlacement.OnlyInFullLiquid && checkTile.liquid != byte.MaxValue)
@@ -1510,14 +_,14 @@
 		newTile = new TileObjectData(_baseObject);
 	}
 
-	private static void addTile(int tileType)
+	public static void addTile(int tileType)
 	{
 		newTile.Calculate();
 		_data[tileType] = newTile;
 		newTile = new TileObjectData(_baseObject);
 	}
 
-	private static void addSubTile(params int[] styles)
+	public static void addSubTile(params int[] styles)
 	{
 		newSubTile.Calculate();
 		foreach (int num in styles) {
@@ -1566,7 +_,7 @@
 		newSubTile = new TileObjectData(_baseObject);
 	}
 
-	private static void addAlternate(int baseStyle)
+	public static void addAlternate(int baseStyle)
 	{
 		newAlternate.Calculate();
 		if (!newTile._hasOwnAlternates)
@@ -2830,6 +_,11 @@
 		addTile(486);
 		newTile.CopyFrom(Style3x2);
 		newTile.LavaDeath = false;
+		// TML: Added to allow modders to spawn Fallen Log in custom biomes.
+		newTile.AnchorBottom = new AnchorData(AnchorType.SolidTile | AnchorType.SolidWithTop | AnchorType.SolidSide, newTile.Width, 0);
+		newTile.AnchorValidTiles = new int[4] {
+			TileID.Grass, TileID.GolfGrass, TileID.HallowedGrass, TileID.GolfGrassHallowed
+		};
 		addTile(488);
 		newTile.CopyFrom(Style3x2);
 		newTile.DrawYOffset = 2;
@@ -4579,7 +_,10 @@
 		newTile.StyleMultiplier = 3;
 		newTile.StyleHorizontal = true;
 		addTile(615);
+
+		/*
 		readOnlyData = true;
+		*/
 	}
 
 	public static bool CustomPlace(int type, int style)
