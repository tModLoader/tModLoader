--- src/TerrariaNetCore/Terraria/DataStructures/TileEntity.cs
+++ src/tModLoader/Terraria/DataStructures/TileEntity.cs
@@ -4,10 +_,11 @@
 using Microsoft.Xna.Framework.Graphics;
 using Terraria.Audio;
 using Terraria.GameInput;
+using Terraria.ModLoader;
 
 namespace Terraria.DataStructures;
 
-public abstract class TileEntity
+public abstract partial class TileEntity
 {
 	public static TileEntitiesManager manager;
 	public const int MaxEntitiesPerChunk = 1000;
@@ -22,6 +_,9 @@
 	public static event Action _UpdateStart;
 	public static event Action _UpdateEnd;
 
+	// Force modders to use ModTileEntity, to prevent them from messing with vanilla saving/loading.
+	internal TileEntity() { }
+
 	public static int AssignNewID() => TileEntitiesNextID++;
 
 	public static void Clear()
@@ -47,6 +_,8 @@
 	{
 		manager = new TileEntitiesManager();
 		manager.RegisterAll();
+
+		ModTileEntity.Initialize();
 	}
 
 	public static void PlaceEntityNet(int x, int y, int type)
@@ -59,38 +_,62 @@
 	{
 	}
 
-	public static void Write(BinaryWriter writer, TileEntity ent, bool networkSend = false)
+	// Vanilla's 'networkSend' actually meant that this isn't the TE's first synchronization.
+	// So I added lightSend parameters to have 'networkSend' in this method be true on initial syncs.
+	// - Mirsario
+
+	public static void Write(BinaryWriter writer, TileEntity ent, bool networkSend = false, bool lightSend = false)
 	{
+		lightSend &= networkSend;
+
 		writer.Write(ent.type);
-		ent.WriteInner(writer, networkSend);
+		ent.WriteInner(writer, networkSend, lightSend);
 	}
 
-	public static TileEntity Read(BinaryReader reader, bool networkSend = false)
+	public static TileEntity Read(BinaryReader reader, bool networkSend = false, bool lightSend = false)
 	{
+		lightSend &= networkSend;
+
 		byte id = reader.ReadByte();
 		TileEntity tileEntity = manager.GenerateInstance(id);
 		tileEntity.type = id;
-		tileEntity.ReadInner(reader, networkSend);
+		tileEntity.ReadInner(reader, networkSend, lightSend);
 		return tileEntity;
 	}
 
-	private void WriteInner(BinaryWriter writer, bool networkSend)
+	private void WriteInner(BinaryWriter writer, bool networkSend, bool lightSend)
 	{
-		if (!networkSend)
+		if (!lightSend)
 			writer.Write(ID);
 
 		writer.Write(Position.X);
 		writer.Write(Position.Y);
+
+		//Call NetSend instead of the vanilla method when in modded contexts.
+		if (networkSend) {
+			NetSend(writer);
+
+			return;
+		}
+
-		WriteExtraData(writer, networkSend);
+		WriteExtraData(writer, lightSend);
 	}
 
-	private void ReadInner(BinaryReader reader, bool networkSend)
+	private void ReadInner(BinaryReader reader, bool networkSend, bool lightSend)
 	{
-		if (!networkSend)
+		if (!lightSend)
 			ID = reader.ReadInt32();
 
 		Position = new Point16(reader.ReadInt16(), reader.ReadInt16());
+
+		//Call NetReceive instead of the vanilla method when in modded contexts.
+		if (networkSend) {
+			NetReceive(reader);
+
+			return;
+		}
+
-		ReadExtraData(reader, networkSend);
+		ReadExtraData(reader, lightSend);
 	}
 
 	public virtual void WriteExtraData(BinaryWriter writer, bool networkSend)
