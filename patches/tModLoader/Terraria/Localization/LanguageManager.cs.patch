--- src/TerrariaNetCore/Terraria/Localization/LanguageManager.cs
+++ src/tModLoader/Terraria/Localization/LanguageManager.cs
@@ -12,14 +_,15 @@
 using ReLogic.Graphics;
 using Terraria.GameContent;
 using Terraria.Initializers;
+using Terraria.ModLoader;
 using Terraria.Utilities;
 
 namespace Terraria.Localization;
 
-public class LanguageManager
+public partial class LanguageManager
 {
 	public static LanguageManager Instance = new LanguageManager();
-	private readonly Dictionary<string, LocalizedText> _localizedTexts = new Dictionary<string, LocalizedText>();
+	internal readonly Dictionary<string, LocalizedText> _localizedTexts = new Dictionary<string, LocalizedText>();
 	private readonly Dictionary<string, List<string>> _categoryGroupedKeys = new Dictionary<string, List<string>>();
 	private GameCulture _fallbackCulture = GameCulture.DefaultCulture;
 
@@ -95,13 +_,17 @@
 	public void SetLanguage(GameCulture culture)
 	{
 		if (ActiveCulture != culture) {
+			/*
 			if (culture != _fallbackCulture && ActiveCulture != _fallbackCulture) {
 				SetAllTextValuesToKeys();
 				LoadLanguage(_fallbackCulture);
 			}
 
 			LoadLanguage(culture);
+			*/
+
 			ActiveCulture = culture;
+			ReloadLanguage();
 			Thread.CurrentThread.CurrentCulture = culture.CultureInfo;
 			Thread.CurrentThread.CurrentUICulture = culture.CultureInfo;
 			if (this.OnLanguageChanged != null)
@@ -111,6 +_,7 @@
 		}
 	}
 
+	/*
 	private void LoadLanguage(GameCulture culture, bool processCopyCommands = true)
 	{
 		LoadFilesForCulture(culture);
@@ -122,6 +_,26 @@
 
 		ChatInitializer.PrepareAliases();
 	}
+	*/
+
+	// Added by tML, replacement for commented code above
+	internal void ReloadLanguage(bool resetValuesToKeysFirst = true)
+	{
+		if (resetValuesToKeysFirst)
+			SetAllTextValuesToKeys();
+
+		LoadFilesForCulture(_fallbackCulture);
+		if (ActiveCulture != _fallbackCulture)
+			LoadFilesForCulture(ActiveCulture);
+
+		LoadActiveCultureTranslationsFromSources();
+
+		ProcessCopyCommandsInTexts();
+		RecalculateBoundTextValues();
+		ChatInitializer.PrepareAliases();
+
+		SystemLoader.OnLocalizationsLoaded();
+	}
 
 	private void LoadFilesForCulture(GameCulture culture)
 	{
@@ -142,8 +_,12 @@
 				break;
 			}
 		}
+
+		LocalizationLoader.LoadModTranslations(culture);
 	}
 
+	// Replaced by ProcessCopyCommandsInTexts implementation in LanguageManager.tML.cs
+	/*
 	private void ProcessCopyCommandsInTexts()
 	{
 		Regex regex = new Regex("{\\$(\\w+\\.\\w+)}", RegexOptions.Compiled);
@@ -155,18 +_,33 @@
 					break;
 
 				value.SetValue(text);
+				// patch context
 			}
 		}
 	}
+	*/
 
 	public void UseSources(List<IContentSource> sourcesFromLowestToHighest)
 	{
+		if (Enumerable.SequenceEqual(_contentSources, sourcesFromLowestToHighest))
+			return;
+
+		_contentSources = sourcesFromLowestToHighest.ToArray();
+		ReloadLanguage();
+	}
+
+	// Method split from UseSources above
+	private void LoadActiveCultureTranslationsFromSources() {
+		var sourcesFromLowestToHighest = _contentSources;
+
 		string name = ActiveCulture.Name;
 		string assetNameStart = ("Localization" + Path.DirectorySeparatorChar + name).ToLower();
+		/*
 		LoadLanguage(ActiveCulture, processCopyCommands: false);
+		*/
 		foreach (IContentSource item in sourcesFromLowestToHighest) {
-			foreach (string item2 in item.GetAllAssetsStartingWith(assetNameStart)) {
-				string extension = item.GetExtension(item2);
+			foreach (string item2 in item.GetAllAssetsStartingWith(assetNameStart, ignoreCase: true)) {
+				string extension = item.GetExtension(item2) ?? "";
 				if (!(extension == ".json") && !(extension == ".csv"))
 					continue;
 
@@ -181,8 +_,10 @@
 			}
 		}
 
+		/*
 		ProcessCopyCommandsInTexts();
 		ChatInitializer.PrepareAliases();
+		*/
 	}
 
 	public void LoadLanguageFromFileTextCsv(string fileText)
@@ -310,7 +_,9 @@
 		if (!_categoryGroupedKeys.ContainsKey(categoryName))
 			return new LocalizedText(categoryName + ".RANDOM", categoryName + ".RANDOM");
 
-		List<string> list = _categoryGroupedKeys[categoryName];
+		//TML: Changed to a GetKeysInCategory call instead of direct dictionary access.
+		var list = GetKeysInCategory(categoryName);
+
 		return GetText(categoryName + "." + list[(random ?? Main.rand).Next(list.Count)]);
 	}
 
@@ -319,7 +_,9 @@
 		if (!_categoryGroupedKeys.ContainsKey(categoryName))
 			return new LocalizedText(categoryName + ".INDEXED", categoryName + ".INDEXED");
 
-		List<string> list = _categoryGroupedKeys[categoryName];
+		//TML: Changed to a GetKeysInCategory call instead of direct dictionary access.
+		var list = GetKeysInCategory(categoryName);
+
 		int index2 = index % list.Count;
 		return GetText(categoryName + "." + list[index2]);
 	}
@@ -328,10 +_,17 @@
 
 	public LocalizedText GetText(string key)
 	{
-		if (!_localizedTexts.ContainsKey(key))
-			return new LocalizedText(key, key);
-
-		return _localizedTexts[key];
+		return _localizedTexts.TryGetValue(key, out var text) ? text : new LocalizedText(key, key);
+	}
+
+	public LocalizedText GetOrRegister(string key, Func<string> makeDefaultValue = null)
+	{
+		if (!_localizedTexts.TryGetValue(key, out var text)) {
+			_moddedKeys.Add(key);
+			_localizedTexts[key] = text = new LocalizedText(key, makeDefaultValue?.Invoke() ?? key);
+		}
+
+		return text;
 	}
 
 	public string GetTextValue(string key)
