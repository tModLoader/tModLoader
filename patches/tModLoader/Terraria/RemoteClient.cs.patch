--- src/TerrariaNetCore/Terraria/RemoteClient.cs
+++ src/tModLoader/Terraria/RemoteClient.cs
@@ -2,6 +_,7 @@
 using System;
 using System.Collections.Generic;
 using Terraria.Localization;
+using Terraria.ModLoader;
 using Terraria.Net.Sockets;
 
 namespace Terraria
@@ -12,7 +_,7 @@
 		public int Id;
 		public string Name = "Anonymous";
 		public bool IsActive;
-		public bool PendingTermination;
+		public bool PendingTermination { get; private set; }
 		public bool PendingTerminationApproved;
 		public bool IsAnnouncementCompleted;
 		public int State;
@@ -34,6 +_,12 @@
 		private volatile bool _isReading;
 		private static List<Point> _pendingSectionFraming = new List<Point>();
 
+		// log a reason for terminating clients
+		internal void SetPendingTermination(string reason) {
+			PendingTermination = true;
+			ModNet.Log(Id, "Terminating: " + reason);
+		}
+
 		public bool IsConnected() {
 			if (Socket != null)
 				return Socket.IsConnected();
@@ -199,14 +_,14 @@
 				}
 			}
 			catch {
-				PendingTermination = true;
+				SetPendingTermination("Exception in RemoteClient.TryRead");
 			}
 		}
 
 		private void ServerReadCallBack(object state, int length) {
 			if (!Netplay.Disconnect) {
 				if (length == 0) {
-					PendingTermination = true;
+					SetPendingTermination("ServerReadCallBack returned no data");
 				}
 				else {
 					try {
@@ -248,7 +_,7 @@
 					StatusText = Language.GetTextValue("Net.ClientPlaying", Socket.GetRemoteAddress(), Name);
 				}
 				catch (Exception) {
-					PendingTermination = true;
+					SetPendingTermination("Exception in Socket.GetRemoteAddress while updating StatusText (State == 10)");
 				}
 			}
 		}
