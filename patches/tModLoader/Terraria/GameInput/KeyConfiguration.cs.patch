--- src/Terraria/Terraria/GameInput/KeyConfiguration.cs
+++ src/tModLoader/Terraria/GameInput/KeyConfiguration.cs
@@ -1,11 +_,14 @@
 using System.Collections.Generic;
 using System.Linq;
+using Terraria.ModLoader;
 
 namespace Terraria.GameInput
 {
 	public class KeyConfiguration
 	{
+		// Make readonly so dicts aren't set to null or whatever, .Clear() is allowed
-		public Dictionary<string, List<string>> KeyStatus = new Dictionary<string, List<string>>();
+		public readonly Dictionary<string, List<string>> KeyStatus = new Dictionary<string, List<string>>();
+		public readonly Dictionary<string, List<string>> UnloadedModKeyStatus = new Dictionary<string, List<string>>();
 
 		public bool DoGrappleAndInteractShareTheSameKey {
 			get {
@@ -21,6 +_,10 @@
 			foreach (string knownTrigger in PlayerInput.KnownTriggers) {
 				KeyStatus.Add(knownTrigger, new List<string>());
 			}
+
+			foreach (var current in KeybindLoader.Keybinds) {
+				KeyStatus.Add(current.uniqueName, new List<string>());
+			}
 		}
 
 		public void Processkey(TriggersSet set, string newKey) {
@@ -41,22 +_,24 @@
 		}
 
 		public void ReadPreferences(Dictionary<string, List<string>> dict) {
+			UnloadedModKeyStatus.Clear();
 			foreach (KeyValuePair<string, List<string>> item in dict) {
-				if (!KeyStatus.ContainsKey(item.Key))
-					continue;
-
-				KeyStatus[item.Key].Clear();
-				foreach (string item2 in item.Value) {
-					KeyStatus[item.Key].Add(item2);
-				}
+				if (KeyStatus.ContainsKey(item.Key))
+					KeyStatus[item.Key] = new List<string>(item.Value);
+				else if (item.Key.Contains(":")) // This preserves unloaded mod keybind values
+					UnloadedModKeyStatus[item.Key] = new List<string>(item.Value);
 			}
 		}
 
 		public Dictionary<string, List<string>> WritePreferences() {
 			Dictionary<string, List<string>> dictionary = new Dictionary<string, List<string>>();
-			foreach (KeyValuePair<string, List<string>> item in KeyStatus) {
-				if (item.Value.Count > 0)
-					dictionary.Add(item.Key, item.Value.ToList());
+			// Make sure to use indexer and not dict.Add, as some keys are sometimes already added (Vanilla bug, problem for modded)
+			foreach (KeyValuePair<string, List<string>> item in KeyStatus.Where(x => x.Value.Count > 0)) {
+				dictionary[item.Key] = item.Value.ToList();
+			}
+
+			foreach (KeyValuePair<string, List<string>> item in UnloadedModKeyStatus.Where(x => x.Value.Count > 0)) {
+				dictionary[item.Key] = item.Value.ToList();
 			}
 
 			if (!dictionary.ContainsKey("MouseLeft") || dictionary["MouseLeft"].Count == 0) {
