--- src/TerrariaNetCore/Terraria/GameInput/PlayerInput.cs
+++ src/tModLoader/Terraria/GameInput/PlayerInput.cs
@@ -8,13 +_,14 @@
 using Terraria.GameContent.UI.Chat;
 using Terraria.GameContent.UI.States;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.Social;
 using Terraria.UI;
 using Terraria.UI.Gamepad;
 
 namespace Terraria.GameInput;
 
-public class PlayerInput
+public partial class PlayerInput
 {
 	public class MiscSettingsTEMP
 	{
@@ -464,10 +_,31 @@
 		}
 	}
 
+	// To allow mod keybinds to load, we need to reinitialize after mod load.
+	internal static bool reinitialize;
+
+	private static void ReInitialize()
+	{
+		Profiles.Clear();
+		OriginalProfiles.Clear();
+
+		Initialize_Inner(); // To not repeat code in patches, reuse what was previously in Initialize().
+		Load(); // Loads the JSON into the Profiles above
+
+		reinitialize = false;
+	}
+
 	public static void Initialize()
 	{
 		Main.InputProfiles.OnProcessText += PrettyPrintProfiles;
 		Player.Hooks.OnEnterWorld += Hook_OnEnterWorld;
+
+		Initialize_Inner();
+	}
+
+	// Split from the above method.
+	private static void Initialize_Inner()
+	{
 		PlayerInputProfile playerInputProfile = new PlayerInputProfile("Redigit's Pick");
 		playerInputProfile.Initialize(PresetProfiles.Redigit);
 		Profiles.Add(playerInputProfile.Name, playerInputProfile);
@@ -518,7 +_,9 @@
 
 	public static void Load()
 	{
-		Main.InputProfiles.Load();
+		if (!Main.InputProfiles.Load())
+			return; // fixes strange bug caused by deleting input profiles.json in game and reloading mods.
+
 		Dictionary<string, PlayerInputProfile> dictionary = new Dictionary<string, PlayerInputProfile>();
 		string currentValue = null;
 		Main.InputProfiles.Get("Selected Profile", ref currentValue);
@@ -660,6 +_,10 @@
 
 	public static void UpdateInput()
 	{
+		// Added by TML.
+		if (reinitialize)
+			ReInitialize();
+			
 		SettingsForUI.UpdateCounters();
 		Triggers.Reset();
 		ScrollWheelValueOld = ScrollWheelValue;
@@ -691,6 +_,12 @@
 		UpdateMainMouse();
 		Main.mouseLeft = Triggers.Current.MouseLeft;
 		Main.mouseRight = Triggers.Current.MouseRight;
+
+		// Extra mouse buttons, added by TML.
+		Main.mouseMiddle = Triggers.Current.MouseMiddle;
+		Main.mouseXButton1 = Triggers.Current.MouseXButton1;
+		Main.mouseXButton2 = Triggers.Current.MouseXButton2;
+
 		CacheZoomableValues();
 		if (num != 0 && PlayerInput.OnActionableInput != null)
 			PlayerInput.OnActionableInput();
@@ -903,6 +_,10 @@
 			}
 		}
 
+		// TODO: We might just need a bool for while reloading.
+		if (player.HeldItem.type >= ItemID.Sets.GamepadWholeScreenUseRange.Length)
+			return false;
+
 		bool flag5 = ItemID.Sets.GamepadWholeScreenUseRange[player.inventory[player.selectedItem].type] || player.scope;
 		int num3 = player.inventory[player.selectedItem].tileBoost + ItemID.Sets.GamepadExtraRange[player.inventory[player.selectedItem].type];
 		if (player.yoyoString && ItemID.Sets.Yoyo[player.inventory[player.selectedItem].type])
@@ -1202,6 +_,10 @@
 
 	private static void FixDerpedRebinds()
 	{
+		// TML:
+		// These keys are specially setup to avoid creating a situation where the game might soft-lock due to binding issues. (IE stuck on a menu)
+		// This method has a side-effect that it also prevents binding multiple hotkeys to one virtual key if those keys are already bound to any of following.
+
 		List<string> list = new List<string> {
 			"MouseLeft",
 			"MouseRight",
@@ -1392,7 +_,10 @@
 				if (DpadSnapCooldown[i] == 0) {
 					int num = 6;
 					if (ItemSlot.IsABuildingItem(player.inventory[player.selectedItem]))
+						/*
 						num = player.inventory[player.selectedItem].useTime;
+						*/
+						num = CombinedHooks.TotalUseTime(player.inventory[player.selectedItem].useTime, player, player.inventory[player.selectedItem]);
 
 					DpadSnapCooldown[i] = num;
 					zero += vector;
@@ -1645,6 +_,8 @@
 
 	public static void Reset(KeyConfiguration c, PresetProfiles style, InputMode mode)
 	{
+		OnReset(c, mode);
+
 		switch (style) {
 			case PresetProfiles.Redigit:
 				switch (mode) {
