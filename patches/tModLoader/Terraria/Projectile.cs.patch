--- src/Terraria/Terraria/Projectile.cs
+++ src/tModLoader/Terraria/Projectile.cs
@@ -20,12 +_,13 @@
 using Terraria.ID;
 using Terraria.Localization;
 using Terraria.Physics;
+using Terraria.ModLoader;
 using Terraria.Utilities;
 using Terraria.WorldBuilding;
 
 namespace Terraria
 {
-	public class Projectile : Entity
+	public partial class Projectile : Entity
 	{
 		private class NPCDistanceByIndexComparator : IComparer<Tuple<int, float>>
 		{
@@ -88,7 +_,7 @@
 		public float knockBack;
 		public bool friendly;
 		public int penetrate = 1;
-		private int[] localNPCImmunity = new int[200];
+		public int[] localNPCImmunity = new int[200];
 		public bool usesLocalNPCImmunity;
 		public bool usesIDStaticNPCImmunity;
 		public int maxPenetrate = 1;
@@ -100,7 +_,6 @@
 		public Vector2[] oldPos = new Vector2[10];
 		public float[] oldRot = new float[10];
 		public int[] oldSpriteDirection = new int[10];
-		public bool minion;
 		public float minionSlots;
 		public int minionPos;
 		public int restrikeDelay;
@@ -112,9 +_,34 @@
 		public bool ownerHitCheck;
 		public int[] playerImmune = new int[255];
 		public string miscText = "";
-		public bool melee;
-		public bool ranged;
-		public bool magic;
+		internal bool melee {
+			get => CountsAsClass(DamageClass.Melee);
+			set {
+				if (value)
+					DamageType = DamageClass.Melee;
+				else if (DamageType == DamageClass.Melee)
+					DamageType = DamageClass.Generic;
+			}
+		}
+		internal bool magic {
+			get => CountsAsClass(DamageClass.Magic);
+			set {
+				if (value)
+					DamageType = DamageClass.Magic;
+				else if (DamageType == DamageClass.Magic)
+					DamageType = DamageClass.Generic;
+			}
+		}
+		internal bool ranged {
+			get => CountsAsClass(DamageClass.Ranged);
+			set {
+				if (value)
+					DamageType = DamageClass.Ranged;
+				else if (DamageType == DamageClass.Ranged)
+					DamageType = DamageClass.Generic;
+			}
+		}
+		public bool minion;
 		public bool coldDamage;
 		public bool noEnchantments;
 		public bool noEnchantmentVisuals;
@@ -144,7 +_,12 @@
 		private static List<int> _ai156_blacklistedTargets = new List<int>();
 		private static float[] _CompanionCubeScreamCooldown = new float[255];
 
-		public string Name => Lang.GetProjectileName(type).Value;
+		private string nameOverride = null;
+		public string Name
+		{
+			get => nameOverride ?? Lang.GetProjectileName(type).Value;
+			set => nameOverride = value;
+		}
 
 		public bool WipableTurret {
 			get {
@@ -192,7 +_,7 @@
 		}
 
 		public static void ResetImmunity() {
-			for (int i = 0; i < 972; i++) {
+			for (int i = 0; i < perIDStaticNPCImmunity.Length; i++) {
 				for (int j = 0; j < 200; j++) {
 					perIDStaticNPCImmunity[i][j] = 0u;
 				}
@@ -221,7 +_,32 @@
 			}
 		}
 
+		public void CloneDefaults(int TypeToClone) {
+			int originalType = type;
+			ModProjectile originalModProjectile = ModProjectile;
+			SetDefaults(TypeToClone);
+			type = originalType;
+			ModProjectile = originalModProjectile;
+			int num = ProjectileID.Sets.TrailCacheLength[type];
+			if (num != oldPos.Length) {
+				Array.Resize(ref oldPos, num);
+				Array.Resize(ref oldRot, num);
+				Array.Resize(ref oldSpriteDirection, num);
+			}
+
+			for (int i = 0; i < oldPos.Length; i++) {
+				oldPos[i].X = 0f;
+				oldPos[i].Y = 0f;
+				oldRot[i] = 0f;
+				oldSpriteDirection[i] = 0;
+			}
+		}
+
 		public void SetDefaults(int Type) {
+			ModProjectile = null;
+			globalProjectiles = new Instanced<GlobalProjectile>[0];
+			DamageType = DamageClass.Generic;
+			nameOverride = null;
 			ownerHitCheckDistance = 1000f;
 			counterweight = false;
 			sentry = false;
@@ -8088,9 +_,13 @@
 				alpha = 255;
 				hide = true;
 			}
+			/*
 			else {
 				active = false;
 			}
+			*/
+
+			ProjectileLoader.SetDefaults(this);
 
 			width = (int)((float)width * scale);
 			height = (int)((float)height * scale);
@@ -8203,7 +_,7 @@
 				projectile.ai[1] = projectile.position.Y;
 			}
 
-			if (Type > 0 && Type < 972) {
+			if (Type > 0) {
 				if (ProjectileID.Sets.NeedsUUID[Type])
 					projectile.projUUID = projectile.identity;
 
@@ -9050,9 +_,18 @@
 		}
 
 		public void Damage() {
+			bool? shouldHitAnything = ProjectileLoader.CanDamage(this);
+			if (shouldHitAnything.HasValue) {
+				if (shouldHitAnything.Value)
+					goto SkipVanillaLogic;
+				else
+					return;
+			}
+
-			if (type == 18 || type == 72 || type == 86 || type == 87 || aiStyle == 31 || aiStyle == 32 || type == 226 || type == 378 || type == 613 || type == 650 || type == 882 || type == 888 || type == 895 || type == 896 || (type == 434 && localAI[0] != 0f) || type == 439 || type == 444 || (type == 451 && ((int)(ai[0] - 1f) / penetrate == 0 || ai[1] < 5f) && ai[0] != 0f) || type == 500 || type == 653 || type == 460 || type == 633 || type == 600 || type == 601 || type == 602 || type == 535 || (type == 631 && localAI[1] == 0f) || type == 651 || (type == 188 && localAI[0] < 5f) || (aiStyle == 137 && ai[0] != 0f) || aiStyle == 138 || (type == 261 && velocity.Length() < 1.5f) || (type == 818 && ai[0] < 1f) || type == 831 || type == 970 || (type == 833 && ai[0] == 4f) || (type == 834 && ai[0] == 4f) || (type == 835 && ai[0] == 4f) || (type == 281 && ai[0] == -3f) || ((type == 598 || type == 636 || type == 614 || type == 971) && ai[0] == 1f) || (type == 923 && localAI[0] <= 60f) || (type == 919 && localAI[0] <= 60f) || (aiStyle == 15 && ai[0] == 0f && localAI[1] <= 12f) || type == 861 || (aiStyle == 93 && ai[0] != 0f && ai[0] != 2f) || (aiStyle == 10 && localAI[1] == -1f) || (Main.projPet[type] && type != 266 && type != 407 && type != 317 && (type != 388 || ai[0] != 2f) && (type < 390 || type > 392) && (type < 393 || type > 395) && (type != 533 || !(ai[0] >= 6f) || !(ai[0] <= 8f)) && (type < 625 || type > 628) && (type != 755 || ai[0] == 0f) && (type != 946 || ai[0] == 0f) && type != 758 && type != 951 && type != 963 && (type != 759 || frame == Main.projFrames[type] - 1) && type != 833 && type != 834 && type != 835 && type != 864 && (type != 623 || ai[0] != 2f)))
+			if (type == 18 || type == 72 || type == 86 || type == 87 || aiStyle == 31 || aiStyle == 32 || type == 226 || type == 378 || type == 613 || type == 650 || type == 882 || type == 888 || type == 895 || type == 896 || (type == 434 && localAI[0] != 0f) || type == 439 || type == 444 || (type == 451 && ((int)(ai[0] - 1f) / penetrate == 0 || ai[1] < 5f) && ai[0] != 0f) || type == 500 || type == 653 || type == 460 || type == 633 || type == 600 || type == 601 || type == 602 || type == 535 || (type == 631 && localAI[1] == 0f) || type == 651 || (type == 188 && localAI[0] < 5f) || (aiStyle == 137 && ai[0] != 0f) || aiStyle == 138 || (type == 261 && velocity.Length() < 1.5f) || (type == 818 && ai[0] < 1f) || type == 831 || type == 970 || (type == 833 && ai[0] == 4f) || (type == 834 && ai[0] == 4f) || (type == 835 && ai[0] == 4f) || (type == 281 && ai[0] == -3f) || ((type == 598 || type == 636 || type == 614 || type == 971) && ai[0] == 1f) || (type == 923 && localAI[0] <= 60f) || (type == 919 && localAI[0] <= 60f) || (aiStyle == 15 && ai[0] == 0f && localAI[1] <= 12f) || type == 861 || (aiStyle == 93 && ai[0] != 0f && ai[0] != 2f) || (aiStyle == 10 && localAI[1] == -1f) || (Main.projPet[type] && type != 266 && type != 407 && type != 317 && (type != 388 || ai[0] != 2f) && (type < 390 || type > 392) && (type < 393 || type > 395) && (type != 533 || !(ai[0] >= 6f) || !(ai[0] <= 8f)) && (type < 625 || type > 628) && (type != 755 || ai[0] == 0f) && (type != 946 || ai[0] == 0f) && type != 758 && type != 951 && type != 963 && (type != 759 || frame == Main.projFrames[type] - 1) && type != 833 && type != 834 && type != 835 && type != 864 && (type != 623 || ai[0] != 2f) && !ProjectileLoader.MinionContactDamage(this)))
 				return;
 
+			SkipVanillaLogic:
 			Rectangle myRect = new Rectangle((int)base.position.X, (int)base.position.Y, width, height);
 			if (type == 85 || type == 101) {
 				int num = 30;
@@ -9078,6 +_,7 @@
 				myRect.Height += num3 * 2;
 			}
 
+			ProjectileLoader.ModifyDamageHitbox(this, ref myRect);
 			if (friendly && owner == Main.myPlayer && !npcProj) {
 				if ((aiStyle == 16 && !ProjectileID.Sets.RocketsSkipDamageForPlayers[type] && (timeLeft <= 1 || type == 108 || type == 164)) || (type == 286 && localAI[1] == -1f)) {
 					int myPlayer = Main.myPlayer;
@@ -9219,11 +_,26 @@
 							array = projectile.localNPCImmunity;
 					}
 
+					//Patch context
 					for (int i = 0; i < 200; i++) {
 						bool flag = (!usesLocalNPCImmunity && !usesIDStaticNPCImmunity) || (usesLocalNPCImmunity && array[i] == 0) || (usesIDStaticNPCImmunity && IsNPCIndexImmuneToProjectileType(type, i));
 						if (!(Main.npc[i].active && !Main.npc[i].dontTakeDamage && flag) || (Main.npc[i].aiStyle == 112 && Main.npc[i].ai[2] > 1f))
 							continue;
 
+						bool? modCanHit = ProjectileLoader.CanHitNPC(this, Main.npc[i]);
+						if (modCanHit == false)
+							continue;
+
+						bool? modCanBeHit = NPCLoader.CanBeHitByProjectile(Main.npc[i], this);
+						if (modCanBeHit == false)
+							continue;
+
+						bool? modCanHit2 = PlayerLoader.CanHitNPCWithProj(this, Main.npc[i]);
+						if (modCanHit2 == false)
+							continue;
+
+						bool canHitFlag = modCanBeHit == true || modCanHit == true || modCanHit2 == true; //If any hook forces damage: ignore vanilla conditions
+
 						Main.npc[i].position += Main.npc[i].netOffset;
 						bool flag2 = !Main.npc[i].friendly;
 						flag2 |= (type == 318);
@@ -9233,8 +_,12 @@
 							flag2 = false;
 
 						bool flag3 = Main.npc[i].friendly && !Main.npc[i].dontTakeDamageFromHostiles;
-						if ((friendly && flag2) || (hostile && flag3)) {
+						if (canHitFlag || (friendly && flag2) || (hostile && flag3)) {
 							bool flag4 = maxPenetrate == 1 && !usesLocalNPCImmunity && !usesIDStaticNPCImmunity;
+
+							if (canHitFlag)
+								flag4 = true;
+
 							if (owner < 0 || Main.npc[i].immune[owner] == 0 || flag4) {
 								bool flag5 = false;
 								if (type == 11 && (Main.npc[i].type == 47 || Main.npc[i].type == 57))
@@ -9246,6 +_,9 @@
 								else if (Main.npc[i].immortal && npcProj)
 									flag5 = true;
 
+								if (canHitFlag)
+									flag5 = false;
+
 								if (!flag5 && (Main.npc[i].noTileCollide || !ownerHitCheck || CanHitWithMeleeWeapon(Main.npc[i]))) {
 									bool flag6 = false;
 									if (Main.npc[i].type == 414) {
@@ -9399,7 +_,7 @@
 										}
 
 										int num9 = (int)((float)damage * num5);
-										if (type > 0 && type < 972 && ProjectileID.Sets.StardustDragon[type]) {
+										if (type > 0 && ProjectileID.Sets.StardustDragon[type]) {
 											float value2 = (scale - 1f) * 100f;
 											value2 = Utils.Clamp(value2, 0f, 50f);
 											num9 = (int)((float)num9 * (1f + value2 * 0.23f));
@@ -9429,14 +_,21 @@
 										}
 
 										if (flag8) {
+											/*
 											if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
 												flag7 = true;
 
+											// Extra patch context.
+
 											if (ranged && Main.rand.Next(1, 101) <= Main.player[owner].rangedCrit)
 												flag7 = true;
 
 											if (magic && Main.rand.Next(1, 101) <= Main.player[owner].magicCrit)
 												flag7 = true;
+											*/
+
+											if (!(minion || ProjectileID.Sets.MinionShot[type]) && Main.rand.Next(100) < Main.player[owner].GetWeaponCrit(Main.player[owner].HeldItem))
+												flag7 = true;
 
 											int num15 = type;
 											if ((uint)(num15 - 688) <= 2u) {
@@ -9746,7 +_,7 @@
 												num21 = (int)((double)num21 * 0.75);
 										}
 
-										if (Main.netMode != 2 && nPC.type == 439 && type >= 0 && type <= 972 && ProjectileID.Sets.CultistIsResistantTo[type])
+										if (Main.netMode != 2 && nPC.type == 439 && type >= 0 && ProjectileID.Sets.CultistIsResistantTo[type])
 											num21 = (int)((float)num21 * 0.75f);
 
 										if (type == 497 && penetrate != 1) {
@@ -9876,6 +_,10 @@
 											Main.player[owner].ClearBuff(198);
 										}
 
+										// Essentially, the following block is moved to execute later on.
+										goto VanillaOnHitEffectsEnd;
+
+										VanillaOnHitEffectsStart:
 										StatusNPC(i);
 										if (flag8 && nPC.life > 5)
 											TryDoingOnHitEffects(nPC);
@@ -9883,11 +_,14 @@
 										if (ProjectileID.Sets.ImmediatelyUpdatesNPCBuffFlags[type])
 											nPC.UpdateNPC_BuffSetFlags(lowerBuffTime: false);
 
+										// Extra patch context.
 										if (type == 317) {
 											ai[1] = -1f;
 											netUpdate = true;
 										}
+										goto PostModifyHit;
 
+										VanillaOnHitEffectsEnd:
 										int num34 = base.direction;
 										switch (type) {
 											case 697:
@@ -9904,14 +_,26 @@
 											if (ai[0] == 0f)
 												num7 *= 0.25f;
 
+										// Extra context
+
 											if (ai[0] == 6f)
 												num7 *= 0.5f;
 										}
 
+										ProjectileLoader.ModifyHitNPC(this, nPC, ref num21, ref num7, ref flag7, ref num34);
+										NPCLoader.ModifyHitByProjectile(nPC, this, ref num21, ref num7, ref flag7, ref num34);
+										PlayerLoader.ModifyHitNPCWithProj(this, nPC, ref num21, ref num7, ref flag7, ref num34);
+
+										goto VanillaOnHitEffectsStart;
+
+										PostModifyHit:
+
 										if (flag8 && !hostile && num8 > 0)
 											num21 += nPC.checkArmorPenetration(num8);
 
 										NPCKillAttempt attempt = new NPCKillAttempt(nPC);
+										// Extra context
+
 										int num35 = (!flag8) ? ((int)nPC.StrikeNPCNoInteraction(num21, num7, num34, flag7)) : ((int)nPC.StrikeNPC(num21, num7, num34, flag7));
 										if (flag8 && attempt.DidNPCDie())
 											Main.player[owner].OnKillNPC(ref attempt, this);
@@ -10167,9 +_,16 @@
 											}
 										}
 
+										// Extra patch context.
+
 										if (type == 710)
 											BetsySharpnel(i);
 
+										// Patching: See ModifyHitX above for locals
+										ProjectileLoader.OnHitNPC(this, Main.npc[i], num21, num7, flag7);
+										NPCLoader.OnHitByProjectile(Main.npc[i], this, num21, num7, flag7);
+										PlayerLoader.OnHitNPCWithProj(this, Main.npc[i], num21, num7, flag7);
+
 										if (penetrate > 0 && type != 317 && type != 866) {
 											if (type == 357)
 												damage = (int)((double)damage * 0.8);
@@ -10316,6 +_,9 @@
 						if (!flag17 || !Colliding(myRect, player2.getRect()))
 							continue;
 
+						if (!ProjectileLoader.CanHitPvp(this, player2) || !PlayerLoader.CanHitPvpWithProj(this, player2))
+							continue;
+
 						if (aiStyle == 3) {
 							if (ai[0] == 0f) {
 								velocity.X = 0f - velocity.X;
@@ -10349,14 +_,18 @@
 							timeLeft = 1;
 
 						bool flag18 = false;
-						if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit)
+						if (melee && Main.rand.Next(1, 101) <= Main.player[owner].meleeCrit + Main.player[owner].allCrit)
 							flag18 = true;
 
+						//Patch context: ^ flag17, to be used below multiple times.
 						int num45 = Main.DamageVar((int)((float)damage * num5), Main.player[owner].luck);
+						ProjectileLoader.ModifyHitPvp(this, player2, ref num45, ref flag18);
+						PlayerLoader.ModifyHitPvpWithProj(this, player2, ref num45, ref flag18);
 						if (!player2.immune)
 							StatusPvP(m);
 
 						TryDoingOnHitEffects(player2);
+						//Patch context: num46, to be used below.
 						int num46 = (int)player2.Hurt(playerDeathReason, num45, base.direction, pvp: true, quiet: false, flag18);
 						if (num46 > 0 && Main.player[owner].ghostHeal && friendly && !hostile)
 							ghostHeal(num46, new Vector2(player2.Center.X, player2.Center.Y));
@@ -10367,6 +_,9 @@
 						if ((melee || ProjectileID.Sets.IsAWhip[type]) && Main.player[owner].meleeEnchant == 7)
 							NewProjectile(GetProjectileSource_FromThis(), player2.Center.X, player2.Center.Y, player2.velocity.X, player2.velocity.Y, 289, 0, 0f, owner);
 
+						ProjectileLoader.OnHitPvp(this, player2, num46, flag18);
+						PlayerLoader.OnHitPvpWithProj(this, player2, num46, flag18);
+
 						if (Main.netMode != 0)
 							NetMessage.SendPlayerHurt(m, playerDeathReason, num45, base.direction, flag18, pvp: true, -1);
 
@@ -10468,10 +_,12 @@
 				case 919:
 				case 923:
 				case 924:
+					// Extra patch context.
 					num49 = 1;
 					break;
 			}
 
+			// Extra patch context.
 			int myPlayer2 = Main.myPlayer;
 			bool flag19 = Main.player[myPlayer2].active && !Main.player[myPlayer2].dead && (!Main.player[myPlayer2].immune || num49 != -1);
 			if (flag19 && type == 281)
@@ -10480,9 +_,15 @@
 			if (Main.getGoodWorld && type == 281)
 				flag19 = true;
 
+			if (ModProjectile != null)
+				num49 = ModProjectile.CooldownSlot;
+
 			if (!flag19 || !Colliding(myRect, Main.player[myPlayer2].getRect()))
 				return;
 
+			if (!ProjectileLoader.CanHitPlayer(this, Main.player[myPlayer2]) || !PlayerLoader.CanBeHitByProjectile(Main.player[myPlayer2], this))
+				return;
+
 			int direction = base.direction;
 			direction = ((!(Main.player[myPlayer2].position.X + (float)(Main.player[myPlayer2].width / 2) < base.position.X + (float)(width / 2))) ? 1 : (-1));
 			if (!Main.player[myPlayer2].CanParryAgainst(Main.player[myPlayer2].Hitbox, base.Hitbox, velocity)) {
@@ -10515,7 +_,13 @@
 					}
 				}
 
-				if (Main.player[myPlayer2].Hurt(PlayerDeathReason.ByProjectile(-1, whoAmI), num53, direction, pvp: false, quiet: false, Crit: false, num49) > 0.0 && !Main.player[myPlayer2].dead)
+				bool crit = false;
+				ProjectileLoader.ModifyHitPlayer(this, Main.player[myPlayer2], ref num53, ref crit);
+				PlayerLoader.ModifyHitByProjectile(Main.player[myPlayer2], this, ref num53, ref crit);
+
+				int realDamage = (int)Main.player[myPlayer2].Hurt(PlayerDeathReason.ByProjectile(-1, whoAmI), num53, direction, pvp: false, quiet: false, Crit: crit, num49);
+
+				if (realDamage > 0 && !Main.player[myPlayer2].dead)
 					StatusPlayer(myPlayer2);
 
 				if (trap) {
@@ -10523,6 +_,9 @@
 					if (Main.player[myPlayer2].dead)
 						AchievementsHelper.HandleSpecialEvent(Main.player[myPlayer2], 4);
 				}
+
+				ProjectileLoader.OnHitPlayer(this, Main.player[myPlayer2], realDamage, crit);
+				PlayerLoader.OnHitByProjectile(Main.player[myPlayer2], this, realDamage, crit);
 			}
 
 			if (true) {
@@ -10575,7 +_,7 @@
 			return num;
 		}
 
-		private static void EmitBlackLightningParticles(NPC targetNPC) {
+		public static void EmitBlackLightningParticles(NPC targetNPC) {
 			ParticleOrchestrator.RequestParticleSpawn(clientOnly: false, ParticleOrchestraType.BlackLightningHit, new ParticleOrchestraSettings {
 				PositionInWorld = targetNPC.Center
 			});
@@ -10706,10 +_,15 @@
 				}
 			}
 
+			ProjectileLoader.CutTiles(this);
 			AchievementsHelper.CurrentlyMining = false;
 		}
 
 		private bool CanCutTiles() {
+			bool? canCutTiles = ProjectileLoader.CanCutTiles(this);
+			if (canCutTiles.HasValue)
+				return canCutTiles.Value;
+
 			if (aiStyle != 45 && aiStyle != 137 && aiStyle != 92 && aiStyle != 105 && aiStyle != 106 && !ProjectileID.Sets.IsAGolfBall[type] && type != 463 && type != 69 && type != 70 && type != 621 && type != 10 && type != 11 && type != 379 && type != 407 && type != 476 && type != 623 && (type < 625 || type > 628) && type != 833 && type != 834 && type != 835 && type != 818 && type != 831 && type != 820 && type != 864)
 				return type != 970;
 
@@ -10895,6 +_,10 @@
 				}
 			}
 
+			bool? modColliding = ProjectileLoader.Colliding(this, myRect, targetRect);
+			if (modColliding.HasValue)
+				return modColliding.Value;
+
 			if (myRect.Intersects(targetRect))
 				return true;
 
@@ -11430,7 +_,7 @@
 
 				if (numUpdates == -1 && (minion || sentry)) {
 					Player player = Main.player[owner];
-					damage = (int)((float)originalDamage * player.minionDamage);
+					damage = (int)((float)originalDamage * (float)(player.allDamage.CombineWith(player.minionDamage)));
 				}
 
 				if (minion && numUpdates == -1 && type != 625 && type != 628) {
@@ -12154,8 +_,19 @@
 					overrideHeight = 4;
 				}
 
+				Vector2 hitboxCenterFrac = vector ?? new Vector2(0.5f);
+				int num = (overrideWidth != -1) ? overrideWidth : base.width;
+				int num2 = (overrideHeight != -1) ? overrideHeight : base.height;
+
+				if (!ProjectileLoader.TileCollideStyle(this, ref num, ref num2, ref flag6, ref hitboxCenterFrac)) {
+				}
-				if (((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (type != 466 || localAI[1] != 1f) && (type != 580 || !(localAI[1] > 0f)) && (type != 640 || !(localAI[1] > 0f))) {
+				else if (((type != 440 && type != 449 && type != 606) || ai[1] != 1f) && (type != 466 || localAI[1] != 1f) && (type != 580 || !(localAI[1] > 0f)) && (type != 640 || !(localAI[1] > 0f))) {
+					Vector2 vector2 = base.Center - new Vector2(num, num2) * hitboxCenterFrac;
 					if (aiStyle == 10) {
+						base.velocity = Collision.TileCollision(vector2, base.velocity, num, num2, flag6, flag6);
+						if (type >= ProjectileID.CopperCoinsFalling && type <= ProjectileID.PlatinumCoinsFalling)
+							base.velocity = Collision.AnyCollisionWithSpecificTiles(vector2, base.velocity, num, num2, TileID.Sets.Falling, evenActuated: true);
+						/* This section was rewriten above so it is affected by ProjectileLoader.TileCollideStyle
 						if (type >= 736 && type <= 738) {
 							base.velocity = Collision.TileCollision(base.position, base.velocity, base.width, base.height, flag6, flag6);
 						}
@@ -12169,13 +_,17 @@
 						else {
 							base.velocity = Collision.TileCollision(base.position, base.velocity, base.width, base.height, flag6, flag6);
 						}
+						*/
 					}
 					else {
+						/* This section was moved to before the ProjectileLoader.TileCollideStyle call
 						Vector2 vector2 = base.position;
 						int num = (overrideWidth != -1) ? overrideWidth : base.width;
 						int num2 = (overrideHeight != -1) ? overrideHeight : base.height;
+
 						if (overrideHeight != -1 || overrideWidth != -1)
 							vector2 = (vector.HasValue ? (base.Center - new Vector2(num, num2) * vector.Value) : new Vector2(base.position.X + (float)(base.width / 2) - (float)(num / 2), base.position.Y + (float)(base.height / 2) - (float)(num2 / 2)));
+						*/
 
 						if (wet) {
 							if (honeyWet) {
@@ -12428,7 +_,9 @@
 						}
 					}
 
+					if (!ProjectileLoader.OnTileCollide(this, lastVelocity)) {
+					}
-					if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693 || type == 688 || type == 689 || type == 690) {
+					else if (type == 663 || type == 665 || type == 667 || type == 677 || type == 678 || type == 679 || type == 691 || type == 692 || type == 693 || type == 688 || type == 689 || type == 690) {
 						base.position += base.velocity;
 						base.velocity = Vector2.Zero;
 					}
@@ -13359,6 +_,9 @@
 			if (aiStyle == 4 || aiStyle == 38 || aiStyle == 84 || aiStyle == 148 || (aiStyle == 7 && ai[0] == 2f) || ((type == 440 || type == 449 || type == 606) && ai[1] == 1f) || (aiStyle == 93 && ai[0] < 0f) || type == 540 || type == 756 || type == 818 || type == 856 || type == 961 || type == 933 || ProjectileID.Sets.IsAGolfBall[type])
 				return;
 
+			if (!ProjectileLoader.ShouldUpdatePosition(this))
+				return;
+
 			if (wet)
 				position += wetVelocity;
 			else
@@ -13476,6 +_,9 @@
 			FishingCheck_RollEnemySpawns(ref fisher);
 			FishingCheck_RollItemDrop(ref fisher);
 			bool flag = false;
+			PlayerLoader.CatchFish(Main.player[owner], Main.player[owner].inventory[Main.player[owner].selectedItem],
+				fisher.waterNeededToFish, fisher.inLava ? 1 : fisher.inHoney ? 2 : 0, fisher.fishingLevel, fisher.heightLevel, fisher.questFish, ref fisher.rolledItemDrop);
+
 			if (fisher.rolledItemDrop > 0) {
 				if (Main.player[owner].sonarPotion) {
 					Item item = new Item();
@@ -13966,9 +_,11 @@
 				while (Main.tile[i, num].liquid > 0 && !WorldGen.SolidTile(i, num) && num < Main.maxTilesY - 10) {
 					numWaters++;
 					num++;
+					//patch file: flag, num4
 					if (Main.tile[i, num].lava())
 						lava = true;
 					else if (Main.tile[i, num].honey())
+						//patch file: flag2
 						honey = true;
 
 					tileCoords.X = i;
@@ -14328,6 +_,9 @@
 						return 0.77f;
 					case "Random":
 						return Main.rand.NextFloat();
+					case "bluemagic123":
+					case "blushiemagic":
+						return 0.55f + (float)Math.Cos(Main.time / 120.0 * 6.2831854820251465) * 0.1f;
 				}
 			}
 
@@ -14480,6 +_,10 @@
 		}
 
 		public void AI() {
+			ProjectileLoader.ProjectileAI(this);
+		}
+
+		public void VanillaAI() {
 			if (aiStyle == 1) {
 				AI_001();
 			}
@@ -26416,7 +_,7 @@
 			}
 
 			if (flag) {
-				player.CheckMana(player.inventory[player.selectedItem].mana, pay: true);
+				player.CheckMana(player.inventory[player.selectedItem], pay: true);
 				localAI[0] = 1f;
 			}
 		}
@@ -27992,7 +_,7 @@
 
 						if (flag3) {
 							bool flag4 = false;
-							if (!flag || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true)) {
+							if (!flag || player.CheckMana(player.inventory[player.selectedItem], pay: true)) {
 								int num = damage;
 								position = base.Center;
 								int num2 = 0;
@@ -33106,6 +_,9 @@
 					if (num3 > (float)num9)
 						ai[0] = 1f;
 				}
+				else if (ProjectileLoader.GrappleOutOfRange(num3, this)) {
+					ai[0] = 1f;
+				}
 
 				Vector2 value = base.Center - new Vector2(5f);
 				Vector2 value2 = base.Center + new Vector2(5f);
@@ -33198,6 +_,7 @@
 							if (type >= 646 && type <= 649)
 								num17 = 4;
 
+							ProjectileLoader.NumGrappleHooks(this, Main.player[owner], ref num17);
 							for (int num18 = 0; num18 < 1000; num18++) {
 								if (Main.projectile[num18].active && Main.projectile[num18].owner == owner && Main.projectile[num18].aiStyle == 7) {
 									if (Main.projectile[num18].timeLeft < num16) {
@@ -33275,6 +_,7 @@
 				if (type == 332)
 					num19 = 17f;
 
+				ProjectileLoader.GrappleRetreatSpeed(this, Main.player[owner], ref num19);
 				if (num3 < 24f)
 					Kill();
 
@@ -33485,7 +_,7 @@
 				return;
 			}
 
-			ai[0] += Main.dayRate;
+			ai[0] += (float)Main.desiredWorldEventsUpdateRate;
 			if (localAI[0] == 0f && Main.netMode != 2) {
 				localAI[0] = 1f;
 				if ((double)Main.LocalPlayer.position.Y < Main.worldSurface * 16.0)
@@ -33791,7 +_,7 @@
 						if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
 							continue;
 
-						int num4 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
+						int num4 = WorldGen.KillTile_GetTileDustAmount(true, tileSafely, j, k);
 						for (int l = 0; l < num4; l++) {
 							Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(j, k, tileSafely)];
 							obj.velocity.Y -= 3f + (float)num3 * 1.5f;
@@ -34204,6 +_,7 @@
 				int num4 = item.stack = Main.rand.Next(minValue2, num3 + 1);
 			}
 
+			ItemLoader.CaughtFishStack(item);
 			item.newAndShiny = true;
 			Item item2 = thePlayer.GetItem(owner, item, default(GetItemSettings));
 			if (item2.stack > 0) {
@@ -43134,7 +_,7 @@
 				}
 
 				if (flag && Main.myPlayer == owner) {
-					if (player.channel && player.CheckMana(player.inventory[player.selectedItem].mana, pay: true) && !player.noItems && !player.CCed) {
+					if (player.channel && player.CheckMana(player.inventory[player.selectedItem], pay: true) && !player.noItems && !player.CCed) {
 						float num8 = player.inventory[player.selectedItem].shootSpeed * scale;
 						Vector2 value2 = vector;
 						Vector2 value3 = Main.screenPosition + new Vector2(Main.mouseX, Main.mouseY) - value2;
@@ -43371,7 +_,7 @@
 
 				if (flag5 && Main.myPlayer == owner) {
 					bool flag6 = false;
-					flag6 = (!flag3 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true));
+					flag6 = (!flag3 || player.CheckMana(player.inventory[player.selectedItem], pay: true));
 					if (player.channel && flag6 && !player.noItems && !player.CCed) {
 						if (ai[0] == 180f) {
 							Vector2 center = base.Center;
@@ -43483,7 +_,7 @@
 
 				if (flag9 && Main.myPlayer == owner) {
 					bool flag10 = false;
-					flag10 = (!flag8 || player.CheckMana(player.inventory[player.selectedItem].mana, pay: true));
+					flag10 = (!flag8 || player.CheckMana(player.inventory[player.selectedItem], pay: true));
 					if (player.channel && flag10 && !player.noItems && !player.CCed) {
 						if (ai[0] == 1f) {
 							Vector2 center2 = base.Center;
@@ -44495,6 +_,11 @@
 			if (num7 < 1f)
 				num7 = 1f;
 
+			// Yoyos with effective top speed (boosted by melee speed) num8 > 26 will set num11 to be less than 1.
+			// This breaks the AI's acceleration vector math and stops the velocity from being correctly capped every frame.
+			// Providing a minimum value of 1.01 to num11 fixes this, allowing for very fast modded yoyos.
+			// See issue #751 for more details.
+			if (num7 < 1.01f) num7 = 1.01f;
 			num9 = 5f + num8 / 2f;
 			if (flag)
 				num9 += 20f;
@@ -45075,7 +_,7 @@
 					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
 						continue;
 
-					int num5 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely);
+					int num5 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely, i, j);
 					for (int k = 0; k < num5; k++) {
 						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
 						obj.velocity.Y -= 3f + (float)num4 * 1.5f;
@@ -45607,7 +_,7 @@
 					if (tileSafely2.active() && Main.tileSolid[tileSafely2.type] && !Main.tileSolidTop[tileSafely2.type])
 						continue;
 
-					int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely) * dustAmountMultiplier;
+					int num2 = WorldGen.KillTile_GetTileDustAmount(fail: true, tileSafely, i, j) * dustAmountMultiplier;
 					for (int k = 0; k < num2; k++) {
 						Dust obj = Main.dust[WorldGen.KillTile_MakeTileDust(i, j, tileSafely)];
 						obj.velocity.Y -= 3f + (float)num * 1.5f;
@@ -46256,6 +_,11 @@
 			int num = timeLeft;
 			timeLeft = 0;
 			ParticleOrchestraSettings settings;
+			if (!ProjectileLoader.PreKill(this, num)) {
+				active = false;
+				return;
+			}
+
 			if (type == 949) {
 				SoundEngine.PlaySound(SoundID.Item10, base.Center);
 				int num2 = (int)ai[0];
@@ -47086,7 +_,7 @@
 
 			if (Main.myPlayer == owner && bobber) {
 				PopupText.ClearSonarText();
-				if (ai[1] > 0f && ai[1] < 5125f)
+				if (ai[1] > 0f)
 					AI_061_FishingBobber_GiveItemToPlayer(Main.player[owner], (int)ai[1]);
 
 				ai[1] = 0f;
@@ -52681,6 +_,7 @@
 				}
 			}
 
+			ProjectileLoader.Kill(this, num);
 			active = false;
 		}
 
@@ -52747,6 +_,9 @@
 			if (Main.tileDungeon[Main.tile[x, y].type] || TileID.Sets.BasicChest[Main.tile[x, y].type])
 				return false;
 
+			if (!TileLoader.CanExplode(x, y))
+				return false;
+
 			switch (Main.tile[x, y].type) {
 				case 26:
 				case 88:
@@ -52807,7 +_,7 @@
 
 					for (int k = i - 1; k <= i + 1; k++) {
 						for (int l = j - 1; l <= j + 1; l++) {
-							if (Main.tile[k, l] != null && Main.tile[k, l].wall > 0 && wallSplode) {
+							if (Main.tile[k, l] != null && Main.tile[k, l].wall > 0 && wallSplode && WallLoader.CanExplode(k, l, Main.tile[k, l].wall)) {
 								WorldGen.KillWall(k, l);
 								if (Main.tile[k, l].wall == 0 && Main.netMode != 0)
 									NetMessage.SendData(17, -1, -1, null, 2, k, l);
@@ -52861,6 +_,10 @@
 		}
 
 		public Color GetAlpha(Color newColor) {
+			Color? modColor = ProjectileLoader.GetAlpha(this, newColor);
+			if (modColor.HasValue)
+				return modColor.Value;
+
 			if (type == 937)
 				newColor.A = (byte)((float)(int)newColor.A * 0.75f);
 
