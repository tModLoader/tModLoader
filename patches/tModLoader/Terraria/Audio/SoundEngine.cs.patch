--- src/TerrariaNetCore/Terraria/Audio/SoundEngine.cs
+++ src/tModLoader/Terraria/Audio/SoundEngine.cs
@@ -6,10 +_,10 @@
 
 namespace Terraria.Audio
 {
-	public static class SoundEngine
+	public static partial class SoundEngine
 	{
 		public static readonly object AudioLock = new object();
-		public static LegacySoundPlayer LegacySoundPlayer;
+		internal static LegacySoundPlayer LegacySoundPlayer;
 		public static SoundPlayer SoundPlayer;
 		public static bool AreSoundsPaused;
 
@@ -20,6 +_,8 @@
 
 		public static void Initialize() {
 			IsAudioSupported = TestAudioSupport();
+			if (!IsAudioSupported)
+				Utils.ShowFancyErrorMessage(Localization.Language.GetTextValue("tModLoader.AudioNotSupported"), ModLoader.UI.Interface.loadModsID);
 		}
 
 		public static void Load(IServiceProvider services) {
@@ -56,6 +_,8 @@
 			}
 		}
 
+		//TML: See SoundEngine.TML.cs for new PlaySound overloads
+		/*
 		public static void PlaySound(int type, Vector2 position, int style = 1) {
 			PlaySound(type, (int)position.X, (int)position.Y, style);
 		}
@@ -93,16 +_,19 @@
 			return SoundPlayer.GetActiveSound(id);
 		}
 
-		public static SlotId PlayTrackedSound(SoundStyle style, Vector2 position) {
+		public static SlotId PlayTrackedSound(SoundStyle style, Vector2? position = null) {
 			if (Main.dedServ) // #if SERVER
 				return SlotId.Invalid;
 
 			if (!IsAudioSupported)
 				return SlotId.Invalid;
 
-			return SoundPlayer.Play(style, position);
+			return SoundPlayer.Play(in style, position);
 		}
+		*/
 
+		//TML: Merged into the above method.
+		/*
 		public static SlotId PlayTrackedSound(SoundStyle style) {
 			if (Main.dedServ) // #if SERVER
 				return SlotId.Invalid;
@@ -112,12 +_,15 @@
 
 			return SoundPlayer.Play(style);
 		}
+		*/
 
 		public static void StopTrackedSounds() {
 			if (IsAudioSupported)
 				SoundPlayer.StopAll();
 		}
 
+		//TML: Removed; Sound styles no longer use IDs anywhere.
+		/*
 		public static SoundEffect GetTrackableSoundByStyleId(int id) {
 			if (Main.dedServ) // #if SERVER
 				return null;
@@ -127,13 +_,14 @@
 
 			return LegacySoundPlayer.GetTrackableSoundByStyleId(id);
 		}
+		*/
 
 		public static void StopAmbientSounds() {
 			if (IsAudioSupported && LegacySoundPlayer != null)
 				LegacySoundPlayer.StopAmbientSounds();
 		}
 
-		public static ActiveSound FindActiveSound(SoundStyle style) {
+		public static ActiveSound FindActiveSound(in SoundStyle style) {
 			if (Main.dedServ) // #if SERVER
 				return null;
 
@@ -319,7 +_,7 @@
 				}
 			}
 			catch (NoAudioHardwareException) {
-				Console.WriteLine("No audio hardware found. Disabling all audio.");
+				ModLoader.Logging.tML.Warn("No audio hardware found. Disabling all audio.");
 				return false;
 			}
 			catch {
