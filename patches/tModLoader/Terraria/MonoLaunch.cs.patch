--- src/TerrariaNetCore/Terraria/MonoLaunch.cs
+++ src/tModLoader/Terraria/MonoLaunch.cs
@@ -6,7 +_,9 @@
 using System.Reflection;
 using System.Runtime.InteropServices;
 using System.Runtime.Loader;
+using System.Threading;
 using Terraria;
+using Terraria.ModLoader;
 
 internal static class MonoLaunch
 {
@@ -17,6 +_,12 @@
 	private static readonly Dictionary<string, IntPtr> assemblies = new Dictionary<string, IntPtr>();
 
 	private static void Main(string[] args) {
+		if (args.Length > 0 && args[0] == "-tModPorter") {
+			tModPorter.Program.Main(args.Skip(1).ToArray()).GetAwaiter().GetResult();
+			return;
+		}
+
+		Thread.CurrentThread.Name = "Entry Thread";
 		/*
 		// FNA is requested by both Terraria and ReLogic.dll
 		var loaded = new Dictionary<string, Assembly>();
@@ -47,7 +_,22 @@
 #endif
 
 		Environment.SetEnvironmentVariable("FNA_WORKAROUND_WINDOW_RESIZABLE", "1");
+		// Spawn a thread to use configured default stack size instead of the one reported in the binary
+		// https://social.msdn.microsoft.com/Forums/office/en-US/7132b30d-9792-4bf3-87ec-7198052e4ed3/main-thread-stack-size?forum=csharpgeneral
+		// post processing the binary with `editbin /stack:400000 tModLoader.dll` should do it for the main thread but it's annoying
+		// and duplicates the size defined in the runtimeconfig
+		// @TODO: Temporary change, make it cross platform, linux crashes if FNA loop is not in the REAL Main thread
+		//        Atm linux and mac use for main also the env variable so it works
+		var LocalLaunchGame = () => {
 		Program.LaunchGame(args, monoArgs: true);
+		};
+		if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {
+			new Thread(new ThreadStart(LocalLaunchGame)).Start();
+			// Move the dummy entry thread to background
+			Thread.CurrentThread.IsBackground = true;
+		} else {
+			LocalLaunchGame();
+		}
 	}
 
 #if NETCORE
@@ -58,11 +_,23 @@
 					return handle;
 				}
 
-				Console.WriteLine($"Native Resolve: {assembly.FullName} -> {name}");
+				Logging.tML.Debug($"Native Resolve: {assembly.FullName} -> {name}");
 
 				var dir = Path.Combine(Environment.CurrentDirectory, "Libraries", "Native", getNativeDir(name));
 				var files = Directory.GetFiles(dir, $"*{name}*", SearchOption.AllDirectories);
 				var match = files.FirstOrDefault();
+
+				if (match is null) {
+					throw new FileNotFoundException($"Failed to find Native Library: {Path.Combine(dir, name + ".dll")}");
+				}
+
+				Logging.tML.Debug($"\tattempting load {match}");
+
+				handle = NativeLibrary.Load(match);
+
+				Logging.tML.Debug("\tsuccess");
+
+				return assemblies[name] = handle;
 
 				Console.WriteLine(match == null ? "\tnot found in Libraries/Native" : $"\tattempting load {match}");
 
