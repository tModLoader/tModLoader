--- src/TerrariaNetCore/Terraria/GameContent/SmartCursorHelper.cs
+++ src/tModLoader/Terraria/GameContent/SmartCursorHelper.cs
@@ -5,6 +_,7 @@
 using Terraria.GameContent.UI;
 using Terraria.GameInput;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent;
 
@@ -147,6 +_,7 @@
 		bool result = false;
 		if (Main.tile[providedInfo.screenTargetX, providedInfo.screenTargetY].active()) {
 			switch (Main.tile[providedInfo.screenTargetX, providedInfo.screenTargetY].type) {
+				/*
 				case 4:
 				case 10:
 				case 11:
@@ -198,6 +_,9 @@
 				case 621:
 				case 642:
 					result = true;
+				*/
+				default:
+					result = TileID.Sets.DisableSmartCursor[Main.tile[providedInfo.screenTargetX, providedInfo.screenTargetY].type];
 					break;
 				case 314:
 					if (providedInfo.player.gravDir == 1f)
@@ -251,7 +_,7 @@
 			return;
 
 		int type = providedInfo.item.type;
-		if (type < 0 || type >= ItemID.Count || !ItemID.Sets.GrassSeeds[type])
+		if (type < 0 || !ItemID.Sets.GrassSeeds[type])
 			return;
 
 		_targets.Clear();
@@ -672,7 +_,7 @@
 	private static void Step_BlocksLines(SmartCursorUsageInfo providedInfo, ref int focusedX, ref int focusedY)
 	{
 		int type = providedInfo.item.type;
-		if (type < 0 || type >= ItemID.Count || !Player.SmartCursorSettings.SmartBlocksEnabled || providedInfo.item.createTile <= -1 || type == 213 || type == 5295 || ItemID.Sets.GrassSeeds[type] || !Main.tileSolid[providedInfo.item.createTile] || Main.tileSolidTop[providedInfo.item.createTile] || Main.tileFrameImportant[providedInfo.item.createTile] || focusedX != -1 || focusedY != -1)
+		if (type < 0 || !Player.SmartCursorSettings.SmartBlocksEnabled || providedInfo.item.createTile <= -1 || type == 213 || type == 5295 || ItemID.Sets.GrassSeeds[type] || !Main.tileSolid[providedInfo.item.createTile] || Main.tileSolidTop[providedInfo.item.createTile] || Main.tileFrameImportant[providedInfo.item.createTile] || focusedX != -1 || focusedY != -1)
 			return;
 
 		_targets.Clear();
@@ -732,7 +_,7 @@
 
 	private static void Step_Boulders(SmartCursorUsageInfo providedInfo, ref int focusedX, ref int focusedY)
 	{
-		if (providedInfo.item.createTile <= -1 || providedInfo.item.createTile >= TileID.Count || !TileID.Sets.Boulders[providedInfo.item.createTile] || focusedX != -1 || focusedY != -1)
+		if (providedInfo.item.createTile <= -1 || !TileID.Sets.Boulders[providedInfo.item.createTile] || focusedX != -1 || focusedY != -1)
 			return;
 
 		_targets.Clear();
@@ -875,7 +_,7 @@
 				for (int k = i; k <= i + 1; k++) {
 					for (int l = j - 1; l <= j; l++) {
 						Tile tile3 = Main.tile[k, l];
-						if (tile3.active() && (tile3.type < 0 || tile3.type >= TileID.Count || Main.tileSolid[tile3.type] || !WorldGen.CanCutTile(k, l, TileCuttingContext.TilePlacement)))
+						if (tile3.active() && (tile3.type < 0 || Main.tileSolid[tile3.type] || !WorldGen.CanCutTile(k, l, TileCuttingContext.TilePlacement)))
 							flag = false;
 					}
 				}
@@ -1654,11 +_,13 @@
 				if ((tile.active() && !Main.tileCut[tile.type] && !TileID.Sets.BreakableWhenPlacing[tile.type]) || (tile2.active() && !Main.tileCut[tile2.type] && !TileID.Sets.BreakableWhenPlacing[tile2.type]) || (tile4.active() && TileID.Sets.CommonSapling[tile4.type]) || (tile5.active() && TileID.Sets.CommonSapling[tile5.type]) || (tile6.active() && TileID.Sets.CommonSapling[tile6.type]) || (tile7.active() && TileID.Sets.CommonSapling[tile7.type]) || (tile8.active() && TileID.Sets.CommonSapling[tile8.type]) || (tile9.active() && TileID.Sets.CommonSapling[tile9.type]) || !tile3.active() || !WorldGen.SolidTile2(tile3))
 					continue;
 
+				bool tileTypeValid = false;
+
 				switch (tile3.type) {
 					case 60:
 						if (WorldGen.EmptyTileCheck(i - 2, i + 2, j - 20, j, 20))
 							_targets.Add(new Tuple<int, int>(i, j));
-						break;
+						continue;
 					case 2:
 					case 23:
 					case 53:
@@ -1673,19 +_,30 @@
 					case 633:
 					case 661:
 					case 662:
-						if (tile4.liquid == 0 && tile.liquid == 0 && tile5.liquid == 0 && WorldGen.EmptyTileCheck(i - 2, i + 2, j - 20, j, 20))
-							_targets.Add(new Tuple<int, int>(i, j));
+						tileTypeValid = true;
 						break;
 				}
+
+				if (!tileTypeValid)
+					tileTypeValid = TileLoader.CanGrowModTree(tile3.type) || TileLoader.CanGrowModPalmTree(tile3.type);
+
+				if (tileTypeValid && tile4.liquid == 0 && tile.liquid == 0 && tile5.liquid == 0 && WorldGen.EmptyTileCheck(i - 2, i + 2, j - 20, j, 20))
+					_targets.Add(new Tuple<int, int>(i, j));
 			}
 		}
 
 		_toRemove.Clear();
 		for (int k = 0; k < _targets.Count; k++) {
 			bool flag = false;
+
 			for (int l = -1; l < 2; l += 2) {
 				Tile tile10 = Main.tile[_targets[k].Item1 + l, _targets[k].Item2 + 1];
 				if (tile10.active()) {
+					if (TileLoader.CanGrowModTree(tile10.type) || TileLoader.CanGrowModPalmTree(tile10.type)) {
+						flag = true;
+						continue;
+					}
+					
 					switch (tile10.type) {
 						case 2:
 						case 23:
@@ -2183,7 +_,7 @@
 			return;
 
 		int type = providedInfo.item.type;
-		if (type < 0 || type >= ItemID.Count)
+		if (type < 0)
 			return;
 
 		int reachableStartX = providedInfo.reachableStartX;
@@ -2269,7 +_,7 @@
 		int reachableEndY = providedInfo.reachableEndY;
 		_ = providedInfo.screenTargetX;
 		_ = providedInfo.screenTargetY;
-		if (providedInfo.item.createTile != 4 || fX != -1 || fY != -1)
+		if (providedInfo.item.createTile < 0 || !TileID.Sets.Torch[providedInfo.item.createTile] || fX != -1 || fY != -1)
 			return;
 
 		_targets.Clear();
