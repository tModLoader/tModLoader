--- src/TerrariaNetCore/Terraria/GameContent/UI/EmoteBubble.cs
+++ src/tModLoader/Terraria/GameContent/UI/EmoteBubble.cs
@@ -1,3 +_,4 @@
+using Terraria.ModLoader;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using System;
@@ -9,7 +_,7 @@
 {
 	public class EmoteBubble
 	{
-		private static int[] CountNPCs = new int[670];
+		internal static int[] CountNPCs = new int[NPCID.Count];
 		public static Dictionary<int, EmoteBubble> byID = new Dictionary<int, EmoteBubble>();
 		private static List<int> toClean = new List<int>();
 		public static int NextID;
@@ -61,19 +_,58 @@
 				else if (anch.entity is Projectile)
 					item = 2;
 
+				// TML: #WorldUIAnchorProjectileSyncFix: Explanation below
+				// Vanilla never uses Projectile as a WorldUIAnchor, but if mods do, it is very likely to desync.
+				// As whoAmI is not enough to match a projectile between sides, TML rewrites it to use identity + owner instead.
+				// It does so by packing the anchor entity type together with the owner (which is irrelevant for anything but projectiles).
+				// Chosen because both variables can never go above 255 (whoAmI can go above that for projectiles), making them suitable for combining them into one.
+				// Methods (including the IO protocol) accessing this packed type/owner pair handle it properly.
+				// byte type -> ushort packedTypeOwner [type << 8 | owner]
+				// This adds an overhead of a byte to the message 91 (SyncEmoteBubble) in all cases
+				int whoAmI = anch.entity.whoAmI;
+				if (!ModNet.AllowVanillaClients) {
+					int owner = 0;
+					if (anch.entity is Projectile projectile) {
+						whoAmI = projectile.identity; // This is the meta parameter in DeserializeNetAnchor
+						owner = projectile.owner;
+					}
+					item = item << 8 | owner;
+				}
-				return Tuple.Create(item, anch.entity.whoAmI);
+				return Tuple.Create(item, whoAmI);
 			}
 
 			return Tuple.Create(0, 0);
 		}
 
 		public static WorldUIAnchor DeserializeNetAnchor(int type, int meta) {
+			// TML: #WorldUIAnchorProjectileSyncFix
+			// Unpack type for the switch case evaluation, use the owner in the Projectile case
+			int packedTypeOwner = type;
+			if (!ModNet.AllowVanillaClients)
+				type = packedTypeOwner >> 8;
+
 			switch (type) {
 				case 0:
 					return new WorldUIAnchor(Main.npc[meta]);
 				case 1:
 					return new WorldUIAnchor(Main.player[meta]);
 				case 2:
+					if (!ModNet.AllowVanillaClients) {
+						// meta represents the identity here
+						int owner = packedTypeOwner & 0xFF;
+
+						// identity matching code taken from MessageBuffer.GetData case 27
+						int whoAmI = Main.maxProjectiles;
+						for (int i = 0; i < Main.maxProjectiles; i++) {
+							Projectile projectile = Main.projectile[i];
+							if (projectile.owner == owner && projectile.identity == meta && projectile.active) {
+								whoAmI = i;
+								break;
+							}
+						}
+
+						return new WorldUIAnchor(Main.projectile[whoAmI]);
+					}
 					return new WorldUIAnchor(Main.projectile[meta]);
 				default:
 					throw new Exception("How did you end up getting this?");
@@ -347,7 +_,7 @@
 		}
 
 		private void ProbeTownNPCs(List<int> list) {
-			for (int i = 0; i < 670; i++) {
+			for (int i = 0; i < NPCLoader.NPCCount; i++) {
 				CountNPCs[i] = 0;
 			}
 
@@ -357,7 +_,7 @@
 			}
 
 			int type = ((NPC)anchor.entity).type;
-			for (int k = 0; k < 670; k++) {
+			for (int k = 0; k < NPCLoader.NPCCount; k++) {
 				if (NPCID.Sets.FaceEmote[k] > 0 && CountNPCs[k] > 0 && k != type)
 					list.Add(NPCID.Sets.FaceEmote[k]);
 			}
