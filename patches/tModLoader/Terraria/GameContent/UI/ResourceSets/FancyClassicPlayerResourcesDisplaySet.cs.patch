--- src/TerrariaNetCore/Terraria/GameContent/UI/ResourceSets/FancyClassicPlayerResourcesDisplaySet.cs
+++ src/tModLoader/Terraria/GameContent/UI/ResourceSets/FancyClassicPlayerResourcesDisplaySet.cs
@@ -3,13 +_,16 @@
 using ReLogic.Content;
 using ReLogic.Graphics;
 using Terraria.DataStructures;
+using Terraria.Localization;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.UI.ResourceSets
 {
 	public class FancyClassicPlayerResourcesDisplaySet : IPlayerResourcesDisplaySet, IConfigKeyHolder
 	{
 		private float _currentPlayerLife;
+		// Made double to prevent bugs caused by precision limits (#HealthManaAPI)
-		private float _lifePerHeart;
+		private double _lifePerHeart;
 		private int _playerLifeFruitCount;
 		private int _lastHeartFillingIndex;
 		private int _lastHeartPanelIndex;
@@ -17,7 +_,8 @@
 		private int _heartCountRow2;
 		private int _starCount;
 		private int _lastStarFillingIndex;
+		// Made double to prevent bugs caused by precision limits (#HealthManaAPI)
-		private float _manaPerStar;
+		private double _manaPerStar;
 		private float _currentPlayerMana;
 		private Asset<Texture2D> _heartLeft;
 		private Asset<Texture2D> _heartMiddle;
@@ -34,6 +_,10 @@
 		private bool _hoverLife;
 		private bool _hoverMana;
 
+		private IResourceDrawSource _heartDrawSource, _heartPanelDrawSource, _manaDrawSource, _manaPanelDrawSource;
+
+		public string DisplayedName => Language.GetTextValue("UI.HealthManaStyle_" + NameKey);
+
 		public string NameKey {
 			get;
 			private set;
@@ -60,6 +_,10 @@
 			_starBottom = Main.Assets.Request<Texture2D>(str + "\\Star_C", mode);
 			_starSingle = Main.Assets.Request<Texture2D>(str + "\\Star_Single", mode);
 			_starFill = Main.Assets.Request<Texture2D>(str + "\\Star_Fill", mode);
+			_heartPanelDrawSource = new ResourceDrawSource_FancyLifePanel();
+			_heartDrawSource = new ResourceDrawSource_FancyLife();
+			_manaPanelDrawSource = new ResourceDrawSource_FancyManaPanel();
+			_manaDrawSource = new ResourceDrawSource_FancyMana();
 		}
 
 		public void Draw() {
@@ -71,6 +_,9 @@
 		}
 
 		private void DrawLifeBar(SpriteBatch spriteBatch) {
+			Color color = new Color(Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor);
+			if (!ResourceOverlayLoader.PreDrawResourceDisplay(preparedSnapshot, this, true, ref color, out bool drawText))
+				goto SkipDrawing;
 			Vector2 vector = new Vector2(Main.screenWidth - 300 + 4, 15f);
 			bool isHovered = false;
 			ResourceDrawSettings resourceDrawSettings = default(ResourceDrawSettings);
@@ -78,6 +_,7 @@
 			resourceDrawSettings.ElementIndexOffset = 0;
 			resourceDrawSettings.TopLeftAnchor = vector;
 			resourceDrawSettings.GetTextureMethod = HeartPanelDrawer;
+			resourceDrawSettings.GetResourceDrawContext = HeartPanelContext;
 			resourceDrawSettings.OffsetPerDraw = Vector2.Zero;
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
@@ -88,6 +_,7 @@
 			resourceDrawSettings.ElementIndexOffset = 10;
 			resourceDrawSettings.TopLeftAnchor = vector + new Vector2(0f, 28f);
 			resourceDrawSettings.GetTextureMethod = HeartPanelDrawer;
+			resourceDrawSettings.GetResourceDrawContext = HeartPanelContext;
 			resourceDrawSettings.OffsetPerDraw = Vector2.Zero;
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
@@ -98,6 +_,7 @@
 			resourceDrawSettings.ElementIndexOffset = 0;
 			resourceDrawSettings.TopLeftAnchor = vector + new Vector2(15f, 15f);
 			resourceDrawSettings.GetTextureMethod = HeartFillingDrawer;
+			resourceDrawSettings.GetResourceDrawContext = HeartContext;
 			resourceDrawSettings.OffsetPerDraw = Vector2.UnitX * 2f;
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
@@ -108,12 +_,15 @@
 			resourceDrawSettings.ElementIndexOffset = 10;
 			resourceDrawSettings.TopLeftAnchor = vector + new Vector2(15f, 15f) + new Vector2(0f, 28f);
 			resourceDrawSettings.GetTextureMethod = HeartFillingDrawer;
+			resourceDrawSettings.GetResourceDrawContext = HeartContext;
 			resourceDrawSettings.OffsetPerDraw = Vector2.UnitX * 2f;
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = new Vector2(0.5f, 0.5f);
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
-			_hoverLife = isHovered;
+			_hoverLife = isHovered && ResourceOverlayLoader.DisplayHoverText(preparedSnapshot, this, true);
+			SkipDrawing:
+			ResourceOverlayLoader.PostDrawResourceDisplay(preparedSnapshot, this, true, color, drawText);
 		}
 
 		private static void DrawLifeBarText(SpriteBatch spriteBatch, Vector2 topLeftAnchor) {
@@ -127,6 +_,9 @@
 		}
 
 		private void DrawManaBar(SpriteBatch spriteBatch) {
+			Color color = new Color(Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor);
+			if (!ResourceOverlayLoader.PreDrawResourceDisplay(preparedSnapshot, this, false, ref color, out bool drawText))
+				goto SkipDrawing;
 			Vector2 vector = new Vector2(Main.screenWidth - 40, 22f);
 			_ = _starCount;
 			bool isHovered = false;
@@ -135,6 +_,7 @@
 			resourceDrawSettings.ElementIndexOffset = 0;
 			resourceDrawSettings.TopLeftAnchor = vector;
 			resourceDrawSettings.GetTextureMethod = StarPanelDrawer;
+			resourceDrawSettings.GetResourceDrawContext = StarPanelContext;
 			resourceDrawSettings.OffsetPerDraw = Vector2.Zero;
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitY;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
@@ -145,12 +_,15 @@
 			resourceDrawSettings.ElementIndexOffset = 0;
 			resourceDrawSettings.TopLeftAnchor = vector + new Vector2(15f, 16f);
 			resourceDrawSettings.GetTextureMethod = StarFillingDrawer;
+			resourceDrawSettings.GetResourceDrawContext = StarContext;
 			resourceDrawSettings.OffsetPerDraw = Vector2.UnitY * -2f;
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitY;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = new Vector2(0.5f, 0.5f);
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
-			_hoverMana = isHovered;
+			_hoverMana = isHovered && ResourceOverlayLoader.DisplayHoverText(preparedSnapshot, this, false);
+			SkipDrawing:
+			ResourceOverlayLoader.PostDrawResourceDisplay(preparedSnapshot, this, false, color, drawText);
 		}
 
 		private static void DrawManaText(SpriteBatch spriteBatch) {
@@ -193,11 +_,21 @@
 			else
 				sprite = _heartFill;
 
-			float num = drawScale = Utils.GetLerpValue(_lifePerHeart * (float)elementIndex, _lifePerHeart * (float)(elementIndex + 1), _currentPlayerLife, clamped: true);
+			float num = drawScale = (float)Utils.GetLerpValue(_lifePerHeart * (float)elementIndex, _lifePerHeart * (float)(elementIndex + 1), _currentPlayerLife, clamped: true);
 			if (elementIndex == _lastHeartFillingIndex && num > 0f)
 				drawScale += Main.cursorScale - 1f;
 		}
 
+		private void HeartPanelContext(int elementIndex, int firstElementIndex, int lastElementIndex, out PlayerStatsSnapshot snapshot, out IResourceDrawSource drawSource) {
+			snapshot = preparedSnapshot;
+			drawSource = _heartPanelDrawSource;
+		}
+
+		private void HeartContext(int elementIndex, int firstElementIndex, int lastElementIndex, out PlayerStatsSnapshot snapshot, out IResourceDrawSource drawSource) {
+			snapshot = preparedSnapshot;
+			drawSource = _heartDrawSource;
+		}
+
 		private void StarPanelDrawer(int elementIndex, int firstElementIndex, int lastElementIndex, out Asset<Texture2D> sprite, out Vector2 offset, out float drawScale, out Rectangle? sourceRect) {
 			sourceRect = null;
 			offset = Vector2.Zero;
@@ -219,24 +_,37 @@
 			sourceRect = null;
 			offset = Vector2.Zero;
 			sprite = _starFill;
-			float num = drawScale = Utils.GetLerpValue(_manaPerStar * (float)elementIndex, _manaPerStar * (float)(elementIndex + 1), _currentPlayerMana, clamped: true);
+			double num = drawScale = (float)Utils.GetLerpValue(_manaPerStar * (float)elementIndex, _manaPerStar * (float)(elementIndex + 1), _currentPlayerMana, clamped: true);
 			if (elementIndex == _lastStarFillingIndex && num > 0f)
 				drawScale += Main.cursorScale - 1f;
 		}
 
+		private void StarPanelContext(int elementIndex, int firstElementIndex, int lastElementIndex, out PlayerStatsSnapshot snapshot, out IResourceDrawSource drawSource) {
+			snapshot = preparedSnapshot;
+			drawSource = _manaPanelDrawSource;
+		}
+
+		private void StarContext(int elementIndex, int firstElementIndex, int lastElementIndex, out PlayerStatsSnapshot snapshot, out IResourceDrawSource drawSource) {
+			snapshot = preparedSnapshot;
+			drawSource = _manaDrawSource;
+		}
+
+		private PlayerStatsSnapshot preparedSnapshot;
+
 		private void PrepareFields(Player player) {
 			PlayerStatsSnapshot playerStatsSnapshot = new PlayerStatsSnapshot(player);
 			_playerLifeFruitCount = playerStatsSnapshot.LifeFruitCount;
 			_lifePerHeart = playerStatsSnapshot.LifePerSegment;
 			_currentPlayerLife = playerStatsSnapshot.Life;
 			_manaPerStar = playerStatsSnapshot.ManaPerSegment;
-			_heartCountRow1 = Utils.Clamp((int)((float)playerStatsSnapshot.LifeMax / _lifePerHeart), 0, 10);
-			_heartCountRow2 = Utils.Clamp((int)((float)(playerStatsSnapshot.LifeMax - 200) / _lifePerHeart), 0, 10);
-			int num = _lastHeartFillingIndex = (int)((float)playerStatsSnapshot.Life / _lifePerHeart);
+			_heartCountRow1 = Utils.Clamp(playerStatsSnapshot.AmountOfLifeHearts, 0, 10);
+			_heartCountRow2 = Utils.Clamp(playerStatsSnapshot.AmountOfLifeHearts - 10, 0, 10);
+			int num = _lastHeartFillingIndex = (int)(playerStatsSnapshot.Life / _lifePerHeart);
 			_lastHeartPanelIndex = _heartCountRow1 + _heartCountRow2 - 1;
-			_starCount = (int)((float)playerStatsSnapshot.ManaMax / _manaPerStar);
+			_starCount = playerStatsSnapshot.AmountOfManaStars;
 			_currentPlayerMana = playerStatsSnapshot.Mana;
 			_lastStarFillingIndex = (int)(_currentPlayerMana / _manaPerStar);
+			preparedSnapshot = playerStatsSnapshot;
 		}
 
 		public void TryToHover() {
