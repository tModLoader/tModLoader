--- src/TerrariaNetCore/Terraria/GameContent/UI/ResourceSets/FancyClassicPlayerResourcesDisplaySet.cs
+++ src/tModLoader/Terraria/GameContent/UI/ResourceSets/FancyClassicPlayerResourcesDisplaySet.cs
@@ -3,13 +_,15 @@
 using ReLogic.Content;
 using ReLogic.Graphics;
 using Terraria.DataStructures;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.UI.ResourceSets
 {
-	public class FancyClassicPlayerResourcesDisplaySet : IPlayerResourcesDisplaySet, IConfigKeyHolder
+	public partial class FancyClassicPlayerResourcesDisplaySet : IPlayerResourcesDisplaySet, IConfigKeyHolder
 	{
 		private float _currentPlayerLife;
+		// Made double to prevent bugs caused by precision limits (#HealthManaAPI)
-		private float _lifePerHeart;
+		private double _lifePerHeart;
 		private int _playerLifeFruitCount;
 		private int _lastHeartFillingIndex;
 		private int _lastHeartPanelIndex;
@@ -17,7 +_,8 @@
 		private int _heartCountRow2;
 		private int _starCount;
 		private int _lastStarFillingIndex;
+		// Made double to prevent bugs caused by precision limits (#HealthManaAPI)
-		private float _manaPerStar;
+		private double _manaPerStar;
 		private float _currentPlayerMana;
 		private Asset<Texture2D> _heartLeft;
 		private Asset<Texture2D> _heartMiddle;
@@ -71,6 +_,9 @@
 		}
 
 		private void DrawLifeBar(SpriteBatch spriteBatch) {
+			Color color = new Color(Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor);
+			if (!ResourceOverlayLoader.PreDrawResourceDisplay(preparedSnapshot, this, true, ref color, out bool drawText))
+				goto SkipDrawing;
 			Vector2 vector = new Vector2(Main.screenWidth - 300 + 4, 15f);
 			bool isHovered = false;
 			ResourceDrawSettings resourceDrawSettings = default(ResourceDrawSettings);
@@ -82,6 +_,9 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = Vector2.Zero;
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = HeartPanelsFirstRow;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			resourceDrawSettings = default(ResourceDrawSettings);
 			resourceDrawSettings.ElementCount = _heartCountRow2;
@@ -92,6 +_,9 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = Vector2.Zero;
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = HeartPanelsSecondRow;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			resourceDrawSettings = default(ResourceDrawSettings);
 			resourceDrawSettings.ElementCount = _heartCountRow1;
@@ -102,6 +_,9 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = new Vector2(0.5f, 0.5f);
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = HeartsFirstRow;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			resourceDrawSettings = default(ResourceDrawSettings);
 			resourceDrawSettings.ElementCount = _heartCountRow2;
@@ -112,8 +_,13 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = new Vector2(0.5f, 0.5f);
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = HeartsSecondRow;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
-			_hoverLife = isHovered;
+			_hoverLife = isHovered && ResourceOverlayLoader.DisplayHoverText(preparedSnapshot, this, true);
+			SkipDrawing:
+			ResourceOverlayLoader.PostDrawResourceDisplay(preparedSnapshot, this, true, color, drawText);
 		}
 
 		private static void DrawLifeBarText(SpriteBatch spriteBatch, Vector2 topLeftAnchor) {
@@ -127,6 +_,9 @@
 		}
 
 		private void DrawManaBar(SpriteBatch spriteBatch) {
+			Color color = new Color(Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor);
+			if (!ResourceOverlayLoader.PreDrawResourceDisplay(preparedSnapshot, this, false, ref color, out bool drawText))
+				goto SkipDrawing;
 			Vector2 vector = new Vector2(Main.screenWidth - 40, 22f);
 			_ = _starCount;
 			bool isHovered = false;
@@ -139,6 +_,9 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitY;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = Vector2.Zero;
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = StarPanels;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			resourceDrawSettings = default(ResourceDrawSettings);
 			resourceDrawSettings.ElementCount = _starCount;
@@ -149,8 +_,13 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitY;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = new Vector2(0.5f, 0.5f);
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = Stars;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
-			_hoverMana = isHovered;
+			_hoverMana = isHovered && ResourceOverlayLoader.DisplayHoverText(preparedSnapshot, this, false);
+			SkipDrawing:
+			ResourceOverlayLoader.PostDrawResourceDisplay(preparedSnapshot, this, false, color, drawText);
 		}
 
 		private static void DrawManaText(SpriteBatch spriteBatch) {
@@ -193,7 +_,7 @@
 			else
 				sprite = _heartFill;
 
-			float num = drawScale = Utils.GetLerpValue(_lifePerHeart * (float)elementIndex, _lifePerHeart * (float)(elementIndex + 1), _currentPlayerLife, clamped: true);
+			float num = drawScale = (float)Utils.GetLerpValue(_lifePerHeart * (float)elementIndex, _lifePerHeart * (float)(elementIndex + 1), _currentPlayerLife, clamped: true);
 			if (elementIndex == _lastHeartFillingIndex && num > 0f)
 				drawScale += Main.cursorScale - 1f;
 		}
@@ -219,7 +_,7 @@
 			sourceRect = null;
 			offset = Vector2.Zero;
 			sprite = _starFill;
-			float num = drawScale = Utils.GetLerpValue(_manaPerStar * (float)elementIndex, _manaPerStar * (float)(elementIndex + 1), _currentPlayerMana, clamped: true);
+			double num = drawScale = (float)Utils.GetLerpValue(_manaPerStar * (float)elementIndex, _manaPerStar * (float)(elementIndex + 1), _currentPlayerMana, clamped: true);
 			if (elementIndex == _lastStarFillingIndex && num > 0f)
 				drawScale += Main.cursorScale - 1f;
 		}
@@ -230,13 +_,14 @@
 			_lifePerHeart = playerStatsSnapshot.LifePerSegment;
 			_currentPlayerLife = playerStatsSnapshot.Life;
 			_manaPerStar = playerStatsSnapshot.ManaPerSegment;
-			_heartCountRow1 = Utils.Clamp((int)((float)playerStatsSnapshot.LifeMax / _lifePerHeart), 0, 10);
-			_heartCountRow2 = Utils.Clamp((int)((float)(playerStatsSnapshot.LifeMax - 200) / _lifePerHeart), 0, 10);
-			int num = _lastHeartFillingIndex = (int)((float)playerStatsSnapshot.Life / _lifePerHeart);
+			_heartCountRow1 = Utils.Clamp(playerStatsSnapshot.AmountOfLifeHearts, 0, 10);
+			_heartCountRow2 = Utils.Clamp(playerStatsSnapshot.AmountOfLifeHearts - 10, 0, 10);
+			int num = _lastHeartFillingIndex = (int)(playerStatsSnapshot.Life / _lifePerHeart);
 			_lastHeartPanelIndex = _heartCountRow1 + _heartCountRow2 - 1;
-			_starCount = (int)((float)playerStatsSnapshot.ManaMax / _manaPerStar);
+			_starCount = playerStatsSnapshot.AmountOfManaStars;
 			_currentPlayerMana = playerStatsSnapshot.Mana;
 			_lastStarFillingIndex = (int)(_currentPlayerMana / _manaPerStar);
+			preparedSnapshot = playerStatsSnapshot;
 		}
 
 		public void TryToHover() {
