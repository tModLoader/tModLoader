--- src/TerrariaNetCore/Terraria/GameContent/UI/ResourceSets/HorizontalBarsPlayerReosurcesDisplaySet.cs
+++ src/tModLoader/Terraria/GameContent/UI/ResourceSets/HorizontalBarsPlayerReosurcesDisplaySet.cs
@@ -3,10 +_,12 @@
 using ReLogic.Content;
 using ReLogic.Graphics;
 using Terraria.DataStructures;
+using Terraria.Localization;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.UI.ResourceSets
 {
-	public class HorizontalBarsPlayerReosurcesDisplaySet : IPlayerResourcesDisplaySet, IConfigKeyHolder
+	public partial class HorizontalBarsPlayerReosurcesDisplaySet : IPlayerResourcesDisplaySet, IConfigKeyHolder
 	{
 		private int _maxSegmentCount;
 		private int _hpSegmentsCount;
@@ -55,6 +_,9 @@
 			int num = 16;
 			int num2 = 18;
 			int num3 = Main.screenWidth - 300 - 22 + num;
+			Color color = new Color(Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor);
+			if (!ResourceOverlayLoader.PreDrawResourceDisplay(preparedSnapshot, this, true, ref color, out bool drawText))
+				goto SkipLifeDrawing;
 			Vector2 vector = new Vector2(num3, num2);
 			vector.X += (_maxSegmentCount - _hpSegmentsCount) * _panelMiddleHP.Width();
 			bool isHovered = false;
@@ -67,6 +_,9 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = Vector2.Zero;
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = LifePanels;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			resourceDrawSettings = default(ResourceDrawSettings);
 			resourceDrawSettings.ElementCount = _hpSegmentsCount;
@@ -77,8 +_,16 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = Vector2.Zero;
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = LifeBars;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			_hpHovered = isHovered;
+			SkipLifeDrawing:
+			ResourceOverlayLoader.PostDrawResourceDisplay(preparedSnapshot, this, true, color, drawText);
+			color = new Color(Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor, Main.mouseTextColor);
+			if (!ResourceOverlayLoader.PreDrawResourceDisplay(preparedSnapshot, this, false, ref color, out drawText))
+				goto SkipManaDrawing;
 			isHovered = false;
 			Vector2 vector2 = new Vector2(num3 - 10, num2 + 24);
 			vector2.X += (_maxSegmentCount - _mpSegmentsCount) * _panelMiddleMP.Width();
@@ -91,6 +_,9 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.UnitX;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = Vector2.Zero;
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = ManaPanels;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			resourceDrawSettings = default(ResourceDrawSettings);
 			resourceDrawSettings.ElementCount = _mpSegmentsCount;
@@ -101,8 +_,13 @@
 			resourceDrawSettings.OffsetPerDrawByTexturePercentile = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchor = Vector2.Zero;
 			resourceDrawSettings.OffsetSpriteAnchorByTexturePercentile = Vector2.Zero;
+			resourceDrawSettings.StatsSnapshot = preparedSnapshot;
+			resourceDrawSettings.DisplaySet = this;
+			resourceDrawSettings.ResourceSetSlot = ManaBars;
 			resourceDrawSettings.Draw(spriteBatch, ref isHovered);
 			_mpHovered = isHovered;
+			SkipManaDrawing:
+			ResourceOverlayLoader.PostDrawResourceDisplay(preparedSnapshot, this, false, color, drawText);
 		}
 
 		private static void DrawManaText(SpriteBatch spriteBatch) {
@@ -128,14 +_,22 @@
 			spriteBatch.DrawString(FontAssets.MouseText.Value, localPlayer.statLife + "/" + localPlayer.statLifeMax2, value + new Vector2(vector.X * 0.5f, 0f), color, 0f, new Vector2(FontAssets.MouseText.Value.MeasureString(localPlayer.statLife + "/" + localPlayer.statLifeMax2).X, 0f), 1f, SpriteEffects.None, 0f);
 		}
 
+		private PlayerStatsSnapshot preparedSnapshot;
+
 		private void PrepareFields(Player player) {
 			PlayerStatsSnapshot playerStatsSnapshot = new PlayerStatsSnapshot(player);
+			// Make drawing use the automatically-clamped AmountOf properties (#HealthManaAPI)
+			_hpSegmentsCount = playerStatsSnapshot.AmountOfLifeHearts;
+			_mpSegmentsCount = playerStatsSnapshot.AmountOfManaStars;
+			/*
 			_hpSegmentsCount = (int)((float)playerStatsSnapshot.LifeMax / playerStatsSnapshot.LifePerSegment);
 			_mpSegmentsCount = (int)((float)playerStatsSnapshot.ManaMax / playerStatsSnapshot.ManaPerSegment);
+			*/
 			_maxSegmentCount = 20;
 			_hpFruitCount = playerStatsSnapshot.LifeFruitCount;
 			_hpPercent = (float)playerStatsSnapshot.Life / (float)playerStatsSnapshot.LifeMax;
 			_mpPercent = (float)playerStatsSnapshot.Mana / (float)playerStatsSnapshot.ManaMax;
+			preparedSnapshot = playerStatsSnapshot;
 		}
 
 		private void LifePanelDrawer(int elementIndex, int firstElementIndex, int lastElementIndex, out Asset<Texture2D> sprite, out Vector2 offset, out float drawScale, out Rectangle? sourceRect) {
@@ -174,7 +_,7 @@
 			FillBarByValues(elementIndex, sprite, _hpSegmentsCount, _hpPercent, out offset, out drawScale, out sourceRect);
 		}
 
-		private static void FillBarByValues(int elementIndex, Asset<Texture2D> sprite, int segmentsCount, float fillPercent, out Vector2 offset, out float drawScale, out Rectangle? sourceRect) {
+		public static void FillBarByValues(int elementIndex, Asset<Texture2D> sprite, int segmentsCount, float fillPercent, out Vector2 offset, out float drawScale, out Rectangle? sourceRect) {
 			sourceRect = null;
 			offset = Vector2.Zero;
 			float num = 1f;
