--- src/TerrariaNetCore/Terraria/GameContent/UI/Chat/ItemTagHandler.cs
+++ src/tModLoader/Terraria/GameContent/UI/Chat/ItemTagHandler.cs
@@ -1,6 +_,9 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using ReLogic.Graphics;
+using System.Linq;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.UI;
 using Terraria.UI.Chat;
 
@@ -24,6 +_,7 @@
 			Main.instance.MouseText(_item.Name, _item.rare, 0);
 		}
 
+		//TODO possibly allow modders to custom draw here
 		public override bool UniqueDraw(bool justCheckingString, out Vector2 size, SpriteBatch spriteBatch, Vector2 position = default(Vector2), Color color = default(Color), float scale = 1f)
 		{
 			float num = 1f;
@@ -37,19 +_,24 @@
 					value.Frame();
 			}
 
+
+			/*
 			num2 *= scale;
 			num *= num2;
 			if (num > 0.75f)
 				num = 0.75f;
+			*/
+			num = scale * 0.75f;
 
+			// removed double application of scale from use of the above local below.
 			if (!justCheckingString && color != Color.Black) {
 				float inventoryScale = Main.inventoryScale;
-				Main.inventoryScale = scale * num;
+				Main.inventoryScale = num;
-				ItemSlot.Draw(spriteBatch, ref _item, 14, position - new Vector2(10f) * scale * num, Color.White);
+				ItemSlot.Draw(spriteBatch, ref _item, 14, position - new Vector2(10f) * num, Color.White);
 				Main.inventoryScale = inventoryScale;
 			}
 
-			size = new Vector2(32f) * scale * num;
+			size = new Vector2(32f) * num;
 			return true;
 		}
 
@@ -59,20 +_,30 @@
 	TextSnippet ITagHandler.Parse(string text, Color baseColor, string options)
 	{
 		Item item = new Item();
-		if (int.TryParse(text, out var result))
+		if (int.TryParse(text, out var result) && result < ItemLoader.ItemCount)
+			item.netDefaults(result);
+
+		// Add support for [i:ModItem.FullName] ([i:ExampleMod/ExampleItem]). Coincidentally support [i:ItemID.FieldName] ([i:GoldBar])
+		if(ID.ItemID.Search.TryGetId(text, out result))
 			item.netDefaults(result);
 
 		if (item.type <= 0)
 			return new TextSnippet(text);
 
 		item.stack = 1;
+		// options happen here, we add MID (=ModItemData) options
 		if (options != null) {
+			// don't know why all these options here in vanilla,
+			// since it only assumed one option (stack OR prefix, since prefixed items don't stack)
 			string[] array = options.Split(',');
 			for (int i = 0; i < array.Length; i++) {
 				if (array[i].Length == 0)
 					continue;
 
 				switch (array[i][0]) {
+					case 'd': // MID is present, we will override
+						item = ItemIO.FromBase64(array[i].Substring(1));
+						break;
 					case 's':
 					case 'x': {
 						if (int.TryParse(array[i].Substring(1), out var result3))
@@ -82,7 +_,7 @@
 					}
 					case 'p': {
 						if (int.TryParse(array[i].Substring(1), out var result2))
-							item.Prefix((byte)Utils.Clamp(result2, 0, 85));
+							item.Prefix((byte)Utils.Clamp(result2, 0, PrefixLoader.PrefixCount));
 
 						break;
 					}
@@ -101,14 +_,26 @@
 		};
 	}
 
+	// we do not alter vanilla ways of doing things
+	// this can lead to trouble in future patches
 	public static string GenerateTag(Item I)
 	{
 		string text = "[i";
+		// assuming we have modded data, simply write the item as base64
+		// do not write other option, base64 holds all the info.
+		if (I.ModItem != null || I.globalItems.Any()) {
+			text = text + "/d" + ItemIO.ToBase64(I);
+
+			goto End;
+		}
+
 		if (I.prefix != 0)
 			text = text + "/p" + I.prefix;
 
 		if (I.stack != 1)
 			text = text + "/s" + I.stack;
+
+		End:
 
 		return text + ":" + I.netID + "]";
 	}
