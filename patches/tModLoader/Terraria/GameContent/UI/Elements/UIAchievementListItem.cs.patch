--- src/Terraria/Terraria/GameContent/UI/Elements/UIAchievementListItem.cs
+++ src/tModLoader/Terraria/GameContent/UI/Elements/UIAchievementListItem.cs
@@ -4,6 +_,7 @@
 using System;
 using Terraria.Achievements;
 using Terraria.Localization;
+using Terraria.ModLoader;
 using Terraria.UI;
 using Terraria.UI.Chat;
 
@@ -39,6 +_,7 @@
 			Width.Set(0f, 1f);
 			PaddingTop = 8f;
 			PaddingLeft = 9f;
+			if (achievement.Texture == Achievement.VanillaTextureIndicator) {
 			int num4 = _iconIndex = Main.Achievements.GetIconIndex(achievement.Name);
 			_iconFrameUnlocked = new Rectangle(num4 % 8 * 66, num4 / 8 * 66, 64, 64);
 			_iconFrameLocked = _iconFrameUnlocked;
@@ -49,6 +_,16 @@
 			_achievementIcon.Left.Set(num2, 0f);
 			_achievementIcon.Top.Set(num3, 0f);
 			Append(_achievementIcon);
+			}
+			else {
+				_iconFrameUnlocked = new Rectangle(0, 0, 64, 64);
+				_iconFrameLocked = new Rectangle(66, 0, 64, 64);
+				_iconFrame = _iconFrameLocked;
+				UpdateIconFrame();
+				_achievementIcon = new UIImageFramed(ModContent.Request<Texture2D>(achievement.Texture, AssetRequestMode.ImmediateLoad), _iconFrame);
+				_achievementIcon.Left.Set(num2, 0f);
+				_achievementIcon.Top.Set(num3, 0f);
+			}
 			_achievementIconBorders = new UIImage(Main.Assets.Request<Texture2D>("Images/UI/Achievement_Borders"));
 			_achievementIconBorders.Left.Set(-4f + num2, 0f);
 			_achievementIconBorders.Top.Set(-4f + num3, 0f);
@@ -72,9 +_,9 @@
 			CalculatedStyle dimensions = _achievementIconBorders.GetDimensions();
 			float num2 = dimensions.X + dimensions.Width;
 			Vector2 value2 = new Vector2(num2 + 7f, innerDimensions.Y);
-			Tuple<decimal, decimal> trackerValues = GetTrackerValues();
+			IAchievementTracker trackerValues = GetTrackerValues();
 			bool flag = false;
-			if ((!(trackerValues.Item1 == 0m) || !(trackerValues.Item2 == 0m)) && _locked)
+			if (trackerValues != null && _locked)
 				flag = true;
 
 			float num3 = innerDimensions.Width - dimensions.Width + 1f - (float)(num * 2);
@@ -111,10 +_,10 @@
 			ChatManager.DrawColorCodedStringWithShadow(spriteBatch, FontAssets.ItemStack.Value, text, position, value4, 0f, Vector2.Zero, baseScale2);
 			if (flag) {
 				Vector2 vector2 = vector + Vector2.UnitX * num3 + Vector2.UnitY;
-				string text2 = (int)trackerValues.Item1 + "/" + (int)trackerValues.Item2;
+				string text2 = trackerValues.GetProgressText(); // (int)trackerValues.Item1 + "/" + (int)trackerValues.Item2;
 				Vector2 baseScale3 = new Vector2(0.75f);
 				Vector2 stringSize2 = ChatManager.GetStringSize(FontAssets.ItemStack.Value, text2, baseScale3);
-				float progress = (float)(trackerValues.Item1 / trackerValues.Item2);
+				float progress = trackerValues.GetProgress(); // (float)(trackerValues.Item1 / trackerValues.Item2);
 				float num5 = 80f;
 				Color color2 = new Color(100, 255, 100);
 				if (!base.IsMouseHovering)
@@ -166,11 +_,11 @@
 
 		public Achievement GetAchievement() => _achievement;
 
-		private Tuple<decimal, decimal> GetTrackerValues() {
-			if (!_achievement.HasTracker)
-				return Tuple.Create(0m, 0m);
+		private IAchievementTracker GetTrackerValues() {
+			//if (!_achievement.HasTracker)
+				return _achievement.Tracker; // Tuple.Create(0m, 0m);
 
-			IAchievementTracker tracker = _achievement.GetTracker();
+			/*IAchievementTracker tracker = _achievement.GetTracker();
 			if (tracker.GetTrackerType() == TrackerType.Int) {
 				AchievementTracker<int> achievementTracker = (AchievementTracker<int>)tracker;
 				return Tuple.Create((decimal)achievementTracker.Value, (decimal)achievementTracker.MaxValue);
@@ -181,7 +_,7 @@
 				return Tuple.Create((decimal)achievementTracker2.Value, (decimal)achievementTracker2.MaxValue);
 			}
 
-			return Tuple.Create(0m, 0m);
+			return tracker; // Tuple.Create(0m, 0m);*/
 		}
 
 		private void DrawProgressBar(SpriteBatch spriteBatch, float progress, Vector2 spot, float Width = 169f, Color BackColor = default(Color), Color FillingColor = default(Color), Color BlipColor = default(Color)) {
@@ -225,7 +_,7 @@
 			if (!_achievement.IsCompleted && uIAchievementListItem._achievement.IsCompleted)
 				return 1;
 
-			return _achievement.Id.CompareTo(uIAchievementListItem._achievement.Id);
+			return string.Compare(_achievement.Name, uIAchievementListItem._achievement.Name, StringComparison.Ordinal);
 		}
 	}
 }
