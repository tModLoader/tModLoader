--- src/TerrariaNetCore/Terraria/GameContent/UI/States/UICharacterSelect.cs
+++ src/tModLoader/Terraria/GameContent/UI/States/UICharacterSelect.cs
@@ -11,12 +_,15 @@
 using Terraria.Localization;
 using Terraria.UI;
 using Terraria.UI.Gamepad;
+using Terraria.ModLoader;
+using System.IO;
+using System.Threading.Tasks;
 
 namespace Terraria.GameContent.UI.States
 {
 	public class UICharacterSelect : UIState
 	{
-		private UIList _playerList;
+		internal UIList _playerList;
 		private UITextPanel<LocalizedText> _backPanel;
 		private UITextPanel<LocalizedText> _newPanel;
 		private UIPanel _containerPanel;
@@ -24,6 +_,7 @@
 		private bool _isScrollbarAttached;
 		private List<Tuple<string, bool>> favoritesCache = new List<Tuple<string, bool>>();
 		private bool skipDraw;
+		private static bool _currentlyMigratingFiles;
 
 		public override void OnInitialize() {
 			UIElement uIElement = new UIElement();
@@ -141,6 +_,67 @@
 			int num = 0;
 			foreach (PlayerFileData item in list) {
 				_playerList.Add(new UICharacterListItem(item, num++));
+			}
+
+			if (list.Count == 0) {
+				string vanillaPlayersPath = Path.Combine(ReLogic.OS.Platform.Get<ReLogic.OS.IPathService>().GetStoragePath("Terraria"), "Players");
+				if (Directory.Exists(vanillaPlayersPath) && Directory.GetFiles(vanillaPlayersPath, "*.plr").Any()) {
+					var autoMigrateButton = new UIPanel();
+					autoMigrateButton.Width.Set(0, 1);
+					autoMigrateButton.Height.Set(50, 0);
+					var migrateText = new UIText(!_currentlyMigratingFiles
+						? Language.GetText("tModLoader.MigratePlayersText")
+						: Language.GetText("tModLoader.MigratingWorldsText")); // use the same as worlds intentional
+
+					autoMigrateButton.OnClick += (a, b) => {
+						if (!_currentlyMigratingFiles) {
+							_currentlyMigratingFiles = true;
+							migrateText.SetText(Language.GetText("tModLoader.MigratingWorldsText"));
+							Task.Factory.StartNew(() => {
+								var vanillaPlayerFiles = Directory.GetFiles(vanillaPlayersPath, "*.*")
+									.Where(s => s.EndsWith(".plr") || s.EndsWith(".tplr") || s.EndsWith(".bak"));
+
+								foreach (string file in vanillaPlayerFiles) {
+									File.Copy(file, Path.Combine(Main.PlayerPath, Path.GetFileName(file)), true); // old .bak files might exist, need to have overwrite
+								}
+
+								// Copy map files
+								foreach (string mapDir in Directory.GetDirectories(vanillaPlayersPath)) {
+									var mapFiles = Directory.GetFiles(mapDir, "*.*")
+										.Where(s => s.EndsWith(".map") || s.EndsWith(".tmap"));
+
+									try {
+										foreach (string mapFile in mapFiles) {
+											string mapFileDir = Path.Combine(Main.PlayerPath, Directory.GetParent(mapFile).Name);
+											Directory.CreateDirectory(mapFileDir);
+											File.Copy(mapFile, Path.Combine(mapFileDir, Path.GetFileName(mapFile)), true);
+										}
+									}
+									catch (Exception e) {
+										Logging.tML.Error(Language.GetText("tModLoader.MigratePlayersException"), e);
+									}
+
+								}
+
+								_currentlyMigratingFiles = false;
+								Main.menuMode = 1;
+							}, TaskCreationOptions.PreferFairness);
+						}
+					};
+
+					autoMigrateButton.Append(migrateText);
+					_playerList.Add(autoMigrateButton);
+					var noPlayersMessage = new UIText(Language.GetText("tModLoader.MigratePlayersMessage"));
+					noPlayersMessage.Width.Set(0, 1);
+					noPlayersMessage.Height.Set(200, 0);
+					noPlayersMessage.MarginTop = 20f;
+					noPlayersMessage.OnClick += (a, b) => {
+						Utils.OpenFolder(Main.PlayerPath);
+						Utils.OpenFolder(vanillaPlayersPath);
+					};
+
+					_playerList.Add(noPlayersMessage);
+				}
 			}
 		}
 
