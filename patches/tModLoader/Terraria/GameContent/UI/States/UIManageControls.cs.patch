--- src/TerrariaNetCore/Terraria/GameContent/UI/States/UIManageControls.cs
+++ src/tModLoader/Terraria/GameContent/UI/States/UIManageControls.cs
@@ -11,12 +_,14 @@
 using Terraria.ID;
 using Terraria.Initializers;
 using Terraria.Localization;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Config.UI;
 using Terraria.UI;
 using Terraria.UI.Gamepad;
 
 namespace Terraria.GameContent.UI.States;
 
-public class UIManageControls : UIState
+public partial class UIManageControls : UIState
 {
 	public static int ForceMoveTo = -1;
 	private const float PanelTextureHeight = 30f;
@@ -215,6 +_,10 @@
 		List<string> bindings = new List<string> {
 			"MouseLeft",
 			"MouseRight",
+			// Extra mouse buttons support
+			TriggerNames.MouseMiddle,
+			TriggerNames.MouseXButton1,
+			TriggerNames.MouseXButton2,
 			"Up",
 			"Down",
 			"Left",
@@ -242,6 +_,10 @@
 		List<string> bindings2 = new List<string> {
 			"MouseLeft",
 			"MouseRight",
+			// Extra mouse buttons support
+			TriggerNames.MouseMiddle,
+			TriggerNames.MouseXButton1,
+			TriggerNames.MouseXButton2,
 			"Up",
 			"Down",
 			"Left",
@@ -313,6 +_,8 @@
 			"sp19",
 			"sp13"
 		};
+		
+		OnAssembleBindPanels();
 
 		InputMode currentInputMode = InputMode.Keyboard;
 		_bindsKeyboard.Add(CreateBindingGroup(0, bindings, currentInputMode));
@@ -334,6 +_,8 @@
 		_bindsGamepadUI.Add(CreateBindingGroup(2, bindings3, currentInputMode));
 		_bindsGamepadUI.Add(CreateBindingGroup(3, bindings5, currentInputMode));
 		_bindsGamepadUI.Add(CreateBindingGroup(4, bindings6, currentInputMode));
+
+		AddModBindingGroups();
 	}
 
 	private UISortableElement CreateBindingGroup(int elementIndex, List<string> bindings, InputMode currentInputMode)
@@ -372,6 +_,10 @@
 			case 4:
 				uIPanel.BackgroundColor = Color.Lerp(uIPanel.BackgroundColor, Color.Turquoise, 0.18f);
 				break;
+			// Color for mod-introduced keybinds.
+			case TmlBindingGroupId:
+				uIPanel.BackgroundColor = Color.Lerp(uIPanel.BackgroundColor, Color.Yellow, 0.18f);
+				break;
 		}
 
 		CreateElementGroup(uIList, bindings, currentInputMode, uIPanel.BackgroundColor);
@@ -393,6 +_,10 @@
 			case 4:
 				text = Lang.menu[198];
 				break;
+			// Text for mod-introduced keybinds.
+			case TmlBindingGroupId:
+				text = Language.GetText("tModLoader.ModControls");
+				break;
 		}
 
 		UITextPanel<LocalizedText> element = new UITextPanel<LocalizedText>(text, 0.7f) {
@@ -436,6 +_,16 @@
 				continue;
 			}
 
+			// TML code.
+			if (_ModNames.Contains(bindings[i])) {
+				UIElement header = new HeaderElement(bindings[i]);
+				header.Width.Set(0f, 1f);
+				header.Height.Set(0f, 1f);
+				header.SetSnapPoint("Wide", SnapPointIndex++);
+				uISortableElement.Append(header);
+				continue;
+			}
+
 			UIElement uIElement3 = CreatePanel(bindings[i], currentInputMode, color);
 			uIElement3.Width.Set(-5f, 0.5f);
 			uIElement3.Height.Set(0f, 1f);
@@ -619,12 +_,26 @@
 					}
 				}, 1008, color);
 			default:
+				var tmlResult = HandlePanelCreation(bind, currentInputMode, color);
+				
+				if (tmlResult != null) {
+					return tmlResult;
+				}
+
 				return new UIKeybindingListItem(bind, currentInputMode, color);
 		}
 	}
 
 	public override void OnActivate()
 	{
+		//TODO: Only if new mod controls -- seems to be cause of bug on reload.
+		_bindsKeyboard.Clear();
+		_bindsGamepad.Clear();
+		_bindsKeyboardUI.Clear();
+		_bindsGamepadUI.Clear();
+		AssembleBindPanels();
+		FillList();
+
 		if (Main.gameMenu) {
 			_outerContainer.Top.Set(220f, 0f);
 			_outerContainer.Height.Set(-220f, 1f);
