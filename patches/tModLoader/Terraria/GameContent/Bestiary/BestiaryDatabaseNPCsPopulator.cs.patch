--- src/TerrariaNetCore/Terraria/GameContent/Bestiary/BestiaryDatabaseNPCsPopulator.cs
+++ src/tModLoader/Terraria/GameContent/Bestiary/BestiaryDatabaseNPCsPopulator.cs
@@ -2,6 +_,7 @@
 using System.Linq;
 using Microsoft.Xna.Framework;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.Bestiary;
 
@@ -213,7 +_,19 @@
 				SpawnConditions.Biomes.SolarPillar,
 				SpawnConditions.Biomes.VortexPillar,
 				SpawnConditions.Biomes.StardustPillar
-			};
+			}
+			// Modifications by TML:
+			.Concat(
+				ModLoader.ModLoader.Mods
+				.Where(mod => NPCLoader.npcs.Any(npc => npc.Mod == mod))
+				.Select(mod => mod.ModSourceBestiaryInfoElement)
+			)
+			.Concat(
+				LoaderManager.Get<BiomeLoader>().list
+				.Where(biome => NPCLoader.npcs.Any(npc => npc.SpawnModBiomes.Contains(biome.Type)))
+				.Select(biome => biome.ModBiomeBestiaryInfoElement)
+			)
+			.ToList();
 		}
 	}
 
@@ -288,9 +_,10 @@
 		public const int ItemSpawn = 61;
 	}
 
-	private BestiaryDatabase _currentDatabase;
+	private static BestiaryDatabase _currentDatabase;
 
-	private BestiaryEntry FindEntryByNPCID(int npcNetId) => _currentDatabase.FindEntryByNPCID(npcNetId);
+	public static BestiaryEntry FindEntryByNPCID(int npcNetId) => _currentDatabase.FindEntryByNPCID(npcNetId);
+
 	private BestiaryEntry Register(BestiaryEntry entry) => _currentDatabase.Register(entry);
 	private IBestiaryEntryFilter Register(IBestiaryEntryFilter filter) => _currentDatabase.Register(filter);
 
@@ -580,6 +_,10 @@
 
 	private void AddTownNPCs_Manual()
 	{
+		// Town NPCs are loaded automatically now so it just returns.
+		return;
+		
+		/*
 		Register(BestiaryEntry.TownNPC(22));
 		Register(BestiaryEntry.TownNPC(17));
 		Register(BestiaryEntry.TownNPC(18));
@@ -620,6 +_,7 @@
 		Register(BestiaryEntry.TownNPC(682));
 		Register(BestiaryEntry.TownNPC(683));
 		Register(BestiaryEntry.TownNPC(684));
+		*/
 	}
 
 	private void AddMultiEntryNPCS_Manual()
@@ -629,13 +_,19 @@
 
 	private void AddEmptyEntries_CrittersAndEnemies_Automated()
 	{
+		BestiaryEntry bestiaryEntry;
 		HashSet<int> exclusions = GetExclusions();
+
 		foreach (KeyValuePair<int, NPC> item in ContentSamples.NpcsByNetId) {
-			if (!exclusions.Contains(item.Key) && !item.Value.isLikeATownNPC) {
+			if (!exclusions.Contains(item.Key)) {
 				if (item.Value.CountsAsACritter)
-					Register(BestiaryEntry.Critter(item.Key));
+					bestiaryEntry = Register(BestiaryEntry.Critter(item.Key));
+				else if (item.Value.isLikeATownNPC)
+					bestiaryEntry = Register(BestiaryEntry.TownNPC(item.Key));
 				else
-					Register(BestiaryEntry.Enemy(item.Key));
+					bestiaryEntry = Register(BestiaryEntry.Enemy(item.Key));
+
+				NPCLoader.SetBestiary(item.Value, _currentDatabase, bestiaryEntry);
 			}
 		}
 	}
