--- src/TerrariaNetCore/Terraria/GameContent/ItemDropRules/OneFromRulesRule.cs
+++ src/tModLoader/Terraria/GameContent/ItemDropRules/OneFromRulesRule.cs
@@ -1,3 +_,4 @@
+using System;
 using System.Collections.Generic;
 
 namespace Terraria.GameContent.ItemDropRules;
@@ -6,14 +_,24 @@
 {
 	public IItemDropRule[] options;
 	public int chanceDenominator;
+	public int chanceNumerator; // Added by TML.
 
 	public List<IItemDropRuleChainAttempt> ChainedRules { get; private set; }
 
 	public OneFromRulesRule(int chanceDenominator, params IItemDropRule[] options)
+		: this(chanceDenominator, 1, options) { }
+
+	// Overload added by TML, above turned into a redirect to this.
+	public OneFromRulesRule(int chanceDenominator, int chanceNumerator, params IItemDropRule[] options)
 	{
 		this.chanceDenominator = chanceDenominator;
+		this.chanceNumerator = chanceNumerator;
 		this.options = options;
 		ChainedRules = new List<IItemDropRuleChainAttempt>();
+
+		if (chanceNumerator > chanceDenominator) {
+			throw new ArgumentOutOfRangeException(nameof(chanceNumerator), $"{nameof(chanceNumerator)} must be lesser or equal to {nameof(chanceDenominator)}.");
+		}
 	}
 
 	public bool CanDrop(DropAttemptInfo info) => true;
@@ -29,7 +_,11 @@
 	{
 		int num = -1;
 		ItemDropAttemptResult result;
+		/*
 		if (info.rng.Next(chanceDenominator) == 0) {
+		*/
+
+		if (info.rng.Next(chanceDenominator) < chanceNumerator) {
 			num = info.rng.Next(options.Length);
 			resolveAction(options[num], info);
 			result = default(ItemDropAttemptResult);
@@ -44,9 +_,14 @@
 
 	public void ReportDroprates(List<DropRateInfo> drops, DropRateInfoChainFeed ratesInfo)
 	{
+		//TML: chanceNumerator inserted in place of '1.0'. Fix double application of ratesInfo.parentDroprateChance
+		float num = chanceNumerator / (float)chanceDenominator;
+		float multiplier = 1f / (float)options.Length * num;
+		/*
 		float num = 1f / (float)chanceDenominator;
 		float num2 = num * ratesInfo.parentDroprateChance;
 		float multiplier = 1f / (float)options.Length * num2;
+		*/
 		for (int i = 0; i < options.Length; i++) {
 			options[i].ReportDroprates(drops, ratesInfo.With(multiplier));
 		}
