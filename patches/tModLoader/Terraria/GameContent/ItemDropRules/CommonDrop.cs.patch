--- src/TerrariaNetCore/Terraria/GameContent/ItemDropRules/CommonDrop.cs
+++ src/tModLoader/Terraria/GameContent/ItemDropRules/CommonDrop.cs
@@ -1,8 +_,11 @@
+using System;
 using System.Collections.Generic;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.ItemDropRules;
 
+// TML: Made to inherit BaseItemDropRule instead of IItemDropRule
-public class CommonDrop : IItemDropRule
+public class CommonDrop : BaseItemDropRule
 {
 	public int itemId;
 	public int chanceDenominator;
@@ -10,25 +_,30 @@
 	public int amountDroppedMaximum;
 	public int chanceNumerator;
 
-	public List<IItemDropRuleChainAttempt> ChainedRules { get; private set; }
+	// public List<IItemDropRuleChainAttempt> ChainedRules { get; private set; }
 
 	public CommonDrop(int itemId, int chanceDenominator, int amountDroppedMinimum = 1, int amountDroppedMaximum = 1, int chanceNumerator = 1)
 	{
+		if (amountDroppedMinimum > amountDroppedMaximum) {
+			throw new ArgumentOutOfRangeException(nameof(amountDroppedMinimum), $"{nameof(amountDroppedMinimum)} must be lesser or equal to {nameof(amountDroppedMaximum)}.");
+		}
+
 		this.itemId = itemId;
 		this.chanceDenominator = chanceDenominator;
 		this.amountDroppedMinimum = amountDroppedMinimum;
 		this.amountDroppedMaximum = amountDroppedMaximum;
 		this.chanceNumerator = chanceNumerator;
-		ChainedRules = new List<IItemDropRuleChainAttempt>();
+		// ChainedRules = new List<IItemDropRuleChainAttempt>();
 	}
 
-	public virtual bool CanDrop(DropAttemptInfo info) => true;
+	// public virtual bool CanDrop(DropAttemptInfo info) => true;
 
+	// TML: override instead of virtual
-	public virtual ItemDropAttemptResult TryDroppingItem(DropAttemptInfo info)
+	public override ItemDropAttemptResult TryDroppingItem(DropAttemptInfo info)
 	{
 		ItemDropAttemptResult result;
 		if (info.player.RollLuck(chanceDenominator) < chanceNumerator) {
-			CommonCode.DropItemFromNPC(info.npc, itemId, info.rng.Next(amountDroppedMinimum, amountDroppedMaximum + 1));
+			CommonCode.DropItem(info, itemId, info.rng.Next(amountDroppedMinimum, amountDroppedMaximum + 1));
 			result = default(ItemDropAttemptResult);
 			result.State = ItemDropAttemptResultState.Success;
 			return result;
@@ -39,7 +_,8 @@
 		return result;
 	}
 
+	// TML: override instead of virtual
-	public virtual void ReportDroprates(List<DropRateInfo> drops, DropRateInfoChainFeed ratesInfo)
+	public override void ReportDroprates(List<DropRateInfo> drops, DropRateInfoChainFeed ratesInfo)
 	{
 		float num = (float)chanceNumerator / (float)chanceDenominator;
 		float dropRate = num * ratesInfo.parentDroprateChance;
