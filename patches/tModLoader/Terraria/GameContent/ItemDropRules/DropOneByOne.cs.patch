--- src/TerrariaNetCore/Terraria/GameContent/ItemDropRules/DropOneByOne.cs
+++ src/tModLoader/Terraria/GameContent/ItemDropRules/DropOneByOne.cs
@@ -1,3 +_,4 @@
+using System;
 using System.Collections.Generic;
 
 namespace Terraria.GameContent.ItemDropRules;
@@ -19,11 +_,21 @@
 	}
 
 	public int itemId;
-	public Parameters parameters;
+	public Parameters parameters { get; private init; }
 
 	public List<IItemDropRuleChainAttempt> ChainedRules { get; private set; }
 
 	public DropOneByOne(int itemId, Parameters parameters) {
+		if (parameters.MinimumItemDropsCount > parameters.MaximumItemDropsCount) {
+			throw new ArgumentException($"{nameof(parameters.MinimumItemDropsCount)} must be lesser or equal to {nameof(parameters.MaximumItemDropsCount)}.", nameof(parameters));
+		}
+		if (parameters.MinimumStackPerChunkBase > parameters.MaximumStackPerChunkBase) {
+			throw new ArgumentException($"{nameof(parameters.MinimumStackPerChunkBase)} must be lesser or equal to {nameof(parameters.MaximumStackPerChunkBase)}.", nameof(parameters));
+		}
+		if (parameters.BonusMinDropsPerChunkPerPlayer > parameters.BonusMaxDropsPerChunkPerPlayer) {
+			throw new ArgumentException($"{nameof(parameters.BonusMinDropsPerChunkPerPlayer)} must be lesser or equal to {nameof(parameters.BonusMaxDropsPerChunkPerPlayer)}.", nameof(parameters));
+		}
+
 		ChainedRules = new List<IItemDropRuleChainAttempt>();
 		this.parameters = parameters;
 		this.itemId = itemId;
@@ -37,7 +_,7 @@
 			int minValue = parameters.MinimumStackPerChunkBase + activePlayersCount * parameters.BonusMinDropsPerChunkPerPlayer;
 			int num2 = parameters.MaximumStackPerChunkBase + activePlayersCount * parameters.BonusMaxDropsPerChunkPerPlayer;
 			for (int i = 0; i < num; i++) {
-				CommonCode.DropItemFromNPC(info.npc, itemId, info.rng.Next(minValue, num2 + 1), scattered: true);
+				CommonCode.DropItem(info, itemId, info.rng.Next(minValue, num2 + 1), scattered: true);
 			}
 
 			result = default(ItemDropAttemptResult);
