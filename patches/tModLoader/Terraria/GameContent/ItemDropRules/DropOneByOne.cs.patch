--- src/TerrariaNetCore/Terraria/GameContent/ItemDropRules/DropOneByOne.cs
+++ src/tModLoader/Terraria/GameContent/ItemDropRules/DropOneByOne.cs
@@ -1,8 +_,11 @@
+using System;
 using System.Collections.Generic;
+using Terraria.ModLoader;
 
 namespace Terraria.GameContent.ItemDropRules;
 
+// TML: Made to inherit BaseItemDropRule instead of IItemDropRule
-public class DropOneByOne : IItemDropRule
+public class DropOneByOne : BaseItemDropRule
 {
 	public struct Parameters
 	{
@@ -19,18 +_,33 @@
 	}
 
 	public int itemId;
-	public Parameters parameters;
+	
+	//TML: Turned from a field into an autoproperty.
+	public Parameters parameters { get; private init; }
 
-	public List<IItemDropRuleChainAttempt> ChainedRules { get; private set; }
+	// public List<IItemDropRuleChainAttempt> ChainedRules { get; private set; }
 
 	public DropOneByOne(int itemId, Parameters parameters)
 	{
+		if (parameters.MinimumItemDropsCount > parameters.MaximumItemDropsCount) {
+			throw new ArgumentException($"{nameof(parameters.MinimumItemDropsCount)} must be lesser or equal to {nameof(parameters.MaximumItemDropsCount)}.", nameof(parameters));
+		}
+
+		if (parameters.MinimumStackPerChunkBase > parameters.MaximumStackPerChunkBase) {
+			throw new ArgumentException($"{nameof(parameters.MinimumStackPerChunkBase)} must be lesser or equal to {nameof(parameters.MaximumStackPerChunkBase)}.", nameof(parameters));
+		}
+
+		if (parameters.BonusMinDropsPerChunkPerPlayer > parameters.BonusMaxDropsPerChunkPerPlayer) {
+			throw new ArgumentException($"{nameof(parameters.BonusMinDropsPerChunkPerPlayer)} must be lesser or equal to {nameof(parameters.BonusMaxDropsPerChunkPerPlayer)}.", nameof(parameters));
+		}
+
-		ChainedRules = new List<IItemDropRuleChainAttempt>();
+		// ChainedRules = new List<IItemDropRuleChainAttempt>();
 		this.parameters = parameters;
 		this.itemId = itemId;
 	}
 
+	// TML: Added override
-	public ItemDropAttemptResult TryDroppingItem(DropAttemptInfo info)
+	public override ItemDropAttemptResult TryDroppingItem(DropAttemptInfo info)
 	{
 		ItemDropAttemptResult result;
 		if (info.player.RollLuck(parameters.ChanceDenominator) < parameters.ChanceNumerator) {
@@ -39,7 +_,7 @@
 			int minValue = parameters.MinimumStackPerChunkBase + activePlayersCount * parameters.BonusMinDropsPerChunkPerPlayer;
 			int num2 = parameters.MaximumStackPerChunkBase + activePlayersCount * parameters.BonusMaxDropsPerChunkPerPlayer;
 			for (int i = 0; i < num; i++) {
-				CommonCode.DropItemFromNPC(info.npc, itemId, info.rng.Next(minValue, num2 + 1), scattered: true);
+				CommonCode.DropItem(info, itemId, info.rng.Next(minValue, num2 + 1), scattered: true);
 			}
 
 			result = default(ItemDropAttemptResult);
@@ -52,7 +_,8 @@
 		return result;
 	}
 
+	// TML: Added override
-	public void ReportDroprates(List<DropRateInfo> drops, DropRateInfoChainFeed ratesInfo)
+	public override void ReportDroprates(List<DropRateInfo> drops, DropRateInfoChainFeed ratesInfo)
 	{
 		float personalDropRate = parameters.GetPersonalDropRate();
 		float dropRate = personalDropRate * ratesInfo.parentDroprateChance;
@@ -60,5 +_,5 @@
 		Chains.ReportDroprates(ChainedRules, personalDropRate, drops, ratesInfo);
 	}
 
-	public bool CanDrop(DropAttemptInfo info) => true;
+	// public bool CanDrop(DropAttemptInfo info) => true;
 }
