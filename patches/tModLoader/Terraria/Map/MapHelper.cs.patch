--- src/TerrariaNetCore/Terraria/Map/MapHelper.cs
+++ src/tModLoader/Terraria/Map/MapHelper.cs
@@ -6,6 +_,8 @@
 using Microsoft.Xna.Framework;
 using Terraria.ID;
 using Terraria.IO;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Social;
 using Terraria.Utilities;
 
@@ -127,6 +_,7 @@
 	public static int[] wallOptionCounts;
 	public static ushort[] tileLookup;
 	public static ushort[] wallLookup;
+	public static ushort[] liquidLookup;
 	private static ushort tilePosition;
 	private static ushort wallPosition;
 	private static ushort liquidPosition;
@@ -134,7 +_,8 @@
 	private static ushort dirtPosition;
 	private static ushort rockPosition;
 	private static ushort hellPosition;
+	internal static ushort modPosition; // Added by TML.
-	private static Color[] colorLookup;
+	internal static Color[] colorLookup;
 	private static ushort[] snowTypes;
 	private static ushort wallRangeStart;
 	private static ushort wallRangeEnd;
@@ -1579,7 +_,10 @@
 
 		wallRangeEnd = num20;
 		liquidPosition = num20;
+		liquidLookup = new ushort[LiquidID.Count];
-		for (int num25 = 0; num25 < 4; num25++) {
+		for (int num25 = 0; num25 < LiquidID.Count; num25++) {
+			_ = array3[num25];
+			liquidLookup[num25] = num20;
 			colorLookup[num20] = array3[num25];
 			num20 = (ushort)(num20 + 1);
 		}
@@ -1604,6 +_,7 @@
 
 		hellPosition = num20;
 		colorLookup[num20] = color10;
+		modPosition = (ushort)(num20 + 1); // Added by TML.
 		snowTypes = new ushort[6];
 		snowTypes[0] = tileLookup[147];
 		snowTypes[1] = tileLookup[161];
@@ -1747,9 +_,9 @@
 
 			if (tile.liquid > 32) {
 				int num5 = tile.liquidType();
-				num3 = liquidPosition + num5;
+				num3 = liquidLookup[num5];
 			}
-			else if (!tile.invisibleWall() && tile.wall > 0 && tile.wall < WallID.Count) {
+			else if (!tile.invisibleWall() && tile.wall > 0 && tile.wall < WallLoader.WallCount) {
 				int wall = tile.wall;
 				num3 = wallLookup[wall];
 				num = tile.wallColor();
@@ -1778,6 +_,7 @@
 		if (num3 == 0) {
 			if ((double)j < Main.worldSurface) {
 				if (Main.remixWorld) {
+					// Patch note: num2, used below.
 					num2 = 5;
 					num3 = 100;
 				}
@@ -1821,12 +_,18 @@
 
 				num3 = ((!((double)j < Main.rockLayer)) ? (rockPosition + b) : (dirtPosition + b));
 			}
+			// Extra patch context.
 			else {
 				num3 = hellPosition;
 			}
 		}
 
+		/*
 		return MapTile.Create((ushort)(num3 + baseOption), (byte)num2, (byte)num);
+		*/
+		ushort mapType = (ushort)(num3 + baseOption);
+		MapLoader.ModMapOption(ref mapType, i, j);
+		return MapTile.Create(mapType, (byte)num2, (byte)num);
 	}
 
 	public static void GetTileBaseOption(int x, int y, int tileType, Tile tileCache, ref int baseOption)
@@ -2528,7 +_,7 @@
 			binaryWriter.Write(Main.maxTilesX);
 			binaryWriter.Write((short)TileID.Count);
 			binaryWriter.Write((short)WallID.Count);
-			binaryWriter.Write((short)4);
+			binaryWriter.Write((short)LiquidID.Count);
 			binaryWriter.Write((short)256);
 			binaryWriter.Write((short)256);
 			binaryWriter.Write((short)256);
@@ -2603,7 +_,10 @@
 					byte b6 = 0;
 					int num7;
 					ushort num8;
+					/*
 					if (mapTile.Light <= 18) {
+					*/
+					if (mapTile.Light <= 18 || mapTile.Type >= modPosition) {
 						flag2 = false;
 						flag = false;
 						num7 = 0;
@@ -2761,6 +_,8 @@
 
 			deflateStream.Dispose();
 			FileUtilities.WriteAllBytes(text, memoryStream.ToArray(), isCloudSave);
+
+			MapIO.WriteModFile(text, isCloudSave);
 		}
 
 		noStatusText = false;
@@ -2768,6 +_,7 @@
 
 	public static void LoadMapVersion1(BinaryReader fileIO, int release)
 	{
+		Main.MapFileMetadata = FileMetadata.FromCurrentSettings(FileType.Map); // TML fix. Fix map saving if loading old map file.
 		string text = fileIO.ReadString();
 		int num = fileIO.ReadInt32();
 		int num2 = fileIO.ReadInt32();
