--- src/TerrariaNetCore/Terraria/RecipeGroup.cs
+++ src/tModLoader/Terraria/RecipeGroup.cs
@@ -13,6 +_,8 @@
 	public static Dictionary<string, int> recipeGroupIDs = new Dictionary<string, int>();
 	public static int nextRecipeGroupIndex;
 
+	internal bool[] ValidItemsLookup; // Added by TML.
+
 	public RecipeGroup(Func<string> getName, params int[] validItems) {
 		GetText = getName;
 		ValidItems = new HashSet<int>(validItems);
@@ -20,11 +_,19 @@
 	}
 
 	public static int RegisterGroup(string name, RecipeGroup rec) {
+		// tModLoader: Handle registering to an existing group by merging items and keeping the original group
+		if(recipeGroupIDs.TryGetValue(name, out int existingRecipeGroup)) {
+			recipeGroups[existingRecipeGroup].ValidItems.UnionWith(rec.ValidItems);
+			return existingRecipeGroup;
+		}
+
 		int num = (rec.RegisteredId = nextRecipeGroupIndex++);
 		recipeGroups.Add(num, rec);
 		recipeGroupIDs.Add(name, num);
 		return num;
 	}
+
+	public bool ContainsItem(int type) => ValidItemsLookup?[type] ?? ValidItems.Contains(type);
 
 	public int CountUsableItems(Dictionary<int, int> itemStacksAvailable) {
 		int num = 0;
