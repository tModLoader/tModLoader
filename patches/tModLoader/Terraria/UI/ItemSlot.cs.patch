--- src/TerrariaNetCore/Terraria/UI/ItemSlot.cs
+++ src/tModLoader/Terraria/UI/ItemSlot.cs
@@ -1,6 +_,7 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using System;
+using System.Linq;
 using Terraria.Audio;
 using Terraria.DataStructures;
 using Terraria.GameContent;
@@ -10,12 +_,13 @@
 using Terraria.GameInput;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 using Terraria.UI.Chat;
 using Terraria.UI.Gamepad;
 
 namespace Terraria.UI
 {
-	public class ItemSlot
+	public partial class ItemSlot
 	{
 		public class Options
 		{
@@ -25,6 +_,9 @@
 
 		public class Context
 		{
+			public const int ModdedAccessorySlot = -10;
+			public const int ModdedVanityAccessorySlot = -11;
+			public const int ModdedDyeSlot = -12;
 			public const int InventoryItem = 0;
 			public const int InventoryCoin = 1;
 			public const int InventoryAmmo = 2;
@@ -81,7 +_,7 @@
 
 		public static bool DrawGoldBGForCraftingMaterial;
 		public static bool ShiftForcedOn;
-		private static Item[] singleSlotArray;
+		internal static Item[] singleSlotArray;
 		private static bool[] canFavoriteAt;
 		private static bool[] canShareAt;
 		private static float[] inventoryGlowHue;
@@ -264,7 +_,10 @@
 							case 1:
 							case 2:
 								if (context == 0 && Main.InReforgeMenu) {
+									/*
 									if (item.maxStack == 1 && item.Prefix(-3))
+									*/
+									if (item.IsCandidateForReforge && item.Prefix(-3)) // TML: #StackablePrefixWeapons
 										Main.cursorOverride = 9;
 								}
 								else if (context == 0 && Main.InGuideCraftMenu) {
@@ -322,7 +_,8 @@
 								Main.cursorOverride = 9;
 							}
 							else if (context == 0 && Main.InReforgeMenu) {
-								if (item.maxStack == 1 && item.Prefix(-3))
+								//if (item.maxStack == 1 && item.Prefix(-3))
+								if (item.IsCandidateForReforge && item.Prefix(-3)) // TML: #StackablePrefixWeapons
 									Main.cursorOverride = 9;
 							}
 							else if (context == 0 && Main.InGuideCraftMenu) {
@@ -376,13 +_,17 @@
 		}
 
 		private static bool OverrideLeftClick(Item[] inv, int context = 0, int slot = 0) {
-			if (context == 10 && isEquipLocked(inv[slot].type))
+			if ((context == 10 || context == -10) && isEquipLocked(inv[slot].type))
 				return true;
 
 			if (Main.LocalPlayer.tileEntityAnchor.IsInValidUseTileEntity() && Main.LocalPlayer.tileEntityAnchor.GetTileEntity().OverrideItemSlotLeftClick(inv, context, slot))
 				return true;
 
 			Item item = inv[slot];
+			// TODO: Make this more generalized.
+			if (ShiftInUse && PlayerLoader.ShiftClickSlot(Main.player[Main.myPlayer], inv, context, slot)) {
+				return true;
+			}
 			if (Main.cursorOverride == 2) {
 				if (ChatManager.AddChatText(FontAssets.MouseText.Value, ItemTagHandler.GenerateTag(item), Vector2.One))
 					SoundEngine.PlaySound(12);
@@ -391,7 +_,7 @@
 			}
 
 			if (Main.cursorOverride == 3) {
-				if (!canFavoriteAt[context])
+				if (context < 0 || !canFavoriteAt[context])
 					return false;
 
 				item.favorited = !item.favorited;
@@ -467,13 +_,19 @@
 			int num = PickItemMovementAction(inv, context, slot, Main.mouseItem);
 			if (num != 3 && !flag)
 				return;
+			// Extra context.
 
 			switch (num) {
 				case 0:
 					if (context == 6 && Main.mouseItem.type != 0)
 						inv[slot].SetDefaults();
+					if (new int[6] { -10, -11, -12, 10, 11, 12 }.Contains(context) && !ItemLoader.CanEquipAccessory(inv[slot], slot, context < 0))
+						break;
-					if (context == 11 && !inv[slot].FitsAccessoryVanitySlot)
+					if (context == 11 && !Main.mouseItem.FitsAccessoryVanitySlot)
 						break;
+					if (context < 0 && !LoaderManager.Get<AccessorySlotLoader>().CanAcceptItem(slot, inv[slot], context))
+						break;
+
 					Utils.Swap(ref inv[slot], ref Main.mouseItem);
 					if (inv[slot].stack > 0)
 						AnnounceTransfer(new ItemTransferInfo(inv[slot], 21, context, inv[slot].stack));
@@ -486,6 +_,9 @@
 								break;
 							case 8:
 							case 9:
+							case -10:
+							case -11:
+							case -12:
 							case 10:
 							case 11:
 							case 12:
@@ -499,7 +_,8 @@
 					}
 					if (inv[slot].type == 0 || inv[slot].stack < 1)
 						inv[slot] = new Item();
-					if (Main.mouseItem.IsTheSameAs(inv[slot])) {
+					//if (Main.mouseItem.IsTheSameAs(inv[slot])) {
+					if (Main.mouseItem.IsTheSameAs(inv[slot]) && ItemLoader.CanStack(inv[slot], Main.mouseItem)) {
 						Utils.Swap(ref inv[slot].favorited, ref Main.mouseItem.favorited);
 						if (inv[slot].stack != inv[slot].maxStack && Main.mouseItem.stack != Main.mouseItem.maxStack) {
 							if (Main.mouseItem.stack + inv[slot].stack <= Main.mouseItem.maxStack) {
@@ -526,6 +_,13 @@
 					break;
 				case 1:
 					if (Main.mouseItem.stack == 1 && Main.mouseItem.type > 0 && inv[slot].type > 0 && inv[slot].IsNotTheSameAs(Main.mouseItem) && (context != 11 || Main.mouseItem.FitsAccessoryVanitySlot)) {
+						if (new int[6] { -10, -11, -12, 10, 11, 12 }.Contains(context) && !ItemLoader.CanEquipAccessory(Main.mouseItem, slot, context < 0))
+							break;
+						if (context == 11 && !Main.mouseItem.FitsAccessoryVanitySlot)
+							break;
+						if (context < 0 && !LoaderManager.Get<AccessorySlotLoader>().CanAcceptItem(slot, Main.mouseItem, context))
+							break;
+
 						Utils.Swap(ref inv[slot], ref Main.mouseItem);
 						SoundEngine.PlaySound(7);
 						if (inv[slot].stack > 0) {
@@ -535,6 +_,9 @@
 									break;
 								case 8:
 								case 9:
+								case -10:
+								case -11:
+								case -12:
 								case 10:
 								case 11:
 								case 12:
@@ -561,6 +_,13 @@
 						}
 					}
 					else if (Main.mouseItem.type > 0 && inv[slot].type == 0 && (context != 11 || Main.mouseItem.FitsAccessoryVanitySlot)) {
+						if (new int[6] { -10, -11, -12, 10, 11, 12 }.Contains(context) && !ItemLoader.CanEquipAccessory(Main.mouseItem, slot, context < 0))
+							break;
+						if (context == 11 && !Main.mouseItem.FitsAccessoryVanitySlot)
+							break;
+						if (context < 0 && !LoaderManager.Get<AccessorySlotLoader>().CanAcceptItem(slot, Main.mouseItem, context))
+							break;
+
 						if (Main.mouseItem.stack == 1) {
 							Utils.Swap(ref inv[slot], ref Main.mouseItem);
 							if (inv[slot].type == 0 || inv[slot].stack < 1)
@@ -588,6 +_,9 @@
 									break;
 								case 8:
 								case 9:
+								case -10:
+								case -11:
+								case -12:
 								case 10:
 								case 11:
 								case 12:
@@ -616,6 +_,9 @@
 									break;
 								case 8:
 								case 9:
+								case -10:
+								case -11:
+								case -12:
 								case 10:
 								case 11:
 								case 12:
@@ -669,6 +_,9 @@
 									break;
 								case 8:
 								case 9:
+								case -10:
+								case -11:
+								case -12:
 								case 10:
 								case 11:
 								case 12:
@@ -688,20 +_,26 @@
 					break;
 				case 3:
 					HandleShopSlot(inv, slot, rightClickIsValid: false, leftClickIsValid: true);
+
 					break;
 				case 4: {
+						if (!PlayerLoader.CanSellItem(player, Main.npc[player.talkNPC], inv, Main.mouseItem))
+							break;
+
 						Chest chest = Main.instance.shop[Main.npcShop];
 						if (player.SellItem(Main.mouseItem)) {
-							chest.AddItemToShop(Main.mouseItem);
+							int soldItemIndex = chest.AddItemToShop(Main.mouseItem);
 							Main.mouseItem.SetDefaults();
 							SoundEngine.PlaySound(18);
 							AnnounceTransfer(new ItemTransferInfo(inv[slot], 21, 15));
+							PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 						}
 						else if (Main.mouseItem.value == 0) {
-							chest.AddItemToShop(Main.mouseItem);
+							int soldItemIndex = chest.AddItemToShop(Main.mouseItem);
 							Main.mouseItem.SetDefaults();
 							SoundEngine.PlaySound(7);
 							AnnounceTransfer(new ItemTransferInfo(inv[slot], 21, 15));
+							PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 						}
 
 						Recipe.FindRecipes();
@@ -733,7 +_,10 @@
 			bool flag = false;
 			bool result = false;
 			if (NotUsingGamepad && Options.DisableLeftShiftTrashCan) {
+				/*
 				if ((uint)context <= 4u || context == 7)
+				*/
+				if ((uint)context <= 4u && context >= 0 || context == 7)
 					flag = true;
 
 				if (ControlInUse && flag) {
@@ -742,7 +_,10 @@
 				}
 			}
 			else {
+				/*
 				if ((uint)context <= 4u)
+				*/
+				if ((uint)context <= 4u && context >= 0)
 					flag = (Main.player[Main.myPlayer].chest == -1);
 
 				if (ShiftInUse && flag) {
@@ -761,20 +_,22 @@
 
 			if (Main.npcShop > 0 && !inv[slot].favorited) {
 				Chest chest = Main.instance.shop[Main.npcShop];
-				if (inv[slot].type < 71 || inv[slot].type > 74) {
+				if (inv[slot].type < 71 || inv[slot].type > 74 && PlayerLoader.CanSellItem(player, Main.npc[player.talkNPC], chest.item, inv[slot])) {
 					if (player.SellItem(inv[slot])) {
-						chest.AddItemToShop(inv[slot]);
 						AnnounceTransfer(new ItemTransferInfo(inv[slot], context, 15));
+						int soldItemIndex = chest.AddItemToShop(inv[slot]);
 						inv[slot].TurnToAir();
 						SoundEngine.PlaySound(18);
 						Recipe.FindRecipes();
+						PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 					}
 					else if (inv[slot].value == 0) {
-						chest.AddItemToShop(inv[slot]);
 						AnnounceTransfer(new ItemTransferInfo(inv[slot], context, 15));
+						int soldItemIndex = chest.AddItemToShop(inv[slot]);
 						inv[slot].TurnToAir();
 						SoundEngine.PlaySound(7);
 						Recipe.FindRecipes();
+						PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 					}
 				}
 			}
@@ -911,18 +_,24 @@
 						result = 1;
 					break;
 				case 10:
-					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor, checkItem, slot)))
+					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor.Concat(AccessorySlotLoader.ModSlotPlayer(Main.LocalPlayer).exAccessorySlot).ToArray(), checkItem, slot, context)))
+						result = 1;
+					break;
+				case -10:
+				case -11:
+					if (checkItem.type == 0 || (checkItem.accessory && LoaderManager.Get<AccessorySlotLoader>().ModSlotCheck(checkItem, slot, context)))
 						result = 1;
 					break;
 				case 24:
-					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(inv, checkItem, slot)))
+					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(inv, checkItem, slot, context)))
 						result = 1;
 					break;
 				case 11:
-					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor, checkItem, slot)))
+					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor.Concat(AccessorySlotLoader.ModSlotPlayer(Main.LocalPlayer).exAccessorySlot).ToArray(), checkItem, slot, context)))
 						result = 1;
 					break;
 				case 12:
+				case -12:
 				case 25:
 				case 27:
 					result = 2;
@@ -993,7 +_,8 @@
 				if (context == 4 && inv[slot].maxStack <= 1)
 					flag = false;
 
-				if (flag && (Main.mouseItem.IsTheSameAs(inv[slot]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0)) {
+				//if (flag && (Main.mouseItem.IsTheSameAs(inv[slot]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0)) {
+				if (flag && (Main.mouseItem.IsTheSameAs(inv[slot]) && ItemLoader.CanStack(Main.mouseItem, inv[slot]) || Main.mouseItem.type == 0) && (Main.mouseItem.stack < Main.mouseItem.maxStack || Main.mouseItem.type == 0)) {
 					PickupItemIntoMouse(inv, context, slot, player);
 					SoundEngine.PlaySound(12);
 					RefreshStackSplitCooldown();
@@ -1052,10 +_,12 @@
 			switch (context) {
 				case 0:
 					result = true;
-					if (Main.mouseRight && ((inv[slot].type >= 3318 && inv[slot].type <= 3332) || inv[slot].type == 3860 || inv[slot].type == 3862 || inv[slot].type == 3861 || inv[slot].type == 4782 || inv[slot].type == 4957 || inv[slot].type == 5111)) {
+					if (Main.mouseRight && ((inv[slot].type >= 3318 && inv[slot].type <= 3332) || inv[slot].type == 3860 || inv[slot].type == 3862 || inv[slot].type == 3861 || inv[slot].type == 4782 || inv[slot].type == 4957 || inv[slot].type == 5111 || ItemLoader.IsModBossBag(inv[slot]))) {
 						if (Main.mouseRightRelease) {
 							player.OpenBossBag(inv[slot].type);
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1065,10 +_,12 @@
 							Recipe.FindRecipes();
 						}
 					}
-					else if (Main.mouseRight && inv[slot].type > 0 && inv[slot].type < 5125 && ItemID.Sets.IsFishingCrate[inv[slot].type]) {
+					else if (Main.mouseRight && inv[slot].type > 0 && inv[slot].type < ItemLoader.ItemCount && ItemID.Sets.IsFishingCrate[inv[slot].type]) {
 						if (Main.mouseRightRelease) {
 							player.OpenFishingCrate(inv[slot].type);
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1081,7 +_,10 @@
 					else if (Main.mouseRight && inv[slot].type == 3093) {
 						if (Main.mouseRightRelease) {
 							player.OpenHerbBag(3093);
+
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1145,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 1774) {
 						if (Main.mouseRightRelease) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1158,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 3085) {
 						if (Main.mouseRightRelease && player.ConsumeItem(327)) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1171,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 4879) {
 						if (Main.mouseRightRelease && player.HasItem(329)) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1184,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 1869) {
 						if (Main.mouseRightRelease) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1214,11 +_,15 @@
 
 						Recipe.FindRecipes();
 					}
+					else if (ItemLoader.CanRightClick(inv[slot])) {
+						ItemLoader.RightClick(inv[slot], player);
+					}
 					else {
 						result = false;
 					}
 					break;
 				case 9:
+				case -11:
 				case 11: {
 						result = true;
 						if (!Main.mouseRight || !Main.mouseRightRelease)
@@ -1227,22 +_,25 @@
 						if (Main.npcShop > 0)
 							return true;
 
+						//TML: Going to swap an accessory from the vanity slot in to the functional slot
+						int tSlot = slot - inv.Length / 2;
+
-						if ((inv[slot].type <= 0 || inv[slot].stack <= 0) && (inv[slot - 10].type <= 0 || inv[slot - 10].stack <= 0))
+						if ((inv[slot].type <= 0 || inv[slot].stack <= 0) && (inv[tSlot].type <= 0 || inv[tSlot].stack <= 0))
 							break;
 
-						Item item = inv[slot - 10];
+						Item item = inv[tSlot];
 						bool flag2 = context != 11 || item.FitsAccessoryVanitySlot || item.IsAir;
 						if (flag2 && context == 11 && inv[slot].wingSlot > 0) {
-							for (int i = 3; i < 10; i++) {
-								if (inv[i].wingSlot > 0 && i != slot - 10)
+							for (int i = 0; i < inv.Length / 2; i++) {
+								if (inv[i].wingSlot > 0 && i != tSlot || !ItemLoader.CanAccessoryBeEquippedWith(inv[tSlot], inv[i]))
 									flag2 = false;
 							}
 						}
 
-						if (!flag2)
+						if (!flag2 || !ItemLoader.CanEquipAccessory(inv[slot], tSlot, context < 0))
 							break;
 
-						Utils.Swap(ref inv[slot], ref inv[slot - 10]);
+						Utils.Swap(ref inv[slot], ref inv[tSlot]);
 						SoundEngine.PlaySound(7);
 						Recipe.FindRecipes();
 						if (inv[slot].stack > 0) {
@@ -1266,6 +_,7 @@
 
 						break;
 					}
+				case -12:
 				case 12:
 				case 25:
 				case 27: {
@@ -1310,12 +_,15 @@
 
 			_ = Main.instance.shop[Main.npcShop];
 			bool flag = (Main.mouseRight && rightClickIsValid) || (Main.mouseLeft && leftClickIsValid);
-			if (!(Main.stackSplit <= 1 && flag) || inv[slot].type <= 0 || (!Main.mouseItem.IsTheSameAs(inv[slot]) && Main.mouseItem.type != 0))
+			//if (!(Main.stackSplit <= 1 && flag) || inv[slot].type <= 0 || (!Main.mouseItem.IsTheSameAs(inv[slot]) && Main.mouseItem.type != 0))
+			if (!(Main.stackSplit <= 1 && flag) || inv[slot].type <= 0 || (!(Main.mouseItem.IsTheSameAs(inv[slot]) && ItemLoader.CanStack(Main.mouseItem, inv[slot])) && Main.mouseItem.type != 0))
 				return;
 
 			int num = Main.superFastStack + 1;
 			Player localPlayer = Main.LocalPlayer;
 			for (int i = 0; i < num; i++) {
+				if (!PlayerLoader.CanBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, inv[slot]))
+					continue;
 				if (Main.mouseItem.stack >= Main.mouseItem.maxStack && Main.mouseItem.type != 0)
 					continue;
 
@@ -1328,13 +_,12 @@
 						SoundEngine.PlaySound(18);
 					else
 						SoundEngine.PlaySound(7);
+					PlayerLoader.PostBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, Main.mouseItem);
 				}
 
 				if (Main.mouseItem.type == 0) {
-					Main.mouseItem.netDefaults(inv[slot].netID);
-					if (inv[slot].prefix != 0)
-						Main.mouseItem.Prefix(inv[slot].prefix);
-
+					Main.mouseItem = inv[slot].Clone();
+					Main.mouseItem.buyOnce = false;
 					Main.mouseItem.stack = 0;
 				}
 
@@ -1347,6 +_,8 @@
 					inv[slot].SetDefaults();
 
 				AnnounceTransfer(new ItemTransferInfo(Main.mouseItem, 15, 21));
+
+				PlayerLoader.PostBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, Main.mouseItem);
 			}
 		}
 
@@ -1436,6 +_,12 @@
 					case 27:
 						value = TextureAssets.InventoryBack12.Value;
 						break;
+					// These are added by TML.
+					case -10:
+					case -11:
+					case -12:
+						value = LoaderManager.Get<AccessorySlotLoader>().GetBackgroundTexture(slot, context);
+						break;
 					case 3:
 						value = TextureAssets.InventoryBack5.Value;
 						break;
@@ -1556,6 +_,17 @@
 				case 27:
 					num7 = 1;
 					break;
+				// Added by TML: [[
+				case -10:
+					num7 = 11;
+					break;
+				case -11:
+					num7 = 2;
+					break;
+				case -12:
+					num7 = 1;
+					break;
+				// ]]
 				case 16:
 					num7 = 4;
 					break;
@@ -1578,7 +_,17 @@
 				Rectangle rectangle = value6.Frame(3, 6, num7 % 3, num7 / 3);
 				rectangle.Width -= 2;
 				rectangle.Height -= 2;
+
+				// Modded Accessory Slots
+				if (context == -10 || context == -11 || context == -12) {
+					LoaderManager.Get<AccessorySlotLoader>().DrawSlotTexture(value6, position + value.Size() / 2f * inventoryScale, rectangle, Color.White * 0.35f, 0f, rectangle.Size() / 2f, inventoryScale, SpriteEffects.None, 0f, slot, context);
+
+					goto SkipVanillaDraw;
+				}
+
 				spriteBatch.Draw(value6, position + value.Size() / 2f * inventoryScale, rectangle, Color.White * 0.35f, 0f, rectangle.Size() / 2f, inventoryScale, SpriteEffects.None, 0f);
+
+				SkipVanillaDraw:;
 			}
 
 			Vector2 vector = value.Size() * inventoryScale;
@@ -1596,15 +_,24 @@
 				num8 *= inventoryScale;
 				Vector2 position2 = position + vector / 2f - rectangle2.Size() * num8 / 2f;
 				Vector2 origin = rectangle2.Size() * (scale3 / 2f - 0.5f);
+
+				if (!ItemLoader.PreDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(currentColor), item.GetColor(color), origin, num8 * scale3))
+					goto SkipVanillaItemDraw;
+
 				spriteBatch.Draw(value7, position2, rectangle2, item.GetAlpha(currentColor), 0f, origin, num8 * scale3, SpriteEffects.None, 0f);
 				if (item.color != Color.Transparent) {
 					Color newColor = color;
 					if (context == 13)
 						newColor.A = byte.MaxValue;
 
+					// Extra context.
+
 					spriteBatch.Draw(value7, position2, rectangle2, item.GetColor(newColor), 0f, origin, num8 * scale3, SpriteEffects.None, 0f);
 				}
 
+				SkipVanillaItemDraw:
+				ItemLoader.PostDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(currentColor), item.GetColor(color), origin, num8 * scale3);
+
 				if (ItemID.Sets.TrapSigned[item.type])
 					spriteBatch.Draw(TextureAssets.Wire.Value, position + new Vector2(40f, 40f) * inventoryScale, new Rectangle(4, 58, 8, 8), color, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
 
@@ -1673,13 +_,17 @@
 					Vector2 position3 = position + value.Size() * inventoryScale / 2f - TextureAssets.Cd.Value.Size() * inventoryScale / 2f;
 					Color color3 = item.GetAlpha(color) * ((float)player.potionDelay / (float)player.potionDelayTime);
 					spriteBatch.Draw(TextureAssets.Cd.Value, position3, null, color3, 0f, default(Vector2), num8, SpriteEffects.None, 0f);
+
+					// Extra context.
 				}
 
-				if ((context == 10 || context == 18) && item.expertOnly && !Main.expertMode) {
+				if ((context == 10 || context == 18) && ((item.expertOnly && !Main.expertMode) || (item.masterOnly && !Main.masterMode))) {
 					Vector2 position4 = position + value.Size() * inventoryScale / 2f - TextureAssets.Cd.Value.Size() * inventoryScale / 2f;
 					Color white = Color.White;
 					spriteBatch.Draw(TextureAssets.Cd.Value, position4, null, white, 0f, default(Vector2), num8, SpriteEffects.None, 0f);
 				}
+
+				// Extra context.
 			}
 			else if (context == 6) {
 				Texture2D value8 = TextureAssets.Trash.Value;
@@ -1740,6 +_,25 @@
 					if (inv == localPlayer.miscDyes)
 						result = 185 + slot;
 					break;
+				//TML Context: GamePad number magic aligned to match DemonHeart Accessory.
+				//TML Note: There is no Master Mode Accessory slot code here for Gamepads.
+				//TML-added [[
+				case -10:
+				case -11:
+					int num3M = slot;
+					if (!LoaderManager.Get<AccessorySlotLoader>().ModdedIsAValidEquipmentSlotForIteration(slot, localPlayer))
+						num3M--;
+
+					result = 100 + num3M;
+					break;
+				case -12:
+					int num4M = slot;
+					if (!LoaderManager.Get<AccessorySlotLoader>().ModdedIsAValidEquipmentSlotForIteration(slot, localPlayer))
+						num4M--;
+
+					result = 120 + num4M;
+					break;
+				// ]]
 				case 19:
 					result = 180;
 					break;
@@ -1930,7 +_,7 @@
 				inv[slot] = ArmorSwap(inv[slot], out success);
 				if (success) {
 					Main.EquipPageSelected = 0;
-					AchievementsHelper.HandleOnEquip(player, item, item.accessory ? 10 : 8);
+					AchievementsHelper.HandleOnEquip(player, item, (item.accessory ? 10 : 8) * (context < 0 ? -1 : 1));
 				}
 			}
 
@@ -1961,7 +_,18 @@
 			return true;
 		}
 
-		private static bool AccCheck(Item[] itemCollection, Item item, int slot) {
+		internal static bool AccCheck(Item[] itemCollection, Item item, int slot, int context) {
+			switch (context) {
+				case Context.ModdedAccessorySlot:
+				case Context.ModdedVanityAccessorySlot:
+				case Context.ModdedDyeSlot:
+				case Context.EquipDye:
+				case Context.EquipAccessoryVanity:
+				case Context.EquipAccessory:
+					return AccCheck_Inner(itemCollection, item, slot);
+			}
+
+			// Vanilla code for Display Dolls, etc.
 			if (isEquipLocked(item.type))
 				return true;
 
@@ -1989,6 +_,7 @@
 			return false;
 		}
 
+		//TML: I (Solxan), have not been able to get this to ever run in-game. I suspect this code path is deprecated.
 		private static Item DyeSwap(Item item, out bool success) {
 			success = false;
 			if (item.dye <= 0)
@@ -2003,8 +_,13 @@
 				}
 			}
 
-			if (dyeSlotCount >= 10)
+			if (dyeSlotCount >= 10) {
+				item2 = ModSlotDyeSwap(item, out success);
+				if (success)
+					return item2;
+
 				dyeSlotCount = 0;
+			}
 
 			if (dyeSlotCount < 0)
 				dyeSlotCount = 9;
@@ -2043,6 +_,9 @@
 				player.armor[num + 2] = item.Clone();
 			}
 			else if (item.accessory) {
+				if (!AccessorySwap(player, item, ref result))
+					return result;
+				/*
 				int num2 = 3;
 				for (int i = 3; i < 10; i++) {
 					if (player.IsAValidEquipmentSlotForIteration(i)) {
@@ -2080,6 +_,8 @@
 				result = player.armor[num3].Clone();
 				player.armor[num3] = item.Clone();
 				accSlotToSwapTo = 0;
+				*/
+
 			}
 
 			SoundEngine.PlaySound(7);
@@ -2174,7 +_,7 @@
 		}
 
 		public static Color GetItemLight(ref Color currentColor, ref float scale, int type, bool outInTheWorld = false) {
-			if (type < 0 || type > 5125)
+			if (type < 0)
 				return currentColor;
 
 			if (type == 662 || type == 663) {
