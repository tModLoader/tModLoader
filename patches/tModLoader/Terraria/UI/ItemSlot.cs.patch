--- src/Terraria/Terraria/UI/ItemSlot.cs
+++ src/tModLoader/Terraria/UI/ItemSlot.cs
@@ -1,6 +_,7 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using System;
+using System.Linq;
 using Terraria.Audio;
 using Terraria.DataStructures;
 using Terraria.GameContent;
@@ -10,6 +_,7 @@
 using Terraria.GameInput;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 using Terraria.UI.Chat;
 using Terraria.UI.Gamepad;
 
@@ -61,7 +_,7 @@
 
 		public static bool DrawGoldBGForCraftingMaterial;
 		public static bool ShiftForcedOn;
-		private static Item[] singleSlotArray;
+		internal static Item[] singleSlotArray;
 		private static bool[] canFavoriteAt;
 		private static bool[] canShareAt;
 		private static float[] inventoryGlowHue;
@@ -352,6 +_,10 @@
 				return true;
 
 			Item item = inv[slot];
+			// TODO: Make this more generalized.
+			if (ShiftInUse && PlayerLoader.ShiftClickSlot(Main.player[Main.myPlayer], inv, context, slot)) {
+				return true;
+			}
 			if (Main.cursorOverride == 2) {
 				if (ChatManager.AddChatText(FontAssets.MouseText.Value, ItemTagHandler.GenerateTag(item), Vector2.One))
 					SoundEngine.PlaySound(12);
@@ -425,11 +_,11 @@
 			Player player = Main.player[Main.myPlayer];
 			bool flag = Main.mouseLeftRelease && Main.mouseLeft;
 			if (flag) {
-				if (OverrideLeftClick(inv, context, slot))
+				if (OverrideLeftClick(inv, Math.Abs(context), slot))
 					return;
 
 				inv[slot].newAndShiny = false;
-				if (LeftClick_SellOrTrash(inv, context, slot) || player.itemAnimation != 0 || player.itemTime != 0)
+				if (LeftClick_SellOrTrash(inv, Math.Abs(context), slot) || player.itemAnimation != 0 || player.itemTime != 0)
 					return;
 			}
 
@@ -437,6 +_,10 @@
 			if (num != 3 && !flag)
 				return;
 
+			// context is received as signed integer; negative numbers are modded, positive are vanilla. Zero is mouse
+			// As the code to follow is independant of modded or vanilla, we use absolute to minimize patch size.
+			context = Math.Abs(context);
+
 			switch (num) {
 				case 0:
 					if (context == 6 && Main.mouseItem.type != 0)
@@ -651,18 +_,24 @@
 					break;
 				case 3:
 					HandleShopSlot(inv, slot, rightClickIsValid: false, leftClickIsValid: true);
+						
 					break;
 				case 4: {
+						if (!PlayerLoader.CanSellItem(player, Main.npc[player.talkNPC], inv, Main.mouseItem))
+							break;
+							
 						Chest chest = Main.instance.shop[Main.npcShop];
 						if (player.SellItem(Main.mouseItem)) {
-							chest.AddItemToShop(Main.mouseItem);
+							int soldItemIndex = chest.AddItemToShop(Main.mouseItem);
 							Main.mouseItem.SetDefaults();
 							SoundEngine.PlaySound(18);
+							PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 						}
 						else if (Main.mouseItem.value == 0) {
-							chest.AddItemToShop(Main.mouseItem);
+							int soldItemIndex = chest.AddItemToShop(Main.mouseItem);
 							Main.mouseItem.SetDefaults();
 							SoundEngine.PlaySound(7);
+							PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 						}
 
 						Recipe.FindRecipes();
@@ -714,18 +_,20 @@
 
 			if (Main.npcShop > 0 && !inv[slot].favorited) {
 				Chest chest = Main.instance.shop[Main.npcShop];
-				if (inv[slot].type < 71 || inv[slot].type > 74) {
+				if (inv[slot].type < 71 || inv[slot].type > 74 && PlayerLoader.CanSellItem(player, Main.npc[player.talkNPC], chest.item, inv[slot])) {					
 					if (player.SellItem(inv[slot])) {
-						chest.AddItemToShop(inv[slot]);
+						int soldItemIndex = chest.AddItemToShop(inv[slot]);
 						inv[slot].SetDefaults();
 						SoundEngine.PlaySound(18);
 						Recipe.FindRecipes();
+						PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 					}
 					else if (inv[slot].value == 0) {
-						chest.AddItemToShop(inv[slot]);
+						int soldItemIndex = chest.AddItemToShop(inv[slot]);
 						inv[slot].SetDefaults();
 						SoundEngine.PlaySound(7);
 						Recipe.FindRecipes();
+						PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 					}
 				}
 			}
@@ -861,7 +_,12 @@
 						result = 1;
 					break;
 				case 10:
-					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor, checkItem, slot)))
+					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor.Concat(AccessorySlotLoader.ModSlotPlayer.exAccessorySlot).ToArray(), checkItem, slot)))
+						result = 1;
+					break;
+				case -10:
+				case -11:
+					if (checkItem.type == 0 || (checkItem.accessory && LoaderManager.Get<AccessorySlotLoader>().ModSlotCheck(checkItem, slot)))
 						result = 1;
 					break;
 				case 24:
@@ -869,10 +_,11 @@
 						result = 1;
 					break;
 				case 11:
-					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor, checkItem, slot)))
+					if (checkItem.type == 0 || (checkItem.accessory && !AccCheck(Main.LocalPlayer.armor.Concat(AccessorySlotLoader.ModSlotPlayer.exAccessorySlot).ToArray(), checkItem, slot)))
 						result = 1;
 					break;
 				case 12:
+				case -12:
 				case 25:
 				case 27:
 					result = 2;
@@ -1000,10 +_,12 @@
 			switch (context) {
 				case 0:
 					result = true;
-					if (Main.mouseRight && ((inv[slot].type >= 3318 && inv[slot].type <= 3332) || inv[slot].type == 3860 || inv[slot].type == 3862 || inv[slot].type == 3861 || inv[slot].type == 4782 || inv[slot].type == 4957)) {
+					if (Main.mouseRight && ((inv[slot].type >= 3318 && inv[slot].type <= 3332) || inv[slot].type == 3860 || inv[slot].type == 3862 || inv[slot].type == 3861 || inv[slot].type == 4782 || inv[slot].type == 4957 || ItemLoader.IsModBossBag(inv[slot]))) {
 						if (Main.mouseRightRelease) {
 							player.OpenBossBag(inv[slot].type);
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1013,10 +_,12 @@
 							Recipe.FindRecipes();
 						}
 					}
-					else if (Main.mouseRight && inv[slot].type > 0 && inv[slot].type < 5088 && ItemID.Sets.IsFishingCrate[inv[slot].type]) {
+					else if (Main.mouseRight && inv[slot].type > 0 && inv[slot].type < ItemLoader.ItemCount && ItemID.Sets.IsFishingCrate[inv[slot].type]) {
 						if (Main.mouseRightRelease) {
 							player.OpenFishingCrate(inv[slot].type);
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1029,7 +_,9 @@
 					else if (Main.mouseRight && inv[slot].type == 3093) {
 						if (Main.mouseRightRelease) {
 							player.OpenHerbBag();
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1093,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 1774) {
 						if (Main.mouseRightRelease) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1106,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 3085) {
 						if (Main.mouseRightRelease && player.ConsumeItem(327)) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1119,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 4879) {
 						if (Main.mouseRightRelease && player.HasItem(329)) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1132,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 1869) {
 						if (Main.mouseRightRelease) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1162,6 +_,9 @@
 
 						Recipe.FindRecipes();
 					}
+					else if (ItemLoader.CanRightClick(inv[slot])) {
+						ItemLoader.RightClick(inv[slot], player);
+					}
 					else {
 						result = false;
 					}
@@ -1175,22 +_,24 @@
 						if (Main.npcShop > 0)
 							return true;
 
+						int tSlot = slot - inv.Length / 2;
+
-						if ((inv[slot].type <= 0 || inv[slot].stack <= 0) && (inv[slot - 10].type <= 0 || inv[slot - 10].stack <= 0))
+						if ((inv[slot].type <= 0 || inv[slot].stack <= 0) && (inv[tSlot].type <= 0 || inv[tSlot].stack <= 0))
 							break;
 
-						Item item = inv[slot - 10];
+						Item item = inv[tSlot];
 						bool flag2 = context != 11 || item.FitsAccessoryVanitySlot || item.IsAir;
 						if (flag2 && context == 11 && inv[slot].wingSlot > 0) {
-							for (int i = 3; i < 10; i++) {
+							for (int i = 0; i < inv.Length / 2; i++) {
-								if (inv[i].wingSlot > 0 && i != slot - 10)
+								if (inv[i].wingSlot > 0 && i != tSlot)
 									flag2 = false;
 							}
 						}
 
-						if (!flag2)
+						if (!flag2 || !ItemLoader.CanEquipAccessory(inv[slot], tSlot))
 							break;
 
-						Utils.Swap(ref inv[slot], ref inv[slot - 10]);
+						Utils.Swap(ref inv[slot], ref inv[tSlot]);
 						SoundEngine.PlaySound(7);
 						Recipe.FindRecipes();
 						if (inv[slot].stack > 0) {
@@ -1264,6 +_,8 @@
 			int num = Main.superFastStack + 1;
 			Player localPlayer = Main.LocalPlayer;
 			for (int i = 0; i < num; i++) {
+				if (!PlayerLoader.CanBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, inv[slot]))
+					continue;
 				if (Main.mouseItem.stack >= Main.mouseItem.maxStack && Main.mouseItem.type != 0)
 					continue;
 
@@ -1276,13 +_,12 @@
 						SoundEngine.PlaySound(18);
 					else
 						SoundEngine.PlaySound(7);
+					PlayerLoader.PostBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, Main.mouseItem);
 				}
 
 				if (Main.mouseItem.type == 0) {
-					Main.mouseItem.netDefaults(inv[slot].netID);
-					if (inv[slot].prefix != 0)
-						Main.mouseItem.Prefix(inv[slot].prefix);
-
+					Main.mouseItem = inv[slot].Clone();
+					Main.mouseItem.buyOnce = false;
 					Main.mouseItem.stack = 0;
 				}
 
@@ -1293,6 +_,8 @@
 				RefreshStackSplitCooldown();
 				if (inv[slot].buyOnce && --inv[slot].stack <= 0)
 					inv[slot].SetDefaults();
+
+				PlayerLoader.PostBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, Main.mouseItem);
 			}
 		}
 
@@ -1342,6 +_,21 @@
 						if (inv == player.miscDyes)
 							num = 185 + slot;
 						break;
+					case -10:
+					case -11:
+						int num3M = slot;
+						if (!LoaderManager.Get<AccessorySlotLoader>().ModdedIsAValidEquipmentSlotForIteration(slot))
+							num3M--;
+
+						num = 100 + num3M;
+						break;
+					case -12:
+						int num4M = slot;
+						if (!LoaderManager.Get<AccessorySlotLoader>().ModdedIsAValidEquipmentSlotForIteration(slot))
+							num4M--;
+
+						num = 120 + num4M;
+						break;
 					case 19:
 						num = 180;
 						break;
@@ -1468,6 +_,15 @@
 					case 27:
 						value = TextureAssets.InventoryBack12.Value;
 						break;
+					case -10:
+						value = TextureAssets.InventoryBack3.Value;
+						break;
+					case -11:
+						value = TextureAssets.InventoryBack8.Value;
+						break;
+					case -12:
+						value = TextureAssets.InventoryBack12.Value;
+						break;
 					case 3:
 						value = TextureAssets.InventoryBack5.Value;
 						break;
@@ -1588,6 +_,15 @@
 				case 27:
 					num10 = 1;
 					break;
+				case -10:
+					num10 = 11;
+					break;
+				case -11:
+					num10 = 2;
+					break;
+				case -12:
+					num10 = 1;
+					break;
 				case 16:
 					num10 = 4;
 					break;
@@ -1628,10 +_,15 @@
 				num11 *= inventoryScale;
 				Vector2 position2 = position + vector / 2f - rectangle2.Size() * num11 / 2f;
 				Vector2 origin = rectangle2.Size() * (scale3 / 2f - 0.5f);
+				if (!ItemLoader.PreDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(currentColor), item.GetColor(color), origin, num11 * scale3))
+					goto skip;
+				
 				spriteBatch.Draw(value7, position2, rectangle2, item.GetAlpha(currentColor), 0f, origin, num11 * scale3, SpriteEffects.None, 0f);
 				if (item.color != Color.Transparent)
 					spriteBatch.Draw(value7, position2, rectangle2, item.GetColor(color), 0f, origin, num11 * scale3, SpriteEffects.None, 0f);
 
+				skip:
+				ItemLoader.PostDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(currentColor), item.GetColor(color), origin, num11 * scale3);
 				if (ItemID.Sets.TrapSigned[item.type])
 					spriteBatch.Draw(TextureAssets.Wire.Value, position + new Vector2(40f, 40f) * inventoryScale, new Rectangle(4, 58, 8, 8), color, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
 
@@ -1702,7 +_,7 @@
 					spriteBatch.Draw(TextureAssets.Cd.Value, position3, null, color3, 0f, default(Vector2), num11, SpriteEffects.None, 0f);
 				}
 
-				if ((context == 10 || context == 18) && item.expertOnly && !Main.expertMode) {
+				if ((context == 10 || context == 18) && ((item.expertOnly && !Main.expertMode) || (item.masterOnly && !Main.masterMode))) {
 					Vector2 position4 = position + value.Size() * inventoryScale / 2f - TextureAssets.Cd.Value.Size() * inventoryScale / 2f;
 					Color white = Color.White;
 					spriteBatch.Draw(TextureAssets.Cd.Value, position4, null, white, 0f, default(Vector2), num11, SpriteEffects.None, 0f);
@@ -1892,7 +_,7 @@
 			return true;
 		}
 
-		private static bool AccCheck(Item[] itemCollection, Item item, int slot) {
+		internal static bool AccCheck(Item[] itemCollection, Item item, int slot) {
 			if (isEquipLocked(item.type))
 				return true;
 
@@ -1901,23 +_,20 @@
 					return false;
 
 				if (itemCollection[slot].wingSlot > 0 && item.wingSlot > 0)
-					return false;
+					return !ItemLoader.CanEquipAccessory(item, slot);
 			}
 
 			for (int i = 0; i < itemCollection.Length; i++) {
-				if (slot < 10 && i < 10) {
-					if (item.wingSlot > 0 && itemCollection[i].wingSlot > 0)
+				if (item.wingSlot > 0 && itemCollection[i].wingSlot > 0)
-						return true;
+					return true;			
+			}
 
-					if (slot >= 10 && i >= 10 && item.wingSlot > 0 && itemCollection[i].wingSlot > 0)
-						return true;
-				}
-
+			for (int i = 0; i < itemCollection.Length; i++) {
 				if (item.IsTheSameAs(itemCollection[i]))
 					return true;
 			}
 
-			return false;
+			return !ItemLoader.CanEquipAccessory(item, slot);
 		}
 
 		private static Item DyeSwap(Item item, out bool success) {
@@ -1934,9 +_,14 @@
 				}
 			}
 
-			if (dyeSlotCount >= 10)
+			if (dyeSlotCount >= 10) {
+				item2 = LoaderManager.Get<AccessorySlotLoader>().VanillaDyeSwapMirror(item, out success);
+				if (success)
+					return item2;
+
 				dyeSlotCount = 0;
-
+			}
+			
 			if (dyeSlotCount < 0)
 				dyeSlotCount = 9;
 
@@ -1974,6 +_,8 @@
 				player.armor[num + 2] = item.Clone();
 			}
 			else if (item.accessory) {
+				bool isModded = false;
+
 				int num2 = 3;
 				for (int i = 3; i < 10; i++) {
 					if (player.IsAValidEquipmentSlotForIteration(i)) {
@@ -1985,16 +_,85 @@
 					}
 				}
 
+				int num2Mod = 0;
+				if (accSlotToSwapTo == 0) {
+					for (int i = 0; i < LoaderManager.Get<AccessorySlotLoader>().list.Count; i++) {
+						if (LoaderManager.Get<AccessorySlotLoader>().ModdedIsAValidEquipmentSlotForIteration(i)) {
+							num2Mod = i;
+							if (AccessorySlotLoader.ModSlotPlayer.exAccessorySlot[i].type == 0) {
+								accSlotToSwapTo = i;
+								isModded = true;
+								break;
+							}
+						}
+					}
+				}
+
 				for (int j = 0; j < player.armor.Length; j++) {
 					if (item.IsTheSameAs(player.armor[j]))
-						accSlotToSwapTo = j - 3;
+						accSlotToSwapTo = j - 3; isModded = false;
 
 					if (j < 10 && item.wingSlot > 0 && player.armor[j].wingSlot > 0)
-						accSlotToSwapTo = j - 3;
+						accSlotToSwapTo = j - 3; isModded = false;
 				}
 
-				if (accSlotToSwapTo > num2)
+				for (int j = 0; j < LoaderManager.Get<AccessorySlotLoader>().list.Count * 2; j++) {
+					if (item.IsTheSameAs(AccessorySlotLoader.ModSlotPlayer.exAccessorySlot[j])) {
+						accSlotToSwapTo = j;
+						isModded = true;
+					}
+
+					if (j < LoaderManager.Get<AccessorySlotLoader>().list.Count && item.wingSlot > 0 
+						&& AccessorySlotLoader.ModSlotPlayer.exAccessorySlot[j].wingSlot > 0) {
+						accSlotToSwapTo = j;
+						isModded = true;
+					}
+				}
+
+				for (int k = 0; k < num2; k++) {
+					int index = 3 + (accSlotToSwapTo + num2) % num2;
+					if (ItemLoader.CanEquipAccessory(item, index)) {
+						accSlotToSwapTo = index - 3;
+						break;
+					}
+				}
+
+				for (int k = 0; k < num2Mod; k++) {
+					int index = (accSlotToSwapTo + num2Mod) % num2Mod;
+					if (ItemLoader.CanEquipAccessory(item, index)) {
+						accSlotToSwapTo = index;
+						break;
+					}
+				}
+
+				if ((!isModded && accSlotToSwapTo > num2) || (isModded && accSlotToSwapTo > num2Mod)) {
 					return item;
+				}
+
+				if (isModded) {
+					if (accSlotToSwapTo < 0)
+						accSlotToSwapTo = num2Mod;
+
+					int num3Mod = accSlotToSwapTo;
+					if (isEquipLocked(AccessorySlotLoader.ModSlotPlayer.exAccessorySlot[num3Mod].type))
+						return item;
+
+					for (int k = 0; k < LoaderManager.Get<AccessorySlotLoader>().list.Count * 2; k++) {
+						if (item.IsTheSameAs(AccessorySlotLoader.ModSlotPlayer.exAccessorySlot[k]))
+							num3Mod = k;
+					}
+
+					if (!ItemLoader.CanEquipAccessory(item, num3Mod))
+						return item;
+
+					result = AccessorySlotLoader.ModSlotPlayer.exAccessorySlot[num3Mod].Clone();
+					AccessorySlotLoader.ModSlotPlayer.exAccessorySlot[num3Mod] = item.Clone();
+					accSlotToSwapTo = 0;
+					SoundEngine.PlaySound(7);
+					Recipe.FindRecipes();
+					success = true;
+					return result;
+				}
 
 				if (accSlotToSwapTo < 0)
 					accSlotToSwapTo = num2 - 3;
@@ -2008,6 +_,9 @@
 						num3 = k;
 				}
 
+				if (!ItemLoader.CanEquipAccessory(item, num3))
+					return item;
+
 				result = player.armor[num3].Clone();
 				player.armor[num3] = item.Clone();
 				accSlotToSwapTo = 0;
@@ -2105,7 +_,7 @@
 		}
 
 		public static Color GetItemLight(ref Color currentColor, ref float scale, int type, bool outInTheWorld = false) {
-			if (type < 0 || type > 5088)
+			if (type < 0)
 				return currentColor;
 
 			if (type == 662 || type == 663) {
