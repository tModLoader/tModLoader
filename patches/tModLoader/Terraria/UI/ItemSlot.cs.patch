--- src/Terraria/Terraria/UI/ItemSlot.cs
+++ src/tModLoader/Terraria/UI/ItemSlot.cs
@@ -1,6 +_,7 @@
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using System;
+using System.Linq;
 using Terraria.Audio;
 using Terraria.DataStructures;
 using Terraria.GameContent;
@@ -10,6 +_,7 @@
 using Terraria.GameInput;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
 using Terraria.UI.Chat;
 using Terraria.UI.Gamepad;
 
@@ -61,7 +_,7 @@
 
 		public static bool DrawGoldBGForCraftingMaterial;
 		public static bool ShiftForcedOn;
-		private static Item[] singleSlotArray;
+		internal static Item[] singleSlotArray;
 		private static bool[] canFavoriteAt;
 		private static bool[] canShareAt;
 		private static float[] inventoryGlowHue;
@@ -352,6 +_,10 @@
 				return true;
 
 			Item item = inv[slot];
+			// TODO: Make this more generalized.
+			if (ShiftInUse && PlayerLoader.ShiftClickSlot(Main.player[Main.myPlayer], inv, context, slot)) {
+				return true;
+			}
 			if (Main.cursorOverride == 2) {
 				if (ChatManager.AddChatText(FontAssets.MouseText.Value, ItemTagHandler.GenerateTag(item), Vector2.One))
 					SoundEngine.PlaySound(12);
@@ -651,18 +_,24 @@
 					break;
 				case 3:
 					HandleShopSlot(inv, slot, rightClickIsValid: false, leftClickIsValid: true);
+						
 					break;
 				case 4: {
+						if (!PlayerLoader.CanSellItem(player, Main.npc[player.talkNPC], inv, Main.mouseItem))
+							break;
+							
 						Chest chest = Main.instance.shop[Main.npcShop];
 						if (player.SellItem(Main.mouseItem)) {
-							chest.AddItemToShop(Main.mouseItem);
+							int soldItemIndex = chest.AddItemToShop(Main.mouseItem);
 							Main.mouseItem.SetDefaults();
 							SoundEngine.PlaySound(18);
+							PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 						}
 						else if (Main.mouseItem.value == 0) {
-							chest.AddItemToShop(Main.mouseItem);
+							int soldItemIndex = chest.AddItemToShop(Main.mouseItem);
 							Main.mouseItem.SetDefaults();
 							SoundEngine.PlaySound(7);
+							PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 						}
 
 						Recipe.FindRecipes();
@@ -714,18 +_,20 @@
 
 			if (Main.npcShop > 0 && !inv[slot].favorited) {
 				Chest chest = Main.instance.shop[Main.npcShop];
-				if (inv[slot].type < 71 || inv[slot].type > 74) {
+				if (inv[slot].type < 71 || inv[slot].type > 74 && PlayerLoader.CanSellItem(player, Main.npc[player.talkNPC], chest.item, inv[slot])) {					
 					if (player.SellItem(inv[slot])) {
-						chest.AddItemToShop(inv[slot]);
+						int soldItemIndex = chest.AddItemToShop(inv[slot]);
 						inv[slot].SetDefaults();
 						SoundEngine.PlaySound(18);
 						Recipe.FindRecipes();
+						PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 					}
 					else if (inv[slot].value == 0) {
-						chest.AddItemToShop(inv[slot]);
+						int soldItemIndex = chest.AddItemToShop(inv[slot]);
 						inv[slot].SetDefaults();
 						SoundEngine.PlaySound(7);
 						Recipe.FindRecipes();
+						PlayerLoader.PostSellItem(player, Main.npc[player.talkNPC], chest.item, chest.item[soldItemIndex]);
 					}
 				}
 			}
@@ -1000,10 +_,12 @@
 			switch (context) {
 				case 0:
 					result = true;
-					if (Main.mouseRight && ((inv[slot].type >= 3318 && inv[slot].type <= 3332) || inv[slot].type == 3860 || inv[slot].type == 3862 || inv[slot].type == 3861 || inv[slot].type == 4782 || inv[slot].type == 4957)) {
+					if (Main.mouseRight && ((inv[slot].type >= 3318 && inv[slot].type <= 3332) || inv[slot].type == 3860 || inv[slot].type == 3862 || inv[slot].type == 3861 || inv[slot].type == 4782 || inv[slot].type == 4957 || ItemLoader.IsModBossBag(inv[slot]))) {
 						if (Main.mouseRightRelease) {
 							player.OpenBossBag(inv[slot].type);
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1013,10 +_,12 @@
 							Recipe.FindRecipes();
 						}
 					}
-					else if (Main.mouseRight && inv[slot].type > 0 && inv[slot].type < 5088 && ItemID.Sets.IsFishingCrate[inv[slot].type]) {
+					else if (Main.mouseRight && inv[slot].type > 0 && inv[slot].type < ItemLoader.ItemCount && ItemID.Sets.IsFishingCrate[inv[slot].type]) {
 						if (Main.mouseRightRelease) {
 							player.OpenFishingCrate(inv[slot].type);
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1029,7 +_,9 @@
 					else if (Main.mouseRight && inv[slot].type == 3093) {
 						if (Main.mouseRightRelease) {
 							player.OpenHerbBag();
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1093,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 1774) {
 						if (Main.mouseRightRelease) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1106,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 3085) {
 						if (Main.mouseRightRelease && player.ConsumeItem(327)) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1132,7 +_,9 @@
 					}
 					else if (Main.mouseRight && inv[slot].type == 1869) {
 						if (Main.mouseRightRelease) {
+							if (ItemLoader.ConsumeItem(inv[slot], player))
-							inv[slot].stack--;
+								inv[slot].stack--;
+
 							if (inv[slot].stack == 0)
 								inv[slot].SetDefaults();
 
@@ -1162,6 +_,9 @@
 
 						Recipe.FindRecipes();
 					}
+					else if (ItemLoader.CanRightClick(inv[slot])) {
+						ItemLoader.RightClick(inv[slot], player);
+					}
 					else {
 						result = false;
 					}
@@ -1187,7 +_,7 @@
 							}
 						}
 
-						if (!flag2)
+						if (!flag2 || !ItemLoader.CanEquipAccessory(inv[slot], slot - 10))
 							break;
 
 						Utils.Swap(ref inv[slot], ref inv[slot - 10]);
@@ -1264,6 +_,8 @@
 			int num = Main.superFastStack + 1;
 			Player localPlayer = Main.LocalPlayer;
 			for (int i = 0; i < num; i++) {
+				if (!PlayerLoader.CanBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, inv[slot]))
+					continue;
 				if (Main.mouseItem.stack >= Main.mouseItem.maxStack && Main.mouseItem.type != 0)
 					continue;
 
@@ -1276,13 +_,12 @@
 						SoundEngine.PlaySound(18);
 					else
 						SoundEngine.PlaySound(7);
+					PlayerLoader.PostBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, Main.mouseItem);
 				}
 
 				if (Main.mouseItem.type == 0) {
-					Main.mouseItem.netDefaults(inv[slot].netID);
-					if (inv[slot].prefix != 0)
-						Main.mouseItem.Prefix(inv[slot].prefix);
-
+					Main.mouseItem = inv[slot].Clone();
+					Main.mouseItem.buyOnce = false;
 					Main.mouseItem.stack = 0;
 				}
 
@@ -1293,6 +_,8 @@
 				RefreshStackSplitCooldown();
 				if (inv[slot].buyOnce && --inv[slot].stack <= 0)
 					inv[slot].SetDefaults();
+
+				PlayerLoader.PostBuyItem(localPlayer, Main.npc[localPlayer.talkNPC], inv, Main.mouseItem);
 			}
 		}
 
@@ -1628,10 +_,15 @@
 				num11 *= inventoryScale;
 				Vector2 position2 = position + vector / 2f - rectangle2.Size() * num11 / 2f;
 				Vector2 origin = rectangle2.Size() * (scale3 / 2f - 0.5f);
+				if (!ItemLoader.PreDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(currentColor), item.GetColor(color), origin, num11 * scale3))
+					goto skip;
+				
 				spriteBatch.Draw(value7, position2, rectangle2, item.GetAlpha(currentColor), 0f, origin, num11 * scale3, SpriteEffects.None, 0f);
 				if (item.color != Color.Transparent)
 					spriteBatch.Draw(value7, position2, rectangle2, item.GetColor(color), 0f, origin, num11 * scale3, SpriteEffects.None, 0f);
 
+				skip:
+				ItemLoader.PostDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(currentColor), item.GetColor(color), origin, num11 * scale3);
 				if (ItemID.Sets.TrapSigned[item.type])
 					spriteBatch.Draw(TextureAssets.Wire.Value, position + new Vector2(40f, 40f) * inventoryScale, new Rectangle(4, 58, 8, 8), color, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
 
@@ -1702,7 +_,7 @@
 					spriteBatch.Draw(TextureAssets.Cd.Value, position3, null, color3, 0f, default(Vector2), num11, SpriteEffects.None, 0f);
 				}
 
-				if ((context == 10 || context == 18) && item.expertOnly && !Main.expertMode) {
+				if ((context == 10 || context == 18) && ((item.expertOnly && !Main.expertMode) || (item.masterOnly && !Main.masterMode))) {
 					Vector2 position4 = position + value.Size() * inventoryScale / 2f - TextureAssets.Cd.Value.Size() * inventoryScale / 2f;
 					Color white = Color.White;
 					spriteBatch.Draw(TextureAssets.Cd.Value, position4, null, white, 0f, default(Vector2), num11, SpriteEffects.None, 0f);
@@ -1901,7 +_,7 @@
 					return false;
 
 				if (itemCollection[slot].wingSlot > 0 && item.wingSlot > 0)
-					return false;
+					return !ItemLoader.CanEquipAccessory(item, slot);
 			}
 
 			for (int i = 0; i < itemCollection.Length; i++) {
@@ -1917,7 +_,7 @@
 					return true;
 			}
 
-			return false;
+			return !ItemLoader.CanEquipAccessory(item, slot);
 		}
 
 		private static Item DyeSwap(Item item, out bool success) {
@@ -1993,6 +_,14 @@
 						accSlotToSwapTo = j - 3;
 				}
 
+				for (int k = 0; k < num2; k++) {
+					int index = 3 + (accSlotToSwapTo + num2) % num2;
+					if (ItemLoader.CanEquipAccessory(item, index)) {
+						accSlotToSwapTo = index - 3;
+						break;
+					}
+				}
+
 				if (accSlotToSwapTo > num2)
 					return item;
 
@@ -2008,6 +_,9 @@
 						num3 = k;
 				}
 
+				if (!ItemLoader.CanEquipAccessory(item, num3))
+					return item;
+
 				result = player.armor[num3].Clone();
 				player.armor[num3] = item.Clone();
 				accSlotToSwapTo = 0;
@@ -2105,7 +_,7 @@
 		}
 
 		public static Color GetItemLight(ref Color currentColor, ref float scale, int type, bool outInTheWorld = false) {
-			if (type < 0 || type > 5088)
+			if (type < 0)
 				return currentColor;
 
 			if (type == 662 || type == 663) {
