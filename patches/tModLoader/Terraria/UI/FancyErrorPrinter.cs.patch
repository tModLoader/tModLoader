--- src/TerrariaNetCore/Terraria/UI/FancyErrorPrinter.cs
+++ src/tModLoader/Terraria/UI/FancyErrorPrinter.cs
@@ -3,10 +_,17 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Text;
+using System.Threading;
 using System.Windows.Forms;
+using Terraria.ModLoader.Engine;
+using Terraria.ModLoader;
+using Terraria.Localization;
 
 namespace Terraria.UI
 {
+	/// <summary>
+	/// This class handles displaying errors that require a OS-provided modal message box. Fatal errors and errors that happen in situations where a suitable place to display an error doesn't exist (such as when initially loading). 
+	/// </summary>
 	public class FancyErrorPrinter
 	{
 		public static void ShowFailedToLoadAssetError(Exception exception, string filePath) {
@@ -37,7 +_,6 @@
 				stringBuilder.AppendLine();
 				IncludeOriginalMessage(stringBuilder, exception);
 				ShowTheBox(stringBuilder.ToString());
-				Console.WriteLine(stringBuilder.ToString());
 			}
 		}
 
@@ -70,7 +_,6 @@
 				stringBuilder.AppendLine();
 				IncludeOriginalMessage(stringBuilder, exception);
 				ShowTheBox(stringBuilder.ToString());
-				Console.WriteLine(stringBuilder.ToString());
 			}
 		}
 
@@ -103,7 +_,6 @@
 				stringBuilder.AppendLine();
 				IncludeOriginalMessage(stringBuilder, exception);
 				ShowTheBox(stringBuilder.ToString());
-				Console.WriteLine(exception);
 			}
 		}
 
@@ -119,11 +_,64 @@
 			}
 		}
 
-		private static void ShowTheBox(string preparedMessage) {
-			if (Main.dedServ) // if #SERVER
-				return;
-			
-			MessageBox.Show(preparedMessage, "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
+		private static void ShowTheBox(string preparedMessage, bool fatal = false) {
+			var title = ModLoader.ModLoader.versionedName + (fatal ? " Error" : " Fatal Error");
+
+			string logDir = Path.GetFullPath(Logging.LogDir);
+			var logFileName = Logging.LogPath == null ? "Natives.log" : Path.GetFileName(Logging.LogPath);
+
+			string logHint = Language.GetTextValue("tModLoader.LogPathHint", logFileName, logDir);
+			if (Language.ActiveCulture == null) // Simple backup approach in case error happens before localization is loaded
+				logHint = $"A {logFileName} file containing error information has been generated in\n{logDir}\n(You will need to share this file if asking for help)";
+
+			preparedMessage += "\n\n" + logHint;
+
+			try {
+				// always write to console. Ideal for headless servers
+				Console.ForegroundColor = ConsoleColor.Red;
+				Console.Out.WriteLine(title + "\n" + preparedMessage);
+				SDL2.SDL.SDL_ShowSimpleMessageBox(SDL2.SDL.SDL_MessageBoxFlags.SDL_MESSAGEBOX_ERROR, title, preparedMessage, IntPtr.Zero);
+			}
+			catch { }
+		}
+
+		public static void FatalExit(string message) {
+			if (Logging.LogPath == null)
+				Console.Error.WriteLine(message); // Writes to Natives.log
+			else
+				Logging.tML.Fatal(message);
+
+			TerrariaSteamClient.Shutdown();
+			ShowTheBox(message, true);
+			Environment.Exit(1);
+		}
+
+		public static void FatalExit(string message, Exception e) {
+			if (e.HelpLink != null) {
+				try {
+					Utils.OpenToURL(e.HelpLink);
+				}
+				catch { }
+			}
+
+			string tip = null;
+			if (e is OutOfMemoryException)
+				tip = Language.GetTextValue("tModLoader.OutOfMemoryHint");
+			else if (e is InvalidOperationException || e is NullReferenceException || e is IndexOutOfRangeException || e is ArgumentNullException)
+				tip = Language.GetTextValue("tModLoader.ModExceptionHint");
+			else if (e is IOException && e.Message.Contains("cloud file provider"))
+				tip = Language.GetTextValue("tModLoader.OneDriveHint");
+			else if (e is SynchronizationLockException)
+				tip = Language.GetTextValue("tModLoader.AntivirusHint");
+			else if (e is TypeInitializationException)
+				tip = Language.GetTextValue("tModLoader.TypeInitializationHint");
+
+			if (tip != null)
+				message += "\n\n" + tip;
+
+			message += "\n\n" + e;
+
+			FatalExit(message);
 		}
 	}
 }
