--- src/TerrariaNetCore/Terraria/UI/UserInterface.cs
+++ src/tModLoader/Terraria/UI/UserInterface.cs
@@ -7,7 +_,7 @@
 
 namespace Terraria.UI;
 
-public class UserInterface
+public partial class UserInterface
 {
 	private const double DOUBLE_CLICK_TIME = 500.0;
 	private const double STATE_CHANGE_CLICK_DISABLE_TIME = 200.0;
@@ -36,6 +_,8 @@
 		_lastElementHover = null;
 		_lastElementDown = null;
 		_lastElementClicked = null;
+
+		mouseRightData.ResetLasts();
 	}
 
 	public void EscapeElements()
@@ -64,6 +_,12 @@
 		if (!Main.dedServ) {
 			GetMousePosition();
 			_wasMouseDown = Main.mouseLeft;
+
+			mouseRightData.WasDown = Main.mouseRight;
+			mouseMiddleData.WasDown = Main.mouseMiddle;
+			mouseXButton1Data.WasDown = Main.mouseXButton1;
+			mouseXButton2Data.WasDown = Main.mouseXButton2;
+
 			if (_lastElementHover != null)
 				_lastElementHover.MouseOut(new UIMouseEvent(_lastElementHover, MousePosition));
 		}
@@ -72,6 +_,12 @@
 		_lastElementDown = null;
 		_lastElementClicked = null;
 		_lastMouseDownTime = 0.0;
+		
+		mouseRightData.ResetState();
+		mouseMiddleData.ResetState();
+		mouseXButton1Data.ResetState();
+		mouseXButton2Data.ResetState();
+
 		_clickDisabledTimeRemaining = Math.Max(_clickDisabledTimeRemaining, 200.0);
 	}
 
@@ -86,10 +_,32 @@
 			return;
 
 		GetMousePosition();
+
 		bool flag = Main.mouseLeft && Main.hasFocus;
+
+		mouseRightData.IsDown = Main.mouseRight && Main.hasFocus;
+		mouseMiddleData.IsDown = Main.mouseMiddle && Main.hasFocus;
+		mouseXButton1Data.IsDown = Main.mouseXButton1 && Main.hasFocus;
+		mouseXButton2Data.IsDown = Main.mouseXButton2 && Main.hasFocus;
+
 		UIElement uIElement = (Main.hasFocus ? _currentState.GetElementAt(MousePosition) : null);
 		_clickDisabledTimeRemaining = Math.Max(0.0, _clickDisabledTimeRemaining - time.ElapsedGameTime.TotalMilliseconds);
 		bool flag2 = _clickDisabledTimeRemaining > 0.0;
+		
+		try {
+			Update_Inner(time, uIElement, ref flag, ref flag2);
+		}
+		catch {
+			throw;
+		}
+		finally {
+			Update_End(time, flag);
+		}
+	}
+
+	// A split to add a try-catch-finally block without indentation issues.
+	private void Update_Inner(GameTime time, UIElement uIElement, ref bool flag, ref bool flag2)
+	{
 		if (uIElement != _lastElementHover) {
 			if (_lastElementHover != null)
 				_lastElementHover.MouseOut(new UIMouseEvent(_lastElementHover, MousePosition));
@@ -119,12 +_,63 @@
 			_lastElementDown = null;
 		}
 
+		// TML-introduced functionality - right, middle, extra button 1 & 2 click Events
+
+		// Right
+		UpdateButtonState(
+			time, uIElement, flag2,
+			ref mouseRightData,
+			e => e.Target.RightClick(e),
+			e => e.Target.RightDoubleClick(e),
+			e => e.Target.RightMouseDown(e),
+			e => e.Target.RightMouseUp(e)
+		);
+		// Middle
+		UpdateButtonState(
+			time, uIElement, flag2,
+			ref mouseMiddleData,
+			e => e.Target.MiddleClick(e),
+			e => e.Target.MiddleDoubleClick(e),
+			e => e.Target.MiddleMouseDown(e),
+			e => e.Target.MiddleMouseUp(e)
+		);
+		// XButton1
+		UpdateButtonState(
+			time, uIElement, flag2,
+			ref mouseXButton1Data,
+			e => e.Target.XButton1Click(e),
+			e => e.Target.XButton1DoubleClick(e),
+			e => e.Target.XButton1MouseDown(e),
+			e => e.Target.XButton1MouseUp(e)
+		);
+		// XButton2
+		UpdateButtonState(
+			time, uIElement, flag2,
+			ref mouseXButton2Data,
+			e => e.Target.XButton2Click(e),
+			e => e.Target.XButton2DoubleClick(e),
+			e => e.Target.XButton2MouseDown(e),
+			e => e.Target.XButton2MouseUp(e)
+		);
+
 		if (PlayerInput.ScrollWheelDeltaForUI != 0) {
 			uIElement?.ScrollWheel(new UIScrollWheelEvent(uIElement, MousePosition, PlayerInput.ScrollWheelDeltaForUI));
+			// Moved to after SystemHooks.UpdateUI(gameTime);
+			/*
 			PlayerInput.ScrollWheelDeltaForUI = 0;
+			*/
 		}
+	}
 
+	// Another split, to be called in 'finally'.
+	private void Update_End(GameTime time, bool flag)
+	{
 		_wasMouseDown = flag;
+		mouseRightData.WasDown = mouseRightData.IsDown;
+		mouseMiddleData.WasDown = mouseMiddleData.IsDown;
+		mouseXButton1Data.WasDown = mouseXButton1Data.IsDown;
+		mouseXButton2Data.WasDown = mouseXButton2Data.IsDown;
+
 		if (_currentState != null)
 			_currentState.Update(time);
 	}
