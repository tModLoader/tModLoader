--- src/TerrariaNetCore/Terraria/ID/ContentSamples.cs
+++ src/tModLoader/Terraria/ID/ContentSamples.cs
@@ -1,7 +_,10 @@
+using System;
 using System.Collections.Generic;
 using System.Linq;
 using Terraria.GameContent.Bestiary;
 using Terraria.Graphics.Shaders;
+using Terraria.ModLoader;
+using Terraria.Utilities;
 
 namespace Terraria.ID;
 
@@ -93,7 +_,15 @@
 			public ItemGroupAndOrderInGroup(Item item)
 			{
 				ItemType = item.type;
+
+				try {
-				Group = GetItemGroup(item, out OrderInGroup);
+					Group = GetItemGroup(item, out OrderInGroup);
+				}
+				catch (Exception e) {
+					throw new Exception($"An exception occured while processing {(ItemLoader.IsModItem(item.type) ? item.ModItem.FullName : item.Name)}", e);
+				}
+
+				ItemLoader.ModifyResearchSorting(item, ref Group);
 			}
 		}
 
@@ -639,7 +_,7 @@
 		public static void SetCreativeMenuOrder()
 		{
 			List<Item> list = new List<Item>();
-			for (int i = 1; i < ItemID.Count; i++) {
+			for (int i = 1; i < ItemLoader.ItemCount; i++) {
 				Item item = new Item();
 				item.SetDefaults(i);
 				list.Add(item);
@@ -719,26 +_,85 @@
 		public static int GetBestiaryStarsPriority(NPC npc) => NpcBestiaryRarityStars[npc.type];
 	}
 
+	/// <summary>
+	/// The default <see cref="NPC"/> for a given <see cref="NPCID"/>.
+	/// </summary>
 	public static Dictionary<int, NPC> NpcsByNetId = new Dictionary<int, NPC>();
+
+	/// <summary>
+	/// The default <see cref="Projectile"/> for a given <see cref="ProjectileID"/>.
+	/// </summary>
 	public static Dictionary<int, Projectile> ProjectilesByType = new Dictionary<int, Projectile>();
+
+	/// <summary>
+	/// The default <see cref="Item"/> for a given <see cref="ItemID"/>.
+	/// </summary>
 	public static Dictionary<int, Item> ItemsByType = new Dictionary<int, Item>();
+
+	/// <summary>
+	/// The <see cref="ItemID"/> for a given persistent ID.
+	/// <br/> Vanilla persistent IDs are the names in <see cref="ItemID"/>. Modded persistent IDs are in the format <c>"<see cref="ModType.Mod"/>/<see cref="ModType.Name"/>"</c>.
+	/// </summary>
+	/// <remarks>
+	/// You can get the persistent ID of a given <see cref="ItemID"/> using either <see cref="ItemPersistentIdsByNetIds"/> or <see cref="ItemID.Search"/>.
+	/// </remarks>
 	public static Dictionary<string, int> ItemNetIdsByPersistentIds = new Dictionary<string, int>();
+
+	/// <summary>
+	/// The persistent ID for a given <see cref="ItemID"/>.
+	/// </summary>
 	public static Dictionary<int, string> ItemPersistentIdsByNetIds = new Dictionary<int, string>();
+
+	/// <summary>
+	/// Associates an <see cref="ItemID"/> with the <see cref="ItemID"/> it shares research values with.
+	/// </summary>
 	public static Dictionary<int, int> CreativeResearchItemPersistentIdOverride = new Dictionary<int, int>();
+
+	/// <summary>
+	/// The <see cref="NPCID"/> for a given persistent ID.
+	/// <br/> Vanilla persistent IDs are the names in <see cref="NPCID"/>. Modded persistent IDs are in the format <c>"<see cref="ModType.Mod"/>/<see cref="ModType.Name"/>"</c>.
+	/// </summary>
+	/// <remarks>
+	/// You can get the persistent ID of a given <see cref="NPCID"/> using either <see cref="NpcPersistentIdsByNetIds"/> or <see cref="NPCID.Search"/>.
+	/// </remarks>
 	public static Dictionary<string, int> NpcNetIdsByPersistentIds = new Dictionary<string, int>();
+
+	/// <summary>
+	/// The persistent ID for a given <see cref="NPCID"/>.
+	/// </summary>
 	public static Dictionary<int, string> NpcPersistentIdsByNetIds = new Dictionary<int, string>();
+
+	/// <summary>
+	/// The entry number in the Bestiary for a given <see cref="NPCID"/>.
+	/// </summary>
 	public static Dictionary<int, int> NpcBestiarySortingId = new Dictionary<int, int>();
+
+	/// <summary>
+	/// The number of stars a given <see cref="NPCID"/> shows in the Bestiary.
+	/// <br/> Set in <see cref="ModNPC.SetBestiary(BestiaryDatabase, BestiaryEntry)"/> or <see cref="GlobalNPC.SetBestiary(NPC, BestiaryDatabase, BestiaryEntry)"/>.
+	/// </summary>
 	public static Dictionary<int, int> NpcBestiaryRarityStars = new Dictionary<int, int>();
+
+	/// <summary>
+	/// Associates an <see cref="NPCID"/> with the persistent ID of 
+	/// </summary>
 	public static Dictionary<int, string> NpcBestiaryCreditIdsByNpcNetIds = new Dictionary<int, string>();
+
+	/// <summary>
+	/// Associates an <see cref="ItemID"/> with its <see cref="CreativeHelper.ItemGroup"/> and sorting order in the Research menu.
+	/// </summary>
 	public static Dictionary<int, CreativeHelper.ItemGroupAndOrderInGroup> ItemCreativeSortingId = new Dictionary<int, CreativeHelper.ItemGroupAndOrderInGroup>();
 
 	public static void Initialize()
 	{
+		// Make sure that random was initialized.
+		Main.rand ??= new UnifiedRandom((int)DateTime.Now.Ticks);
+
 		NpcsByNetId.Clear();
 		NpcNetIdsByPersistentIds.Clear();
 		NpcPersistentIdsByNetIds.Clear();
 		NpcBestiarySortingId.Clear();
-		for (int i = -65; i < NPCID.Count; i++) {
+		for (int i = -65; i < NPCLoader.NPCCount; i++) {
 			NPC nPC = new NPC();
 			nPC.SetDefaults(i);
 			NpcsByNetId[i] = nPC;
@@ -750,14 +_,14 @@
 
 		ModifyNPCIds();
 		ProjectilesByType.Clear();
-		for (int j = 0; j < ProjectileID.Count; j++) {
+		for (int j = 0; j < ProjectileLoader.ProjectileCount; j++) {
 			Projectile projectile = new Projectile();
 			projectile.SetDefaults(j);
 			ProjectilesByType[j] = projectile;
 		}
 
 		ItemsByType.Clear();
-		for (int k = 0; k < ItemID.Count; k++) {
+		for (int k = 0; k < ItemLoader.ItemCount; k++) {
 			Item item = new Item();
 			item.SetDefaults(k);
 			ItemsByType[k] = item;
@@ -955,7 +_,7 @@
 		NPCSpawnParams nPCSpawnParams = default(NPCSpawnParams);
 		nPCSpawnParams.gameModeData = Main.RegisteredGameModes[0];
 		NPCSpawnParams spawnparams = nPCSpawnParams;
-		for (int i = -65; i < NPCID.Count; i++) {
+		for (int i = -65; i < NPCLoader.NPCCount; i++) {
 			NPC nPC = new NPC();
 			nPC.SetDefaults(i, spawnparams);
 			NpcBestiaryRarityStars[i] = GetNPCBestiaryRarityStarsCount(nPC);
