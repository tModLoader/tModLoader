--- src/TerrariaNetCore/Terraria/ID/MessageID.cs
+++ src/tModLoader/Terraria/ID/MessageID.cs
@@ -1,84 +_,369 @@
 using Terraria.Utilities;
+using System;
+using System.Collections.Generic;
+using System.Reflection;
+using System.Linq;
 
 namespace Terraria.ID;
 
-public class MessageID
+// The comments here may be quite outdated, and constants need to be made sense of.
+
+public partial class MessageID
 {
 	public const byte NeverCalled = 0;
+
+	// Set by the client when the socket connects, client connection state 0->1
+	// Sends a string "Terraria{Main.curRelease}"
+	// Checks if a client is banned, and kicks if so
+	// Does a version check and kicks if the version is not equal
+	// If the server has a password, sends RequestPassword, otherwise sends LoadPlayer
+	// TModLoader changes the version string to ModLoader.versionedName
+	// If the server accepts vanilla clients and the client sent a vanilla version tModLoader flags them as a vanilla client and communicates using an unmodified protocol
+	// Otherwise sends SyncMods instead of LoadPlayer
 	public const byte Hello = 1;
+
+	// Kick with reason, displays the text "{ip} was booted: {reason}" in the server console
 	public const byte Kick = 2;
+
+	// Sent once the server has accepted the player and assigned an id
+	// Client connection state 1->2
+	// Client sends SyncPlayer, ClientUUID, PlayerHealth, PlayerMana, PlayerBuffs and SyncEquipment
+	// TModLoader calls PlayerLoader.SyncPlayer
+	// Client sends RequestWorldInfo
+	// Client connection state 2->3
 	public const byte PlayerInfo = 3;
+
+	// Sends a player's name, visual configuration, accessory visibility, difficulty and extra accessory flag
+	// Kicks if the playername is empty, too long, or the same as another player on the server
+	// Forwarded to other clients
 	public const byte SyncPlayer = 4;
+
+	// Sends item slot, type, quantity, prefix, and then mod data with ItemIO.SendModData
+	// Item slot is an index into a contiguous array of the player's (inventory, armor, miscEqups, miscDyes, bank, safe and trash)
+	// Packet will be ignored on the client unless they are quick-stacking to chests because clients have authority over their inventory
+	// Forwarded to other clients if it is not a bank, safe or trash slot
 	public const byte SyncEquipment = 5;
+
+	// Sent by the client in response to LoadPlayer, after all player data has been sent, and the client state is transitioning from 2->3
+	// Server calls RemoteClient.ResetSections and state 1->2
+	// Server responds with WorldInfo and InvasionProgressReport
 	public const byte RequestWorldData = 6;
+
+	// Time of day, weather, events, world size and name, biome info, killed bosses, etc
+	// Sent whenever any of the properties in the packet change (except time of day, which gets synced whenever other properties change anyway)
+	// Client connection state 3->4
 	public const byte WorldData = 7;
+
+	// Client state 5->6
+	// Client sends requested spawn location
+	// Server sends RequestTileData, TileSection, FrameSection for 5x3 section blocks around the requested and default spawns,
+	//    and 3x3 section blocks around the exits of any portals in the spawn areas
+	// SyncItem and ItemOwner for every active item
+	// SyncNPC for every active npc
+	// SyncProjectile for every active projectile with the netImportant property or listed in Main.projPet
+	// NPCKillCountDeathTally for the first 250 NPCs (though I don't know why)
+	// StartPlaying, TileCounts, WorldInfo, MoonlordCountdown, UpdateTowerShieldStrengths
 	public const byte SpawnTileData = 8;
+
+	// Sets the client status text
+	// Only use is before NetMessage.SendSection with message "Receiving tile data"
 	public const byte StatusTextSize = 9;
+
+	// Sends a compressed 200x150 block section of the map
+	// Sent from NetMessage.SendSection which also sends NPCInfo for all npcs in the section
 	public const byte TileSection = 10;
+
+	// Frames a rectangle of tile sections
+	// TModLoader changes walls from byte to short
+	// Sent after a NetMessage.SendSection block
 	[Old("Deprecated. Framing happens as needed after TileSection is sent.")]
 	public const byte TileFrameSection = 11;
+
+	// Sent from Player.Spawn
+	// If this is the first spawn for a connected client
+	//    RemoteClient state 3->10
+	//    NetMessage.syncPlayers()
+	//    responds with AnglerQuest
+	// Forwarded to other clients
 	public const byte PlayerSpawn = 12;
+
+	// Player movement keystates, item actions, grapple, gravity, stealth and velocity
+	// Primarily sent from sync with clientClone
+	// Forwarded to other clients
 	public const byte PlayerControls = 13;
+
+	// Sets player[i].active
+	// Sent from NetMessage.syncPlayers
 	public const byte PlayerActive = 14;
+
 	[Old("Deprecated.")]
-	public const byte Unknown15 = 15;
+	public const byte Unused15 = 15;
+
+	// Player's current and maximum life
+	// Sent on change, and as part of various syncs
+	// Dead flag is set if life <= 0
+	// Forwarded to other clients
 	public const byte PlayerLifeMana = 16;
+
+	// ChangeType, x, y, tileType, style,
+	// ChangeType WorldGen.{
+	//    KillTile = 0, PlaceTile = 1, KillWall = 2, PlaceWall = 3, KillTileNoItem = 4,
+	//    PlaceWire = 5, KillWire = 6, PoundTile = 7, PlaceActuator = 8, KillActuator = 9
+	//    PlaceWire2 = 10, KillWire2 = 11, PlaceWire3 = 12, KillWire3 = 13, SlopeTile = 14, FrameTrack = 15 }
+	// Forwarded to other clients
+	// If changeType == PlaceTile and tileType == TileID.Sand sends a 1 block TileSquare
 	public const byte TileManipulation = 17;
+
+	// Doesn't seem like this is actually sent anywhere
 	public const byte SetTime = 18;
+
+	// ChangeType, x, y, direction
+	// ChangeType WorldGen.{
+	//    OpenDoor = 0, CloseDoor = 1,
+	//    ShiftTrapdoor(onlyCloseOrOpen = 1) = 2, ShiftTrapdoor(onlyCloseOrOpen = 0) = 3,
+	//    ShiftTallGate(closing = false) = 4, ShiftTallGate(closing = true) = 5 }
+	// Forwarded to other clients
 	public const byte ToggleDoorState = 19;
+
+	// Sends a square area of tile data (with upper left x, y) and given size (minimum 1)
+	// TModLoader changes walls from byte to short
+	// Forwarded to other clients
-	public const byte Unknown20 = 20;
+	public const byte TileSquare = 20;
+
+	// Sends all info about an item in the world
+	// ItemIO.SendModData appends data to this packet
+	// Forwarded to other clients
 	public const byte SyncItem = 21;
+
+	// Sets the owner of an item
+	// If set to a player, sets Item.keepTime to 15
+	// Server rejects packets that don't try and set owner to the sender's playerID
+	// Server always sets owner to 255
+	// Forwarded to other clients
 	public const byte ItemOwner = 22;
+
+	// Sends all info about an NPC, position, velocity, and AI
+	// NPCLoader.SendExtraAI appends data to this packet
+	// Forwarded to other clients
 	public const byte SyncNPC = 23;
+
+	// Hit an NPC, presumably unused because it uses the item damage/knockback directly without the random variance
 	public const byte UnusedMeleeStrike = 24;
+
+	// A line of chat text, with sender and colour information
 	[Old("Deprecated. Use NetTextModule instead.")]
-	public const byte Unused25 = 25;
+	public const byte ChatText = 25;
+
+	// Damage, direction, pvp, deathText, crit, cooldown
+	// Forwarded to other clients
 	[Old("Deprecated.")]
-	public const byte Unused26 = 26;
+	public const byte HurtPlayer = 26;
+
+	// Sends all info about a projectile, position, velocity, and AI
+	// ProjectileLoader.SendExtraAI appends data to this packet
+	// Forwarded to other clients
 	public const byte SyncProjectile = 27;
+
+	// NpcID, damage, knockback, direction, crit
+	// Forwarded to other clients
 	public const byte DamageNPC = 28;
+
+	// Sent from Projectile.Kill
+	// Forwarded to other clients
 	public const byte KillProjectile = 29;
+
+	// Forwarded to other clients
+	// Forwarding includes the chat message "{player} has {en/dis}abled PvP"
 	public const byte TogglePVP = 30;
+
+	// If the server finds a chest not in use, it responds with
+	// SyncChestItem for every item in the chest
+	// SyncPlayerChest, SyncPlayerChestIndex
 	public const byte RequestChestOpen = 31;
+
+	// ChestIndex, slot, stack, prefix, itemType
+	// ItemIO.ReceiveModData appends to this packet
 	public const byte SyncChestItem = 32;
+
+	// ChestIndex, x, y, nameLen, name
+	// Name is only sent if nameLen <= 20
+	// On client, does the open and close sounds (if changed)
+	// On server, sends ChestName and SyncPlayerChestIndex to other clients
 	public const byte SyncPlayerChest = 33;
+
+	// ChangeType, x, y, chestType, [chestIndex]
+	// ChangeType { PlaceChest, KillChest, PlaceDresser, KillDresser, PlaceChest2, KillChest2 }
+	// TMod adds 100 to first 4 changeTypes and sends modType
+	// On server {
+	//    if a place fails, the packet is sent back to the client, and the item dropped
+	//    if a place succeeds the packet is forwarded to all clients with chestIndex = WorldGen.PlaceChest
+	//    if a destroy succeeds, the packet is forwarded to all clients with chestIndex = -1
+	// }
+	// On client {
+	//    a place with chestIndex = -1 calls WorldGen.KillTile
+	//    a place with valid chestIndex calles WorldGen.PlaceChestDirect or PlaceDresserDirect
+	//    a destroy calls Chest.DestroyChestDirect and WorldGen.KillTile
+	// }
 	public const byte ChestUpdates = 34;
+
+	// Restores health
+	// Forwarded to other clients
 	public const byte PlayerHeal = 35;
+
+	// Player.zone1 and zone2, containing the biome information
+	// Forwarded to other clients
+	// Sent on change
 	public const byte SyncPlayerZone = 36;
+
+	// Sent by the server to display the password input menu.
+	// Sets RemoteClient.State = -1
 	public const byte RequestPassword = 37;
+
+	// Checks the supplied password and responds with either KickClient or Login
 	public const byte SendPassword = 38;
+
+	// Sets Item.owner = 255
+	// Sent by the server when the item release count hits 300 (every 5 seconds)
+	// Client responds with ItemOwner
 	public const byte ReleaseItemOwnership = 39;
+
+	// Player.talkNPC, sent on change
+	// Forwarded to other clients
 	public const byte SyncTalkNPC = 40;
+
+	// Player.itemRotation, itemAnimation and channel
+	// Forwarded to other clients
 	public const byte ShotAnimationAndSound = 41;
-	public const byte Unknown42 = 42;
-	public const byte Unknown43 = 43;
+
+	// Player's current and maximum mana
+	// Sent on change, and the major client and server sync
+	public const byte PlayerMana = 42;
+
+	// Restores mana
+	// Forwarded to other clients
+	public const byte ManaEffect = 43;
+
+	// Player.KillMe
+	// Forwarded to other clients
 	[Old("Deprecated.")]
-	public const byte Unknown44 = 44;
-	public const byte Unknown45 = 45;
-	public const byte Unknown46 = 46;
-	public const byte Unknown47 = 47;
+	public const byte KillPlayer = 44;
+
+	// Forwarded to clients
+	// Forwarding includes the chat message "{player} has joined the {team} party"
+	public const byte PlayerTeam = 45;
+
+	// If the server finds a sign at the location, it replies with ReadSign
+	public const byte RequestReadSign = 46;
+
+	// SignIndex, x, y, text, player
+	// If the text changes on the server, the packet is forwarded to other clients
+	// Opens the sign gui and plays the sound on the client
+	public const byte ReadSign = 47;
+
+	// X, y, liquid, liquidType
+	// If NetPlayer.spamCheck will kick the player if the placement position is more than 10 tiles from the player
 	[Old("Deprecated. Use NetLiquidModule instead.")]
 	public const byte LiquidUpdate = 48;
+
+	// Spawns a newly joined player
+	// Client state 6->10
+	// Calls Player.Spawn which sends SpawnPlayer to the server
+	// Sent from RequestTileData once the world is ready for the player to spawn
 	public const byte InitialSpawn = 49;
+
+	// Contents of Player.buffType
+	// On receipt, the buffTime for active buffs is set to 60 ticks (1 second)
+	// BuffTime is only ever decremented on the owner's client, and the server relies on the client resending this packet when buffs are generated or expire
+	// Forwarded to other clients
 	public const byte PlayerBuffs = 50;
+
+	// Param, actionType
+	// ActionType {
+	// 1 - NPC.SpawnSkeletron
+	// 2 - Play grapple sound at the position of Main.player[param]. forwarded to other clients
+	// 3 - Main.Sundialing
+	// 4 - Main.npc[param].BigMimicSpawnSmoke
+	// }
 	public const byte MiscDataSync = 51;
+
+	// UnlockType, x, y
+	// If unlockType { Chest.Unlock = 1, WorldGen.UnlockDoor = 2 }
+	// Sends TileSquare to all clients
+	// Forwarded to other clients
 	public const byte LockAndUnlock = 52;
+
+	// NpcID, buffType, duration
+	// NPC.AddBuff sends this if netMode is client
+	// Adds a buff to an NPC
+	// SyncNPCBuff is sent to all clients
 	public const byte AddNPCBuff = 53;
+
+	// Sends all buffs on an npc
 	public const byte NPCBuffs = 54;
+
+	// Server does nothing except forward the packet to the buffed player IF the buff is a pvpBuff
+	// Client rejects packets for other players
 	public const byte AddPlayerBuff = 55;
+
+	// NPC.displayName for town NPCs and Skeleton Merchant
+	// Client sends this after SetDefaults (npcNameLookup = 0) 'help I don't know what their name is'
+	// Server replies with name
 	public const byte UniqueTownNPCInfoSyncRequest = 56;
+
+	// Hallowed/corrupted/crimson tile counts (out of 100)
-	public const byte Unknown57 = 57;
+	public const byte TileCounts = 57;
+
+	// Main.harpNote = pitch
+	// Plays harp or bell sound based on held item at player position
+	// Forwarded to other clients
 	public const byte InstrumentSound = 58;
+
+	// Wiring.HitSwitch(x, y)
+	// Forwarded to other clients
 	public const byte HitSwitch = 59;
+
+	// NpcID, homeX, homeY, changeType
+	// ChangeType WorldGen.{ kickOut = 0, moveRoom = 1 }
+	// Sent by client on WorldGen.kickOut/moveRoom, propogated by server in UpdateNPC
-	public const byte Unknown60 = 60;
+	public const byte NPCHome = 60;
+
+	// Player, npcID
+	// Only sent by client, accepted by server
+	// NpcID capped at 540, no mod support
+	// NpcID must be contained in NPCID.Sets.MPAllowedEnemies and there must be no other instances of the boss in the world
+	// Special events for npcID {
+	//    GoblinArmy = -1, FrostLegion = -2, Pirates = -3
+	//    PumpkinMoon = -4, SnowMoon = -5, Eclipse = -6, MartianInvation = -7,
+	//    MoonLordTimer = -8 if (NPC.downedGolemBoss && Main.HardMode && !NPC.AnyDanger && !NPC.AnyoneNearCultists)
+	// }
 	public const byte SpawnBossUseLicenseStartEvent = 61;
-	public const byte Unknown62 = 62;
-	public const byte Unknown63 = 63;
-	public const byte Unknown64 = 64;
+
+	// Player, dodgeType { NinjaDodge = 1, ShadowDodge = 2 }
+	// Forwarded to other clients
+	public const byte Dodge = 62;
+
+	// WorldGen.paintTile(x, y, color)
+	// Forwarded to other clients
+	public const byte PaintTile = 63;
+
+	// WorldGen.paintWall(x, y, color)
+	// Forwarded to other clients
+	public const byte PaintWall = 64;
+
+	// TeleportType, index, position
+	// First 2 bits of teleportType { Player = 0, NPC = 1, PlayerToPlayer = 2 }
+	// Next 2 bits of teleportType = Style parameter to Teleport
+	// If PlayerToPlayer, the nearest player in 9999 units is found, and a chat message sent "{player} has teleported to {player2}"
+	// Index is set to whoAmI on server, so NPC teleports cannot be sent from client
+	// Player teleports are forwarded to other clients
 	public const byte TeleportEntity = 65;
-	public const byte Unknown66 = 66;
+	public const byte SpiritHeal = 66;
 	public const byte Unknown67 = 67;
+	// Client sends this in response to LoadPlayer, server ignores it
-	public const byte Unknown68 = 68;
+	public const byte ClientUUID = 68;
+
+	// ChestIndex, x, y, name
+	// Forwarded to other clients
 	public const byte ChestName = 69;
 	public const byte BugCatching = 70;
 	public const byte BugReleasing = 71;
@@ -91,15 +_,39 @@
 	public const byte InvasionProgressReport = 78;
 	public const byte PlaceObject = 79;
 	public const byte SyncPlayerChestIndex = 80;
+	/// <summary>
+	/// Sends a <see cref="CombatText"/> from the server to clients. Sends a number, use <see cref="CombatTextString"/> instead for the string version. Used automatically by <see cref="Player.HealEffect(int, bool)"/>, but custom <see cref="CombatText"/> would need to manually sync using this message.
+	/// <para/> NetMessage.SendData parameters, correlating to <see cref="CombatText.NewText(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Color, int, bool, bool)"/> parameters:
+	/// <br/><b>number:</b> The text color: <see cref="Microsoft.Xna.Framework.Color.PackedValue"/>
+	/// <br/><b>number2:</b> The CombatText center X coordinate
+	/// <br/><b>number3:</b> The CombatText center Y coordinate
+	/// <br/><b>number4:</b> The number shown by the CombatText
+	/// </summary>
 	public const byte CombatTextInt = 81;
+
+	// Used by NetModule, NetMaager and NetPacket for a more extensible packet system.
+	// Sent by NetManager.SendData
+	// Handled by NetManager.Read
+	// Currently the only module (id 0) is the NetLiquidModule
 	public const byte NetModules = 82;
+
+	// BannerID, killCount
+	// Supports modded banners now that check for bannerID > 267 removed
+	// Sent to all clients whenever an npc with a banner is killed
 	public const byte NPCKillCountDeathTally = 83;
 	public const byte PlayerStealth = 84;
+
+	// Requests chest quick-stacking of a single item
+	// The client Player.inventoryChestStack flag is set
+	// The server performs the quickstack and sends a SyncEquipment packet to all players
 	public const byte QuickStackChests = 85;
 	public const byte TileEntitySharing = 86;
 	public const byte TileEntityPlacement = 87;
 	public const byte ItemTweaker = 88;
 	public const byte ItemFrameTryPlacing = 89;
+
+	// Exactly the same as SyncItem, but sets the instanced flag and is only sent server -> client
+	// Currently only used for boss bags
 	public const byte InstancedItem = 90;
 	public const byte SyncEmoteBubble = 91;
 	public const byte SyncExtraValue = 92;
@@ -129,6 +_,14 @@
 	public const byte CrystalInvasionSendWaitTime = 116;
 	public const byte PlayerHurtV2 = 117;
 	public const byte PlayerDeathV2 = 118;
+	/// <summary>
+	/// Sends a <see cref="CombatText"/> from the server to clients. Sends a string, use <see cref="CombatTextInt"/> instead for the int version. Used automatically by <see cref="Player.HealEffect(int, bool)"/>, but custom <see cref="CombatText"/> would need to manually sync using this message.
+	/// <para/> NetMessage.SendData parameters, correlating to <see cref="CombatText.NewText(Microsoft.Xna.Framework.Rectangle, Microsoft.Xna.Framework.Color, string, bool, bool)"/> parameters:
+	/// <br/><b>number:</b> The text color: <see cref="Microsoft.Xna.Framework.Color.PackedValue"/>
+	/// <br/><b>number2:</b> The CombatText center X coordinate
+	/// <br/><b>number3:</b> The CombatText center Y coordinate
+	/// <br/><b>text:</b> The text shown by the CombatText
+	/// </summary>
 	public const byte CombatTextString = 119;
 	public const byte Emoji = 120;
 	public const byte TEDisplayDollItemSync = 121;
