--- src/TerrariaNetCore/Terraria/ID/NPCID.cs
+++ src/tModLoader/Terraria/ID/NPCID.cs
@@ -3,12 +_,13 @@
 using Microsoft.Xna.Framework;
 using ReLogic.Reflection;
 using Terraria.DataStructures;
+using Terraria.ModLoader;
 
 namespace Terraria.ID;
 
-public class NPCID
+public partial class NPCID
 {
-	public static class Sets
+	public static partial class Sets
 	{
 		public struct NPCBestiaryDrawModifiers
 		{
@@ -64,7 +_,7 @@
 			public const int BloodButcherer = 344;
 		}
 
-		public static SetFactory Factory = new SetFactory(688);
+		public static SetFactory Factory = new SetFactory(NPCLoader.NPCCount);
 		public static Dictionary<int, int> SpecialSpawningRules = new Dictionary<int, int> {
 			{ 259, 0 },
 			{ 260, 0 },
@@ -4993,7 +_,10 @@
 		public static bool[] NoEarlymodeLootWhenSpawnedFromStatue = Factory.CreateBoolSet(480, 82, 86, 170, 180, 171);
 		public static bool[] NeedsExpertScaling = Factory.CreateBoolSet(25, 30, 665, 33, 112, 666, 261, 265, 371, 516, 519, 397, 396, 398, 491);
 		public static bool[] ProjectileNPC = Factory.CreateBoolSet(25, 30, 665, 33, 112, 666, 261, 265, 371, 516, 519);
+
+		//TML: Made internal, modders should use hooks instead.
-		public static bool[] SavesAndLoads = Factory.CreateBoolSet(422, 507, 517, 493);
+		internal static bool[] SavesAndLoads = Factory.CreateBoolSet(422, 507, 517, 493);
+
 		public static int[] TrailCacheLength = Factory.CreateIntSet(10, 402, 36, 519, 20, 522, 20, 620, 20, 677, 60, 685, 10);
 		public static bool[] UsesMultiplayerProximitySyncing = Factory.CreateBoolSet(true, 398, 397, 396);
 		public static bool[] NoMultiplayerSmoothingByType = Factory.CreateBoolSet(113, 114, 50, 657, 120, 245, 247, 248, 246, 370, 222, 398, 397, 396, 400, 401, 668, 70);
@@ -5246,16 +_,28 @@
 			Dictionary<int, NPCBestiaryDrawModifiers> leinforsEntries = GetLeinforsEntries();
 			Dictionary<int, NPCBestiaryDrawModifiers> groxEntries = GetGroxEntries();
 			Dictionary<int, NPCBestiaryDrawModifiers> dictionary = new Dictionary<int, NPCBestiaryDrawModifiers>();
+
+			// This local function is used to filter paths in modifiers before they're added to the dictionary,
+			// since we can't later modify the dictionary while enumerating it.
+			NPCBestiaryDrawModifiers FilterPaths(NPCBestiaryDrawModifiers modifiers)
+			{
+				if (modifiers.CustomTexturePath != null) {
+					modifiers.CustomTexturePath = $"Terraria/{modifiers.CustomTexturePath}";
+				}
+
+				return modifiers;
+			}
+
 			foreach (KeyValuePair<int, NPCBestiaryDrawModifiers> item in groxEntries) {
-				dictionary[item.Key] = item.Value;
+				dictionary[item.Key] = FilterPaths(item.Value);
 			}
 
 			foreach (KeyValuePair<int, NPCBestiaryDrawModifiers> item2 in leinforsEntries) {
-				dictionary[item2.Key] = item2.Value;
+				dictionary[item2.Key] = FilterPaths(item2.Value);
 			}
 
 			foreach (KeyValuePair<int, NPCBestiaryDrawModifiers> item3 in redigitEntries) {
-				dictionary[item3.Key] = item3.Value;
+				dictionary[item3.Key] = FilterPaths(item3.Value);
 			}
 
 			return dictionary;
