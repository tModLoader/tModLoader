--- src/TerrariaNetCore/Terraria/Utils.cs
+++ src/tModLoader/Terraria/Utils.cs
@@ -25,7 +_,7 @@
 
 namespace Terraria;
 
-public static class Utils
+public static partial class Utils
 {
 	public delegate bool TileActionAttempt(int x, int y);
 
@@ -294,7 +_,8 @@
 		ArrayList arrayList = new ArrayList();
 		string text = "";
 		for (int i = 0; i < brokenArgs.Length; i++) {
-			if (brokenArgs[i].StartsWith("-")) {
+			//TML: Steam uses +connect_lobby as an argument, so had to add == "+" so this wouldn't break that argument.
+			if (brokenArgs[i].StartsWith("-") || brokenArgs[i].StartsWith("+")) {
 				if (text != "") {
 					arrayList.Add(text);
 					text = "";
@@ -375,6 +_,14 @@
 							num2 -= 16;
 
 						int num3 = Math.Min(list3[l].Text.Length, num2 / 8);
+
+						// Loop added by TML. Explain what this is?
+						for (int i = 0; i < list3[l].Text.Length; i++) {
+							// TODO: hypen?, more efficient, binary search?, use ChatManager.GetStringSize to support other tags better.
+							if (font.MeasureString(list3[l].Text.Substring(0, i)).X * list3[l].Scale < num2)
+								num3 = i;
+						}
+
 						if (num3 < 0)
 							num3 = 0;
 
@@ -644,17 +_,32 @@
 			return false;
 		}
 	}
+	private static void OpenFolderXdg(string folderPath)
+	{
+		ProcessStartInfo processStartInfo = new ProcessStartInfo {
+			FileName = "xdg-open",
+			Arguments = folderPath,
+			UseShellExecute = true,
+			CreateNoWindow = true
+		};
+
+		processStartInfo.EnvironmentVariables["LD_LIBRARY_PATH"] = "/usr/lib:/lib";
+		Process.Start(processStartInfo);
+	}
 
 	public static void OpenFolder(string folderPath)
 	{
 		if (TryCreatingDirectory(folderPath)) {
 			if (Platform.IsLinux) {
+				/*
 				Process.Start(new ProcessStartInfo(folderPath) {
 					FileName = "open-folder",
 					Arguments = folderPath,
 					UseShellExecute = true,
 					CreateNoWindow = true
 				});
+				*/
+				OpenFolderXdg(folderPath);
 			}
 			else {
 				Process.Start(new ProcessStartInfo(folderPath) { UseShellExecute = true });
@@ -669,6 +_,11 @@
 		return array;
 	}
 
+	/// <summary>
+	/// Generates a random value between 0f (inclusive) and 1f (exclusive). <br/>It will not return 1f.
+	/// </summary>
+	/// <param name="r"></param>
+	/// <returns></returns>
 	public static float NextFloat(this UnifiedRandom r) => (float)r.NextDouble();
 	public static float NextFloatDirection(this UnifiedRandom r) => (float)r.NextDouble() * 2f - 1f;
 	public static float NextFloat(this UnifiedRandom random, FloatRange range) => random.NextFloat() * (range.Maximum - range.Minimum) + range.Minimum;
@@ -1383,6 +_,8 @@
 			text.Substring(0, maxCharactersDisplayed);
 
 		DynamicSpriteFont value = FontAssets.DeathText.Value;
+
+		/*
 		for (int i = -1; i < 2; i++) {
 			for (int j = -1; j < 2; j++) {
 				spriteBatch.DrawString(value, text, pos + new Vector2(i, j), Color.Black, 0f, new Vector2(anchorx, anchory) * value.MeasureString(text), scale, SpriteEffects.None, 0f);
@@ -1391,6 +_,11 @@
 
 		spriteBatch.DrawString(value, text, pos, color, 0f, new Vector2(anchorx, anchory) * value.MeasureString(text), scale, SpriteEffects.None, 0f);
 		return value.MeasureString(text) * scale;
+		*/
+
+		Vector2 vector = ChatManager.GetStringSize(value, text, Vector2.One);
+		ChatManager.DrawColorCodedStringWithShadow(spriteBatch, value, text, pos, color, 0f, new Vector2(anchorx, anchory) * vector, new Vector2(scale), -1f, 2f);
+		return vector * scale;
 	}
 
 	public static void DrawInvBG(SpriteBatch sb, Rectangle R, Color c = default(Color))
