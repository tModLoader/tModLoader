--- src/TerrariaNetCore/Terraria/Utils.cs
+++ src/tModLoader/Terraria/Utils.cs
@@ -18,6 +_,7 @@
 using ReLogic.Utilities;
 using Terraria.DataStructures;
 using Terraria.GameContent;
+using Terraria.ModLoader.Engine;
 using Terraria.UI;
 using Terraria.UI.Chat;
 using Terraria.Utilities;
@@ -25,7 +_,7 @@
 
 namespace Terraria;
 
-public static class Utils
+public static partial class Utils
 {
 	public delegate bool TileActionAttempt(int x, int y);
 
@@ -75,10 +_,13 @@
 				continue;
 
 			if (args[i][0] == '-' || args[i][0] == '+') {
+				/*
 				if (text != null) {
 					dictionary.Add(text.ToLower(), text2);
 					text2 = "";
 				}
+				*/
+				AddArgToDictionary(text, ref text2, ref dictionary);
 
 				text = args[i];
 				text2 = "";
@@ -91,10 +_,13 @@
 			}
 		}
 
+		/*
 		if (text != null) {
 			dictionary.Add(text.ToLower(), text2);
 			text2 = "";
 		}
+		*/
+		AddArgToDictionary(text, ref text2, ref dictionary);
 
 		return dictionary;
 	}
@@ -278,6 +_,10 @@
 		return (t - from) / (to - from);
 	}
 
+	/// <summary>
+	/// Returns the current world time in a 24 hour clock representation. This value is derived from <see cref="Main.dayTime"/> and <see cref="Main.time"/>.
+	/// <para/> For example <c>Utils.GetDayTimeAs24FloatStartingFromMidnight() &lt; 6.50f</c> would check if the time is before 6:30 AM.
+	/// </summary>
 	public static float GetDayTimeAs24FloatStartingFromMidnight()
 	{
 		if (Main.dayTime)
@@ -294,7 +_,8 @@
 		ArrayList arrayList = new ArrayList();
 		string text = "";
 		for (int i = 0; i < brokenArgs.Length; i++) {
-			if (brokenArgs[i].StartsWith("-")) {
+			//TML: Steam uses +connect_lobby as an argument, so had to add == "+" so this wouldn't break that argument.
+			if (brokenArgs[i].StartsWith("-") || brokenArgs[i].StartsWith("+")) {
 				if (text != "") {
 					arrayList.Add(text);
 					text = "";
@@ -375,6 +_,14 @@
 							num2 -= 16;
 
 						int num3 = Math.Min(list3[l].Text.Length, num2 / 8);
+
+						// Loop added by TML. Explain what this is?
+						for (int i = 0; i < list3[l].Text.Length; i++) {
+							// TODO: hypen?, more efficient, binary search?, use ChatManager.GetStringSize to support other tags better.
+							if (font.MeasureString(list3[l].Text.Substring(0, i)).X * list3[l].Scale < num2)
+								num3 = i;
+						}
+
 						if (num3 < 0)
 							num3 = 0;
 
@@ -644,17 +_,32 @@
 			return false;
 		}
 	}
+	private static void OpenFolderXdg(string folderPath)
+	{
+		ProcessStartInfo processStartInfo = new ProcessStartInfo {
+			FileName = "xdg-open",
+			Arguments = folderPath,
+			UseShellExecute = true,
+			CreateNoWindow = true
+		};
+
+		processStartInfo.EnvironmentVariables["LD_LIBRARY_PATH"] = "/usr/lib:/lib";
+		Process.Start(processStartInfo);
+	}
 
 	public static void OpenFolder(string folderPath)
 	{
 		if (TryCreatingDirectory(folderPath)) {
 			if (Platform.IsLinux) {
+				/*
 				Process.Start(new ProcessStartInfo(folderPath) {
 					FileName = "open-folder",
 					Arguments = folderPath,
 					UseShellExecute = true,
 					CreateNoWindow = true
 				});
+				*/
+				OpenFolderXdg(folderPath);
 			}
 			else {
 				Process.Start(new ProcessStartInfo(folderPath) { UseShellExecute = true });
@@ -669,6 +_,11 @@
 		return array;
 	}
 
+	/// <summary>
+	/// Generates a random value between 0f (inclusive) and 1f (exclusive). <br/>It will not return 1f.
+	/// </summary>
+	/// <param name="r"></param>
+	/// <returns></returns>
 	public static float NextFloat(this UnifiedRandom r) => (float)r.NextDouble();
 	public static float NextFloatDirection(this UnifiedRandom r) => (float)r.NextDouble() * 2f - 1f;
 	public static float NextFloat(this UnifiedRandom random, FloatRange range) => random.NextFloat() * (range.Maximum - range.Minimum) + range.Minimum;
@@ -927,7 +_,9 @@
 	public static Vector2 ToVector2(this Point16 p) => new Vector2(p.X, p.Y);
 	public static Vector2D ToVector2D(this Point p) => new Vector2D(p.X, p.Y);
 	public static Vector2D ToVector2D(this Point16 p) => new Vector2D(p.X, p.Y);
+	/// <summary> <include file = 'CommonDocs.xml' path='Common/ToWorldCoordinates' /> </summary>
 	public static Vector2 ToWorldCoordinates(this Point p, float autoAddX = 8f, float autoAddY = 8f) => p.ToVector2() * 16f + new Vector2(autoAddX, autoAddY);
+	/// <summary> <include file = 'CommonDocs.xml' path='Common/ToWorldCoordinates' /> </summary>
 	public static Vector2 ToWorldCoordinates(this Point16 p, float autoAddX = 8f, float autoAddY = 8f) => p.ToVector2() * 16f + new Vector2(autoAddX, autoAddY);
 
 	public static Vector2 MoveTowards(this Vector2 currentPosition, Vector2 targetPosition, float maxAmountAllowedToMove)
@@ -939,14 +_,21 @@
 		return currentPosition + v.SafeNormalize(Vector2.Zero) * maxAmountAllowedToMove;
 	}
 
+	/// <summary> <include file = 'CommonDocs.xml' path='Common/ToTileCoordinates' /> </summary>
 	public static Point16 ToTileCoordinates16(this Vector2 vec) => new Point16((int)vec.X >> 4, (int)vec.Y >> 4);
 	public static Point16 ToTileCoordinates16(this Vector2D vec) => new Point16((int)vec.X >> 4, (int)vec.Y >> 4);
+	/// <summary> <include file = 'CommonDocs.xml' path='Common/ToTileCoordinates' /> </summary>
 	public static Point ToTileCoordinates(this Vector2 vec) => new Point((int)vec.X >> 4, (int)vec.Y >> 4);
 	public static Point ToTileCoordinates(this Vector2D vec) => new Point((int)vec.X >> 4, (int)vec.Y >> 4);
 	public static Point ToPoint(this Vector2 v) => new Point((int)v.X, (int)v.Y);
 	public static Point ToPoint(this Vector2D v) => new Point((int)v.X, (int)v.Y);
 	public static Vector2D ToVector2D(this Vector2 v) => new Vector2D(v.X, v.Y);
 
+	/// <summary>
+	/// <inheritdoc cref="Vector2.Normalize()"/>
+	/// <para/> If this Vector2 can't be normalized, either because it is a 0 length vector or has not a number values, <paramref name="defaultValue"/> will be returned instead as a fallback. It will not be normalized so using <see cref="Vector2.UnitX"/> or <see cref="Vector2.UnitY"/> is appropriate. <see cref="Vector2.Zero"/> can also be appropriate if the surrounding logic expects it.
+	/// <para/> Using SafeNormalize instead of Normalize avoids many difficult to anticipate issues that would cause bugs. 
+	/// </summary>
 	public static Vector2 SafeNormalize(this Vector2 v, Vector2 defaultValue)
 	{
 		if (v == Vector2.Zero || v.HasNaNs())
@@ -955,6 +_,7 @@
 		return Vector2.Normalize(v);
 	}
 
+	/// <summary> Returns the closest point on a line segment from <paramref name="A"/> to <paramref name="B"/> to another point <paramref name="P"/>. The resulting point will be on the line and not extend past A or B. </summary>
 	public static Vector2 ClosestPointOnLine(this Vector2 P, Vector2 A, Vector2 B)
 	{
 		Vector2 value = P - A;
@@ -1007,6 +_,7 @@
 	public static float DistanceSQ(this Vector2 Origin, Vector2 Target) => Vector2.DistanceSquared(Origin, Target);
 	public static Vector2 DirectionTo(this Vector2 Origin, Vector2 Target) => Vector2.Normalize(Target - Origin);
 	public static Vector2 DirectionFrom(this Vector2 Origin, Vector2 Target) => Vector2.Normalize(Origin - Target);
+	/// <summary> Returns true if the <paramref name="Target"/> is within <paramref name="MaxRange"/> world coordinate units of <paramref name="Origin"/>. </summary>
 	public static bool WithinRange(this Vector2 Origin, Vector2 Target, float MaxRange) => Vector2.DistanceSquared(Origin, Target) <= MaxRange * MaxRange;
 	public static Vector2 XY(this Vector4 vec) => new Vector2(vec.X, vec.Y);
 	public static Vector2 ZW(this Vector4 vec) => new Vector2(vec.Z, vec.W);
@@ -1017,6 +_,7 @@
 	public static string Hex3(this Color color) => (color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2")).ToLower();
 	public static string Hex4(this Color color) => (color.R.ToString("X2") + color.G.ToString("X2") + color.B.ToString("X2") + color.A.ToString("X2")).ToLower();
 
+	/// <summary> Converts a bool to 1 if true, -1 if false. Suitable for working with <see cref="Entity.direction"/> and <see cref="Projectile.spriteDirection"/>, or anything else related to geometry.</summary>
 	public static int ToDirectionInt(this bool value)
 	{
 		if (!value)
@@ -1025,6 +_,7 @@
 		return 1;
 	}
 
+	/// <summary> Converts a bool to 1 if true, 0 if false. </summary>
 	public static int ToInt(this bool value)
 	{
 		if (!value)
@@ -1383,14 +_,26 @@
 			text.Substring(0, maxCharactersDisplayed);
 
 		DynamicSpriteFont value = FontAssets.DeathText.Value;
+
+		TextSnippet[] snippets = ChatManager.ParseMessage(text, color).ToArray();
+		ChatManager.ConvertNormalSnippets(snippets);
+		Vector2 textSize = ChatManager.GetStringSize(value, snippets, Vector2.One);
+
 		for (int i = -1; i < 2; i++) {
 			for (int j = -1; j < 2; j++) {
+				/*
 				spriteBatch.DrawString(value, text, pos + new Vector2(i, j), Color.Black, 0f, new Vector2(anchorx, anchory) * value.MeasureString(text), scale, SpriteEffects.None, 0f);
+				*/
+				ChatManager.DrawColorCodedString(spriteBatch, value, snippets, pos + new Vector2(i, j), Color.Black, 0f, new Vector2(anchorx, anchory) * textSize, new Vector2(scale), out var _, maxWidth: -1, ignoreColors: true);
 			}
 		}
 
+		/*
 		spriteBatch.DrawString(value, text, pos, color, 0f, new Vector2(anchorx, anchory) * value.MeasureString(text), scale, SpriteEffects.None, 0f);
 		return value.MeasureString(text) * scale;
+		*/
+		ChatManager.DrawColorCodedString(spriteBatch, value, snippets, pos, color, 0f, new Vector2(anchorx, anchory) * textSize, new Vector2(scale), out var _, maxWidth: -1);
+		return textSize * scale;
 	}
 
 	public static void DrawInvBG(SpriteBatch sb, Rectangle R, Color c = default(Color))
