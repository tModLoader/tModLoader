--- src/TerrariaNetCore/Terraria/SceneMetrics.cs
+++ src/tModLoader/Terraria/SceneMetrics.cs
@@ -2,6 +_,7 @@
 using System.Collections.Generic;
 using Microsoft.Xna.Framework;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.WorldBuilding;
 
 namespace Terraria;
@@ -29,13 +_,14 @@
 	public bool CanPlayCreditsRoll;
 	public bool[] NPCBannerBuff = new bool[290];
 	public bool hasBanner;
-	private readonly int[] _tileCounts = new int[693];
+	internal int[] _tileCounts = new int[TileLoader.TileCount];
 	private readonly int[] _liquidCounts = new int[4];
 	private readonly List<Point> _oreFinderTileLocations = new List<Point>(512);
 	public int bestOre;
 
-	public Point? ClosestOrePosition { get; private set; }
+	//TML: The following pile of properties has had its setters publicized
 
+	public Point? ClosestOrePosition { get; set; }
 	public int ShimmerTileCount { get; set; }
 
 	public int EvilTileCount { get; set; }
@@ -46,55 +_,55 @@
 
 	public int ActiveMusicBox { get; set; }
 
-	public int SandTileCount { get; private set; }
+	public int SandTileCount { get; set; }
 
-	public int MushroomTileCount { get; private set; }
+	public int MushroomTileCount { get; set; }
 
-	public int SnowTileCount { get; private set; }
+	public int SnowTileCount { get; set; }
 
-	public int WaterCandleCount { get; private set; }
+	public int WaterCandleCount { get; set; }
 
-	public int PeaceCandleCount { get; private set; }
+	public int PeaceCandleCount { get; set; }
 
-	public int ShadowCandleCount { get; private set; }
+	public int ShadowCandleCount { get; set; }
 
-	public int PartyMonolithCount { get; private set; }
+	public int PartyMonolithCount { get; set; }
 
-	public int MeteorTileCount { get; private set; }
+	public int MeteorTileCount { get; set; }
 
-	public int BloodTileCount { get; private set; }
+	public int BloodTileCount { get; set; }
 
-	public int JungleTileCount { get; private set; }
+	public int JungleTileCount { get; set; }
 
-	public int DungeonTileCount { get; private set; }
+	public int DungeonTileCount { get; set; }
 
-	public bool HasSunflower { get; private set; }
+	public bool HasSunflower { get; set; }
 
-	public bool HasGardenGnome { get; private set; }
+	public bool HasGardenGnome { get; set; }
 
-	public bool HasClock { get; private set; }
+	public bool HasClock { get; set; }
 
-	public bool HasCampfire { get; private set; }
+	public bool HasCampfire { get; set; }
 
-	public bool HasStarInBottle { get; private set; }
+	public bool HasStarInBottle { get; set; }
 
-	public bool HasHeartLantern { get; private set; }
+	public bool HasHeartLantern { get; set; }
 
-	public int ActiveFountainColor { get; private set; }
+	public int ActiveFountainColor { get; set; }
 
-	public int ActiveMonolithType { get; private set; }
+	public int ActiveMonolithType { get; set; }
 
-	public bool BloodMoonMonolith { get; private set; }
+	public bool BloodMoonMonolith { get; set; }
 
-	public bool MoonLordMonolith { get; private set; }
+	public bool MoonLordMonolith { get; set; }
 
-	public bool EchoMonolith { get; private set; }
+	public bool EchoMonolith { get; set; }
 
-	public int ShimmerMonolithState { get; private set; }
+	public int ShimmerMonolithState { get; set; }
 
-	public bool HasCatBast { get; private set; }
+	public bool HasCatBast { get; set; }
 
-	public int GraveyardTileCount { get; private set; }
+	public int GraveyardTileCount { get; set; }
 
 	public bool EnoughTilesForShimmer => ShimmerTileCount >= ShimmerTileThreshold;
 
@@ -130,6 +_,8 @@
 		if (settings.ScanOreFinderData)
 			_oreFinderTileLocations.Clear();
 
+		SystemLoader.ResetNearbyTileEffects();
+
 		if (settings.BiomeScanCenterPositionInWorld.HasValue) {
 			Point point = settings.BiomeScanCenterPositionInWorld.Value.ToTileCoordinates();
 			Rectangle tileRectangle = new Rectangle(point.X - Main.buffScanAreaWidth / 2, point.Y - Main.buffScanAreaHeight / 2, Main.buffScanAreaWidth, Main.buffScanAreaHeight);
@@ -194,6 +_,8 @@
 
 					if (settings.ScanOreFinderData && Main.tileOreFinderPriority[tile.type] != 0)
 						_oreFinderTileLocations.Add(new Point(i, j));
+
+					TileLoader.NearbyEffects(i, j, tile.type, false);
 				}
 			}
 		}
@@ -206,7 +_,7 @@
 					if (tile2 == null || !tile2.active())
 						continue;
 
-					if (tile2.type == 104)
+					if (TileID.Sets.Clock[tile2.type])
 						HasClock = true;
 
 					switch (tile2.type) {
@@ -267,16 +_,24 @@
 							if (tile2.frameY >= 54)
 								BloodMoonMonolith = true;
 							break;
+						// Extra extra patch context.
 						case 657:
 							if (tile2.frameY >= 54)
 								EchoMonolith = true;
 							break;
+						// Extra patch context.
 						case 658: {
 							int shimmerMonolithState = tile2.frameY / 54;
 							ShimmerMonolithState = shimmerMonolithState;
 							break;
 						}
 					}
+
+					// This does not use TileLoader.IsModMusicBox because it needs the *exact* frameY for the second dict lookup
+					if (MusicLoader.tileToMusic.ContainsKey(tile2.type) && MusicLoader.tileToMusic[tile2.type].ContainsKey(tile2.frameY) && tile2.frameX == 36)
+						ActiveMusicBox = MusicLoader.tileToMusic[tile2.type][tile2.frameY];
+
+					TileLoader.NearbyEffects(k, l, tile2.type, true);
 				}
 			}
 		}
@@ -288,6 +_,8 @@
 		CanPlayCreditsRoll = ActiveMusicBox == 85;
 		if (settings.ScanOreFinderData)
 			UpdateOreFinderData();
+
+		SystemLoader.TileCountsAvailable(_tileCounts);
 	}
 
 	private void ExportTileCountsToMain()
@@ -388,6 +_,8 @@
 		Array.Clear(NPCBannerBuff, 0, NPCBannerBuff.Length);
 		hasBanner = false;
 		CanPlayCreditsRoll = false;
+		if(NPCBannerBuff.Length<ModLoader.NPCLoader.NPCCount)
+			Array.Resize(ref NPCBannerBuff, ModLoader.NPCLoader.NPCCount);
 	}
 
 	private void UpdateOreFinderData()
