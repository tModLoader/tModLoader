--- src/Terraria/Terraria/SceneMetrics.cs
+++ src/tModLoader/Terraria/SceneMetrics.cs
@@ -2,6 +_,7 @@
 using System;
 using System.Collections.Generic;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.WorldBuilding;
 
 namespace Terraria
@@ -28,8 +_,7 @@
 		public bool CanPlayCreditsRoll;
 		public bool[] NPCBannerBuff = new bool[289];
 		public bool hasBanner;
-		private readonly int[] _tileCounts = new int[624];
-		private readonly World _world;
+		internal int[] _tileCounts = new int[TileLoader.TileCount];
 		private readonly List<Point> _oreFinderTileLocations = new List<Point>(512);
 		public int bestOre;
 
@@ -60,47 +_,47 @@
 
 		public int SandTileCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int MushroomTileCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int SnowTileCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int WaterCandleCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int PeaceCandleCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int PartyMonolithCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int MeteorTileCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int BloodTileCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int JungleTileCount {
 			get;
-			private set;
+			set;
 		}
 
 		public int DungeonTileCount {
@@ -110,32 +_,32 @@
 
 		public bool HasSunflower {
 			get;
-			private set;
+			set;
 		}
 
 		public bool HasGardenGnome {
 			get;
-			private set;
+			set;
 		}
 
 		public bool HasClock {
 			get;
-			private set;
+			set;
 		}
 
 		public bool HasCampfire {
 			get;
-			private set;
+			set;
 		}
 
 		public bool HasStarInBottle {
 			get;
-			private set;
+			set;
 		}
 
 		public bool HasHeartLantern {
 			get;
-			private set;
+			set;
 		}
 
 		public int ActiveFountainColor {
@@ -160,12 +_,12 @@
 
 		public bool HasCatBast {
 			get;
-			private set;
+			set;
 		}
 
 		public int GraveyardTileCount {
 			get;
-			private set;
+			set;
 		}
 
 		public bool EnoughTilesForJungle => JungleTileCount >= JungleTileThreshold;
@@ -186,8 +_,7 @@
 
 		public bool EnoughTilesForGraveyard => GraveyardTileCount >= GraveyardTileThreshold;
 
-		public SceneMetrics(World world) {
-			_world = world;
+		public SceneMetrics() {
 			Reset();
 		}
 
@@ -198,15 +_,17 @@
 			if (settings.ScanOreFinderData)
 				_oreFinderTileLocations.Clear();
 
+			SystemLoader.ResetNearbyTileEffects();
+
 			if (settings.BiomeScanCenterPositionInWorld.HasValue) {
 				Point point = settings.BiomeScanCenterPositionInWorld.Value.ToTileCoordinates();
-				Rectangle rectangle = WorldUtils.ClampToWorld(tileRectangle: new Rectangle(point.X - Main.buffScanAreaWidth / 2, point.Y - Main.buffScanAreaHeight / 2, Main.buffScanAreaWidth, Main.buffScanAreaHeight), world: _world);
+				Rectangle rectangle = WorldUtils.ClampToWorld(new Rectangle(point.X - Main.buffScanAreaWidth / 2, point.Y - Main.buffScanAreaHeight / 2, Main.buffScanAreaWidth, Main.buffScanAreaHeight));
 				for (int i = rectangle.Left; i < rectangle.Right; i++) {
 					for (int j = rectangle.Top; j < rectangle.Bottom; j++) {
 						if (!rectangle.Contains(i, j))
 							continue;
 
-						Tile tile = _world.Tiles[i, j];
+						Tile tile = Main.tile[i, j];
 						if (tile == null || !tile.active())
 							continue;
 
@@ -251,19 +_,21 @@
 
 						if (settings.ScanOreFinderData && Main.tileOreFinderPriority[tile.type] != 0)
 							_oreFinderTileLocations.Add(new Point(i, j));
+
+						TileLoader.NearbyEffects(i, j, tile.type, false);
 					}
 				}
 			}
 
 			if (settings.VisualScanArea.HasValue) {
-				Rectangle rectangle2 = WorldUtils.ClampToWorld(_world, settings.VisualScanArea.Value);
+				Rectangle rectangle2 = WorldUtils.ClampToWorld(settings.VisualScanArea.Value);
 				for (int k = rectangle2.Left; k < rectangle2.Right; k++) {
 					for (int l = rectangle2.Top; l < rectangle2.Bottom; l++) {
-						Tile tile2 = _world.Tiles[k, l];
+						Tile tile2 = Main.tile[k, l];
 						if (tile2 == null || !tile2.active())
 							continue;
 
-						if (tile2.type == 104)
+						if (TileID.Sets.Clock[tile2.type])
 							HasClock = true;
 
 						switch (tile2.type) {
@@ -324,6 +_,11 @@
 									BloodMoonMonolith = true;
 								break;
 						}
+
+						if (MusicLoader.tileToMusic.ContainsKey(tile2.type) && MusicLoader.tileToMusic[tile2.type].ContainsKey(tile2.frameY) && tile2.frameX == 36)
+							ActiveMusicBox = MusicLoader.tileToMusic[tile2.type][tile2.frameY];
+
+						TileLoader.NearbyEffects(k, l, tile2.type, true);
 					}
 				}
 			}
@@ -334,6 +_,8 @@
 			CanPlayCreditsRoll = (ActiveMusicBox == 85);
 			if (settings.ScanOreFinderData)
 				UpdateOreFinderData();
+
+			SystemLoader.TileCountsAvailable(_tileCounts);
 		}
 
 		private void ExportTileCountsToMain() {
@@ -420,12 +_,14 @@
 			Array.Clear(NPCBannerBuff, 0, NPCBannerBuff.Length);
 			hasBanner = false;
 			CanPlayCreditsRoll = false;
+			if(NPCBannerBuff.Length<ModLoader.NPCLoader.NPCCount)
+				Array.Resize(ref NPCBannerBuff, ModLoader.NPCLoader.NPCCount);
 		}
 
 		private void UpdateOreFinderData() {
 			int num = -1;
 			foreach (Point oreFinderTileLocation in _oreFinderTileLocations) {
-				Tile tile = _world.Tiles[oreFinderTileLocation.X, oreFinderTileLocation.Y];
+				Tile tile = Main.tile[oreFinderTileLocation.X, oreFinderTileLocation.Y];
 				if (IsValidForOreFinder(tile) && (num < 0 || Main.tileOreFinderPriority[tile.type] > Main.tileOreFinderPriority[num])) {
 					num = tile.type;
 					ClosestOrePosition = oreFinderTileLocation;
