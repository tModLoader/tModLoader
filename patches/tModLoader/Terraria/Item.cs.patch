--- src/TerrariaNetCore/Terraria/Item.cs
+++ src/tModLoader/Terraria/Item.cs
@@ -1,6 +_,7 @@
 using Microsoft.Xna.Framework;
 using System;
 using System.IO;
+using System.Linq;
 using Terraria.Audio;
 using Terraria.DataStructures;
 using Terraria.Enums;
@@ -11,10 +_,12 @@
 using Terraria.ID;
 using Terraria.UI;
 using Terraria.Utilities;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 
 namespace Terraria
 {
-	public class Item : Entity
+	public partial class Item : Entity
 	{
 		private string _nameOverride;
 		public const int luckPotionDuration1 = 10800;
@@ -33,43 +_,210 @@
 		private readonly int eclipsePrice = sellPrice(0, 7, 50);
 		private readonly int eclipsePostPlanteraPrice = sellPrice(0, 10);
 		private readonly int eclipseMothronPrice = sellPrice(0, 12, 50);
+		/// <summary>
+		/// The number of cached item spawns by type.<br/>
+		/// A value of -1 means that an item type is not being cached.<br/>
+		/// See <see cref="StartCachingType"/> and <see cref= "DropCache" /> for more info.<br/>
+		/// Indexed by <see cref="type"/>.Defaults to -1.<br/>
+		/// </summary>
 		public static int[] cachedItemSpawnsByType = ItemID.Sets.Factory.CreateIntSet(-1);
+		/// <summary>
+		/// The default cooldown, in ticks, of most healing items.<br/>
+		/// This value is never changed. For creating a Philosopher's Stone-like item, see <see cref="Player.pStone"/> or <see cref="Player.potionDelayTime"/>.<br/>
+		/// </summary>
 		public static int potionDelay = 3600;
+		/// <summary>
+		/// The default cooldown, in ticks, of Restoration Potions.<br/>
+		/// This value is never changed. For creating a Philosopher's Stone-like item, see <see cref="Player.pStone"/> or <see cref="Player.restorationDelayTime"/>.<br/>
+		/// </summary>
 		public static int restorationDelay = 2700;
+		/// <summary>
+		/// The default cooldown, in ticks, of Mushrooms.<br/>
+		/// This value is never changed. For creating a Philosopher's Stone-like item, see <see cref="Player.pStone"/> or <see cref="Player.mushroomDelayTime"/>.<br/>
+		/// </summary>
 		public static int mushroomDelay = 1800;
+		/// <summary>
+		/// If true, categorizes the given item as a quest fish.<br/>
+		/// Quest fish get a special tooltip, their own category in the Research Menu, and cannot be auto-moved to the Void Vault when picked up.<br/>
+		/// If you'd like to make a quest fish, see <see cref="DefaultToQuestFish"/>.<br/>
+		/// If you'd just like to emulate the one-per-inventory behavior of quest fish, see <see cref="uniqueStack"/>.<br/>
+		/// Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public bool questItem;
+		/// <summary>
+		/// An array for converting an <see cref="headSlot"/> value into a <see cref="type"/> value.<br/>
+		/// Indexed by <see cref="headSlot"/>. Defaults to 0.<br/>
+		/// </summary>
 		public static int[] headType = new int[277];
+		/// <summary>
+		/// An array for converting an <see cref="bodySlot"/> value into a <see cref="type"/> value.<br/>
+		/// Indexed by <see cref="bodySlot"/>. Defaults to 0.<br/>
+		/// </summary>
 		public static int[] bodyType = new int[246];
+		/// <summary>
+		/// An array for converting an <see cref="legSlot"/> value into a <see cref="type"/> value.<br/>
+		/// Indexed by <see cref="legSlot"/>. Defaults to 0.<br/>
+		/// </summary>
 		public static int[] legType = new int[234];
+		/// <summary>
+		/// If true, categorizes the given item type as a staff.<br/>
+		/// Staffs are held differently when their <see cref="useStyle"/> is <see cref="ItemUseStyleID.Shoot"/>, but are otherwise no different than any other item.<br/>
+		/// Indexed by <see cref="type"/>. Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public static bool[] staff = new bool[5125];
+		/// <summary>
+		/// If true, categorizes the given item type as a claw.<br/>
+		/// Claws are held differently when their <see cref="useStyle"/> is <see cref="ItemUseStyleID.Swing"/>, but are otherwise no different than any other item.<br/>
+		/// Used exclusively by the Bladed Glove in vanilla.<br/>
+		/// Indexed by <see cref="type"/>. Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public static bool[] claw = new bool[5125];
 		public bool flame;
+		/// <summary>
+		/// If true, then the given item will show all placed wires and actuators when held.<br/>
+		/// This item will also be grouped with other items with <c>mech</c> set to <see langword="true"/> when the inventory is sorted.<br/>
+		/// Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public bool mech;
+		/// <summary>
+		/// The delay, in ticks, before players can pick up this item.<br/>
+		/// Usually set to 100 (approximately 1.666... seconds) whenever an item is dropped.<br/>
+		/// Set to 0 whenever an item drops from a projectile.<br/>
+		/// </summary>
 		public int noGrabDelay;
+		/// <summary>
+		/// If true, then this item is currently being grabbed by a player.<br/>
+		/// Items being grabbed by the player cannot combine with nearby items, be picked up by enemies, burn in lava, or despawn.<br/>
+		/// </summary>
 		public bool beingGrabbed;
+		/// <summary>
+		/// A value that increases every tick an item is in the world.<br/>
+		/// Defaults to the value in <see cref="ItemID.Sets.NewItemSpawnPriority"/> when an item is created, and increases by <see cref="ItemID.Sets.ItemSpawnDecaySpeed"/> every tick.<br/>
+		/// When creating new items, items with a high <c>timeSinceItemSpawned</c> value will be replaced if no empty item slots are available.<br/>
+		/// </summary>
 		public int timeSinceItemSpawned;
+		/// <summary>
+		/// The numerical ID of the item this item consumes when used.<br/>
+		/// If greater than 0, this item cannot be used unless the player has the item type <c>tileWand</c> is set to. The item also gains a counter for said item type.<br/>
+		/// Defaults to -1.<br/>
+		/// </summary>
 		public int tileWand = -1;
+		/// <summary>
+		/// If true, then this item is in the local player's armor slots.<br/>
+		/// This causes the item to gain the set bonus tooltip if <see cref="Player.setBonus"/> isn't an empty string.<br/>
+		/// Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public bool wornArmor;
+		/// <summary>
+		/// The context in which this item's tooltip is being drawn.<br/>
+		/// See <see cref="ItemSlot.Context"/> for more details.<br/>
+		/// Defaults to -1.<br/>
+		/// </summary>
 		public int tooltipContext = -1;
-		public byte dye;
+		/// <summary>
+		/// The numerical ID of the armor shader in <see cref="GameShaders.Armor"/> this item activates when worn in a dye slot.<br/>
+		/// If greater than 0, then this item can be equipped into dye slots.<br/>
+		/// Defaults to -1.<br/>
+		/// </summary>
+		public int dye; //TML: Changed from byte to int.
+		/// <summary>
+		/// The numerical value this item adds to a player's fishing skill when held.<br/>
+		/// If greater than 0, categorizes this item as a fishing pole.<br/>
+		/// Fishing poles can be placed into weapon racks, have a counter for the bait the player is carrying, and are held out when a bobber is active.<br/>
+		/// Defaults to 0.<br/>
+		/// </summary>
 		public int fishingPole = 1;
+		/// <summary>
+		/// The numerical value this item adds to a player's fishing skill when used as bait.<br/>
+		/// If greater than 0, categorizes this item as bait.<br/>
+		/// Bait can be put into ammo slots and is consumed when fishing.<br/>
+		/// The higher the value of <c>bait</c>, the lower the chance the bait is consumed.<br/>
+		/// Defaults to 0.<br/>
+		/// </summary>
 		public int bait;
+		/// <summary>
+		/// The additional distance, in pixels, that coins may be grabbed from if the player has the Gold Ring or its upgrades (<see cref="Player.goldRing"/>).<br/>
+		/// Applies to <see cref="ItemID.CopperCoin"/>, <see cref="ItemID.SilverCoin"/>, <see cref="ItemID.GoldCoin"/>, and <see cref="ItemID.PlatinumCoin"/>.<br/>
+		/// </summary>
 		public static int coinGrabRange = 350;
+		/// <summary>
+		/// The additional distance, in pixels, that mana stars may be grabbed from if the player has the Celestial Magnet or its upgrades (<see cref="Player.manaMagnet"/>).<br/>
+		/// Applies to <see cref="ItemID.Star"/>, <see cref="ItemID.SoulCake"/>, and <see cref="ItemID.SugarPlum"/>.<br/>
+		/// </summary>
 		public static int manaGrabRange = 300;
+		/// <summary>
+		/// The additional distance, in pixels, that mana stars may be grabbed from if the player has consumed a Heartreach Potion (<see cref="Player.lifeMagnet"/>).<br/>
+		/// Applies to <see cref="ItemID.Heart"/>, <see cref="ItemID.CandyApple"/>, and <see cref="ItemID.CandyCane"/>.<br/>
+		/// </summary>
 		public static int lifeGrabRange = 250;
+		/// <summary>
+		/// The additional distance, in pixels, that items may be grabbed from if the player has equipped a Treasure Magnet (<see cref="Player.treasureMagnet"/>).<br/>
+		/// </summary>
 		public static int treasureGrabRange = 150;
-		public short makeNPC;
+		/// <summary>
+		/// The numerical ID of the NPC that this item creates when used.<br/>
+		/// Mainly used for caught critters as items so that they can be released into the world.
+		/// </summary>
+		public int makeNPC; // tML: changed to int for convenience and consistency purposes
+		/// <summary>
+		/// If true, then the given item's effects only function in Expert Mode or higher (<see cref="Main.expertMode"/>).<br/>
+		/// Specifically, any equipped, Expert-only accessory will not update, any Expert-only minecart will not be used when riding minecart tracks, and an 'X' will be drawn over the item when equipped.<br/>
+		/// Unused in vanilla.<br/>
+		/// </summary>
 		public bool expertOnly;
+		/// <summary>
+		/// If true, then the given item is automatically given the Expert rarity, causing its name to be drawn in rainbow text.<br/>
+		/// It also adds the "Expert" tooltip. To use the Expert rarity without adding this tooltip, see <see cref="ItemRarityID.Expert"/>.<br/>
+		/// </summary>
 		public bool expert;
+		/// <summary>
+		/// If true, then the given item's effects only function in Master Mode or higher (<see cref="Main.masterMode"/>).<br/>
+		/// Specifically, any equipped, Master-only accessory will not update, any Master-only minecart will not be used when riding minecart tracks, and an 'X' will be drawn over the item when equipped.<br/>
+		/// Unused in vanilla.<br/>
+		/// </summary>
+		public bool masterOnly;
+		/// <summary>
+		/// If true, then the given item is automatically given the Master rarity, causing its name to be drawn in red-orange text.<br/>
+		/// It also adds the "Master" tooltip. To use the Master rarity without adding this tooltip, see <see cref="ItemRarityID.Master"/>.<br/>
+		/// </summary>
+		public bool master;
+		/// <summary>
+		/// If true, then the given item is being sold in a shop.<br/>
+		/// Shop items display their price. See <see cref="value"/>.<br/>
+		/// </summary>
 		public bool isAShopItem;
-		public short hairDye = -1;
+		public int hairDye = -1; //TML: Changed from short to int.
+		/// <summary>
+		/// The numerical ID of the paint applied by this item when used with a paint brush or paint roller.<br/>
+		/// For conversion into a shader index, see <see cref="Main.ConvertPaintIdToTileShaderIndex"/>.<br/>
+		/// For more details regarding paint, see <see cref="Tile.TileColor"/> and <see cref="Tile.WallColor"/>.<br/>
+		/// Defaults to 0.<br/>
+		/// </summary>
 		public byte paint;
+		/// <summary>
+		/// If true, then the given item is instanced per-client.<br/>
+		/// Instanced items only appear on the client they were spawned on and are less likely to be replaced if a new item is spawned.<br/>
+		/// Instanced items do not exist on servers.<br/>
+		/// Vanilla uses this field for treasure bags and Defender Medals. tModLoader automatically handles this for modded treasure bags.<br/>
+		/// If you would like to make an instanced item, see any one of the following for examples:<br/>
+		/// - <see cref="NPC.DropItemInstanced"/><br/>
+		/// - <see cref="GameContent.ItemDropRules.CommonCode.DropItemLocalPerClientAndSetNPCMoneyTo0"/><br/>
+		/// - <see cref="MessageID.InstancedItem"/><br/>
+		/// Defaults to false.<br/>
+		/// </summary>
 		public bool instanced;
 		public int ownIgnore = -1;
 		public int ownTime;
 		public int keepTime;
 		public int timeLeftInWhichTheItemCannotBeTakenByEnemies;
 		public int type;
+		/// <summary>
+		/// If true, then the given item is favorited.<br/>
+		/// Favorited items cannot be dropped, automatically moved into chests, placed in any kind of item rack, sold, trashed, or sorted.<br/>
+		/// Favorited items can still be dropped if the player has no inventory space and will still drop on death on Mediumcore or higher difficulties.<br/>
+		/// An item becomes unfavorited if removed from the player's inventory, including if the item is move to any equipment slot.<br/>
+		/// Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public bool favorited;
 		public int holdStyle;
 		public int useStyle;
@@ -98,7 +_,7 @@
 		public int alpha;
 		public short glowMask;
 		public float scale = 1f;
-		public LegacySoundStyle UseSound;
+		public SoundStyle? UseSound;
 		public int defense;
 		public int headSlot = -1;
 		public int bodySlot = -1;
@@ -142,17 +_,74 @@
 		public int buffTime;
 		public int mountType = -1;
 		public bool cartTrack;
+		/// <summary>
+		/// Players cannot pick up a <c>uniqueStack</c> item if they have an item with the same <see cref="type"/> in their inventory.<br/>
+		/// This does not apply to equipped items, nor does it apply to items held with the mouse (<see cref="Main.mouseItem"/>).<br/>
+		/// This field only prevents picking items up: Multiple <c>uniqueStack</c> items may still be transferred into the player's inventory from chests.<br/>
+		/// Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public bool uniqueStack;
+		/// <summary>
+		/// The numerical ID of the special currency this item is bought using.<br/>
+		/// To make an item bought using Defender Medals, set this to <see cref="CustomCurrencyID.DefenderMedals"/>.<br/>
+		/// Defaults to -1, which means an item is bought using coins.<br/>
+		/// </summary>
 		public int shopSpecialCurrency = -1;
+		/// <summary>
+		/// If not <see langword="null"/>, the custom value of the given item when being bought from a shop.<br/>
+		/// Used for assigning a non-default price to an item in shops.<br/>
+		/// To get the raw price of an item, use <see cref="GetStoreValue"/>.<br/>
+		/// To get the price of an item after discounts, use <see cref="Player.GetItemExpectedPrice"/>.<br/>
+		/// Defaults to <see langword="null"/>.<br/>
+		/// </summary>
 		public int? shopCustomPrice;
+		/// <summary>
+		/// If true, the given item is categorized as a Dungeon Defenders 2 summon item.<br/>
+		/// DD2 summon items get a counter for how much Etherian Mana is in the player's inventory.<br/>
+		/// <b>This field being set does not make the item consume Etherian Mana.</b> Etherian Mana consumption is handled manually per-type.<br/>
+		/// Defaults to <see langword="false"/>.<br/>
+		/// </summary>
 		public bool DD2Summon;
 		public int netID;
 		public int crit;
-		public byte prefix;
-		public bool melee;
-		public bool magic;
-		public bool ranged;
-		public bool summon;
+		public int prefix; //TML: Changed from byte to int.
+
+		internal bool melee {
+			get => CountsAsClass(DamageClass.Melee);
+			set {
+				if (value)
+					DamageType = DamageClass.Melee;
+				else if (DamageType == DamageClass.Melee)
+					DamageType = DamageClass.Default;
+			}
+		}
+		internal bool magic {
+			get => CountsAsClass(DamageClass.Magic);
+			set {
+				if (value)
+					DamageType = DamageClass.Magic;
+				else if (DamageType == DamageClass.Magic)
+					DamageType = DamageClass.Default;
+			}
+		}
+		internal bool ranged {
+			get => CountsAsClass(DamageClass.Ranged);
+			set {
+				if (value)
+					DamageType = DamageClass.Ranged;
+				else if (DamageType == DamageClass.Ranged)
+					DamageType = DamageClass.Default;
+			}
+		}
+		internal bool summon {
+			get => CountsAsClass(DamageClass.Summon);
+			set {
+				if (value)
+					DamageType = DamageClass.Summon;
+				else if (DamageType == DamageClass.Summon)
+					DamageType = DamageClass.Default;
+			}
+		}
 		public bool sentry;
 		public int reuseDelay;
 		public bool newAndShiny;
@@ -160,6 +_,18 @@
 		public const int WALL_PLACEMENT_USETIME = 7;
 		public static int numberOfNewItems = 0;
 
+		public Item() { } // EntryFilter complains if item doesn't have a parameterless constructor (even when the parameter is optional).
+
+		public Item(int setDefaultsToType, int stack = 1, int prefix = 0) {
+			SetDefaults(setDefaultsToType);
+
+			if (setDefaultsToType > 0)
+				this.stack = stack;
+
+			if (prefix != 0)
+				Prefix(prefix);
+		}
+
 		public string Name => _nameOverride ?? Lang.GetItemNameValue(type);
 
 		public string HoverName {
@@ -181,11 +_,11 @@
 			}
 		}
 
-		public int OriginalRarity => ContentSamples.ItemsByType[type].rare;
-
-		public int OriginalDamage => ContentSamples.ItemsByType[type].damage;
-
-		public int OriginalDefense => ContentSamples.ItemsByType[type].defense;
+		public int OriginalRarity => ContentSamples.ItemsByType.TryGetValue(type, out Item item) ? item.rare : 0;
+
+		public int OriginalDamage => ContentSamples.ItemsByType.TryGetValue(type, out Item item) ? item.damage : 0;
+
+		public int OriginalDefense => ContentSamples.ItemsByType.TryGetValue(type, out Item item) ? item.defense : 0;
 
 		public bool IsACoin {
 			get {
@@ -270,6 +_,10 @@
 				return false;
 
 			UnifiedRandom unifiedRandom = WorldGen.gen ? WorldGen.genRand : Main.rand;
+			bool? applyPrefixOverride = ItemLoader.PrefixChance(this, pre, unifiedRandom);
+			if (!applyPrefixOverride ?? false)
+				return false;
+
 			int num = pre;
 			float num2 = 1f;
 			float num3 = 1f;
@@ -288,15 +_,20 @@
 				num7 = 1f;
 				num8 = 0;
 				flag = false;
-				if (num == -1 && unifiedRandom.Next(4) == 0)
+				if (pre == -1 && !(applyPrefixOverride ?? false) && unifiedRandom.NextBool(4))
 					num = 0;
 
 				if (pre < -1)
 					num = -1;
 
 				if (num == -1 || num == -2 || num == -3) {
+					int modPrefix = ItemLoader.ChoosePrefix(this, unifiedRandom);
+					if (modPrefix >= 0) {
+						num = modPrefix;
+					}
-					if (type == 1 || type == 4 || type == 6 || type == 7 || type == 10 || type == 24 || type == 45 || type == 46 || type == 65 || type == 103 || type == 104 || type == 121 || type == 122 || type == 155 || type == 190 || type == 196 || type == 198 || type == 199 || type == 200 || type == 201 || type == 202 || type == 203 || type == 4258 || type == 204 || type == 213 || type == 217 || type == 273 || type == 367 || type == 368 || type == 426 || type == 482 || type == 483 || type == 484 || type == 653 || type == 654 || type == 656 || type == 657 || type == 659 || type == 660 || type == 671 || type == 672 || type == 674 || type == 675 || type == 676 || type == 723 || type == 724 || type == 757 || type == 776 || type == 777 || type == 778 || type == 787 || type == 795 || type == 797 || type == 798 || type == 799 || type == 881 || type == 882 || type == 921 || type == 922 || type == 989 || type == 990 || type == 991 || type == 992 || type == 993 || type == 1123 || type == 1166 || type == 1185 || type == 1188 || type == 1192 || type == 1195 || type == 1199 || type == 1202 || type == 1222 || type == 1223 || type == 1224 || type == 1226 || type == 1227 || type == 1230 || type == 1233 || type == 1234 || type == 1294 || type == 1304 || type == 1305 || type == 1306 || type == 1320 || type == 1327 || type == 1506 || type == 1507 || type == 1786 || type == 1826 || type == 1827 || type == 1909 || type == 1917 || type == 1928 || type == 2176 || type == 2273 || type == 2608 || type == 2341 || type == 2330 || type == 2320 || type == 2516 || type == 2517 || type == 2746 || type == 2745 || type == 3063 || type == 3018 || type == 3211 || type == 3013 || type == 3258 || type == 3106 || type == 3065 || type == 2880 || type == 3481 || type == 3482 || type == 3483 || type == 3484 || type == 3485 || type == 3487 || type == 3488 || type == 3489 || type == 3490 || type == 3491 || type == 3493 || type == 3494 || type == 3495 || type == 3496 || type == 3497 || type == 3499 || type == 3500 || type == 3501 || type == 3502 || type == 3503 || type == 3505 || type == 3506 || type == 3507 || type == 3508 || type == 3509 || type == 3511 || type == 3512 || type == 3513 || type == 3514 || type == 3515 || type == 3517 || type == 3518 || type == 3519 || type == 3520 || type == 3521 || type == 3522 || type == 3523 || type == 3524 || type == 3525 || type == 3462 || type == 3465 || type == 3466 || type == 2772 || type == 2775 || type == 2776 || type == 2777 || type == 2780 || type == 2781 || type == 2782 || type == 2785 || type == 2786 || type == 3349 || type == 3352 || type == 3351 || (type >= 3764 && type <= 3769) || type == 4259 || type == 3772 || type == 3823 || type == 3827 || type == 186 || type == 946 || type == 4059 || type == 4317 || type == 4463 || type == 486 || type == 4707 || type == 4711 || type == 4956 || type == 4923 || type == 4672 || type == 4913 || type == 4912 || type == 4911 || type == 4678 || type == 4679 || type == 4680 || type == 4914 || type == 5074 || type == 5094 || type == 5095 || type == 5096 || type == 5097) {
+					else if (type == 1 || type == 4 || type == 6 || type == 7 || type == 10 || type == 24 || type == 45 || type == 46 || type == 65 || type == 103 || type == 104 || type == 121 || type == 122 || type == 155 || type == 190 || type == 196 || type == 198 || type == 199 || type == 200 || type == 201 || type == 202 || type == 203 || type == 4258 || type == 204 || type == 213 || type == 217 || type == 273 || type == 367 || type == 368 || type == 426 || type == 482 || type == 483 || type == 484 || type == 653 || type == 654 || type == 656 || type == 657 || type == 659 || type == 660 || type == 671 || type == 672 || type == 674 || type == 675 || type == 676 || type == 723 || type == 724 || type == 757 || type == 776 || type == 777 || type == 778 || type == 787 || type == 795 || type == 797 || type == 798 || type == 799 || type == 881 || type == 882 || type == 921 || type == 922 || type == 989 || type == 990 || type == 991 || type == 992 || type == 993 || type == 1123 || type == 1166 || type == 1185 || type == 1188 || type == 1192 || type == 1195 || type == 1199 || type == 1202 || type == 1222 || type == 1223 || type == 1224 || type == 1226 || type == 1227 || type == 1230 || type == 1233 || type == 1234 || type == 1294 || type == 1304 || type == 1305 || type == 1306 || type == 1320 || type == 1327 || type == 1506 || type == 1507 || type == 1786 || type == 1826 || type == 1827 || type == 1909 || type == 1917 || type == 1928 || type == 2176 || type == 2273 || type == 2608 || type == 2341 || type == 2330 || type == 2320 || type == 2516 || type == 2517 || type == 2746 || type == 2745 || type == 3063 || type == 3018 || type == 3211 || type == 3013 || type == 3258 || type == 3106 || type == 3065 || type == 2880 || type == 3481 || type == 3482 || type == 3483 || type == 3484 || type == 3485 || type == 3487 || type == 3488 || type == 3489 || type == 3490 || type == 3491 || type == 3493 || type == 3494 || type == 3495 || type == 3496 || type == 3497 || type == 3499 || type == 3500 || type == 3501 || type == 3502 || type == 3503 || type == 3505 || type == 3506 || type == 3507 || type == 3508 || type == 3509 || type == 3511 || type == 3512 || type == 3513 || type == 3514 || type == 3515 || type == 3517 || type == 3518 || type == 3519 || type == 3520 || type == 3521 || type == 3522 || type == 3523 || type == 3524 || type == 3525 || (type >= 3462 && type <= 3466) || (type >= 2772 && type <= 2786) || type == 3349 || type == 3352 || type == 3351 || (type >= 3764 && type <= 3769) || type == 4259 || type == 3772 || type == 3823 || type == 3827 || type == 186 || type == 946 || type == 4059 || type == 4317 || type == 4463 || type == 486 || type == 4707 || type == 4711 || type == 4956 || type == 4923 || type == 4788 || type == 4790 || type == 4789 || type == 4672 || type == 4913 || type == 4912 || type == 4911 || type == 4678 || type == 4679 || type == 4680 || type == 4914 || type == 5074 || type == 5094 || type == 5095 || type == 5096 || type == 5097 || ItemLoader.MeleePrefix(this)) {
+						const int numVanilla = 40;
-						int num9 = unifiedRandom.Next(40);
+						int num9 = unifiedRandom.Next(numVanilla);
 						if (num9 == 0)
 							num = 1;
 
@@ -416,9 +_,12 @@
 
 						if (num9 == 39)
 							num = 81;
+
+						PrefixLoader.Roll(this, ref num, numVanilla, unifiedRandom, PrefixCategory.AnyWeapon, PrefixCategory.Melee);
 					}
-					else if (type == 162 || type == 5011 || type == 5012 || type == 160 || type == 163 || type == 220 || type == 274 || type == 277 || type == 280 || type == 383 || type == 384 || type == 385 || type == 386 || type == 387 || type == 388 || type == 389 || type == 390 || type == 406 || type == 537 || type == 550 || type == 579 || type == 756 || type == 759 || type == 801 || type == 802 || type == 1186 || type == 1189 || type == 1190 || type == 1193 || type == 1196 || type == 1197 || type == 1200 || type == 1203 || type == 1204 || type == 1228 || type == 1231 || type == 1232 || type == 1259 || type == 1262 || type == 1297 || type == 1314 || type == 1325 || type == 1947 || type == 2332 || type == 2331 || type == 2342 || type == 2424 || type == 2611 || type == 2798 || type == 3012 || type == 3473 || type == 3098 || type == 3368 || type == 3835 || type == 3836 || type == 3858 || type == 4061 || type == 4144 || type == 4272 || type == 2774 || type == 2773 || type == 2779 || type == 2778 || type == 2784 || type == 2783 || type == 3464 || type == 3463 || type == 4788 || type == 4789 || type == 4790) {
+					else if (type == 162 || type == 5011 || type == 5012 || type == 160 || type == 163 || type == 220 || type == 274 || type == 277 || type == 280 || type == 383 || type == 384 || type == 385 || type == 386 || type == 387 || type == 388 || type == 389 || type == 390 || type == 406 || type == 537 || type == 550 || type == 579 || type == 756 || type == 759 || type == 801 || type == 802 || type == 1186 || type == 1189 || type == 1190 || type == 1193 || type == 1196 || type == 1197 || type == 1200 || type == 1203 || type == 1204 || type == 1228 || type == 1231 || type == 1232 || type == 1259 || type == 1262 || type == 1297 || type == 1314 || type == 1325 || type == 1947 || type == 2332 || type == 2331 || type == 2342 || type == 2424 || type == 2611 || type == 2798 || type == 3012 || type == 3473 || type == 3098 || type == 3368 || type == 3835 || type == 3836 || type == 3858 || type == 4061 || type == 4144 || type == 4272 || type == 2774 || type == 2773 || type == 2779 || type == 2778 || type == 2784 || type == 2783 || type == 3464 || type == 3463 || ItemLoader.WeaponPrefix(this)) {
+						const int numVanilla = 14;
-						int num10 = unifiedRandom.Next(14);
+						int num10 = unifiedRandom.Next(numVanilla);
 						if (num10 == 0)
 							num = 36;
 
@@ -460,9 +_,12 @@
 
 						if (num10 == 13)
 							num = 61;
+
+						PrefixLoader.Roll(this, ref num, numVanilla, unifiedRandom, PrefixCategory.AnyWeapon);
 					}
-					else if (type == 39 || type == 44 || type == 95 || type == 96 || type == 98 || type == 99 || type == 120 || type == 164 || type == 197 || type == 219 || type == 266 || type == 281 || type == 434 || type == 435 || type == 436 || type == 481 || type == 506 || type == 533 || type == 534 || type == 578 || type == 655 || type == 658 || type == 661 || type == 679 || type == 682 || type == 725 || type == 758 || type == 759 || type == 760 || type == 796 || type == 800 || type == 905 || type == 923 || type == 964 || type == 986 || type == 1156 || type == 1187 || type == 1194 || type == 1201 || type == 1229 || type == 1254 || type == 1255 || type == 1258 || type == 1265 || type == 1319 || type == 1553 || type == 1782 || type == 1784 || type == 1835 || type == 1870 || type == 1910 || type == 1929 || type == 1946 || type == 2223 || type == 2269 || type == 2270 || type == 2624 || type == 2515 || type == 2747 || type == 2796 || type == 2797 || type == 3052 || type == 2888 || type == 3019 || type == 3029 || type == 3007 || type == 3008 || type == 3210 || type == 3107 || type == 3475 || type == 3540 || type == 3854 || type == 3859 || type == 3821 || type == 3930 || type == 3480 || type == 3486 || type == 3492 || type == 3498 || type == 3504 || type == 3510 || type == 3516 || type == 3350 || type == 3546 || type == 3788 || type == 4058 || type == 4060 || type == 4381 || type == 4703 || type == 4953 || type == 5117) {
+					else if (type == 39 || type == 44 || type == 95 || type == 96 || type == 98 || type == 99 || type == 120 || type == 164 || type == 197 || type == 219 || type == 266 || type == 281 || type == 434 || type == 435 || type == 436 || type == 481 || type == 506 || type == 533 || type == 534 || type == 578 || type == 655 || type == 658 || type == 661 || type == 679 || type == 682 || type == 725 || type == 758 || type == 759 || type == 760 || type == 796 || type == 800 || type == 905 || type == 923 || type == 964 || type == 986 || type == 1156 || type == 1187 || type == 1194 || type == 1201 || type == 1229 || type == 1254 || type == 1255 || type == 1258 || type == 1265 || type == 1319 || type == 1553 || type == 1782 || type == 1784 || type == 1835 || type == 1870 || type == 1910 || type == 1929 || type == 1946 || type == 2223 || type == 2269 || type == 2270 || type == 2624 || type == 2515 || type == 2747 || type == 2796 || type == 2797 || type == 3052 || type == 2888 || type == 3019 || type == 3029 || type == 3007 || type == 3008 || type == 3210 || type == 3107 || type == 3475 || type == 3540 || type == 3854 || type == 3859 || type == 3821 || type == 3930 || type == 3480 || type == 3486 || type == 3492 || type == 3498 || type == 3504 || type == 3510 || type == 3516 || type == 3350 || type == 3546 || type == 3788 || type == 4058 || type == 4060 || type == 4381 || type == 4703 || type == 4953 || type == 5117 || ItemLoader.RangedPrefix(this)) {
+						const int numVanilla = 35;
-						int num11 = unifiedRandom.Next(35);
+						int num11 = unifiedRandom.Next(numVanilla);
 						if (num11 == 0)
 							num = 16;
 
@@ -567,9 +_,12 @@
 
 						if (num11 == 34)
 							num = 82;
+
+						PrefixLoader.Roll(this, ref num, numVanilla, unifiedRandom, PrefixCategory.AnyWeapon, PrefixCategory.Ranged);
 					}
-					else if (type == 64 || type == 112 || type == 113 || type == 127 || type == 157 || type == 165 || type == 218 || type == 272 || type == 494 || type == 495 || type == 496 || type == 514 || type == 517 || type == 518 || type == 519 || type == 683 || type == 726 || type == 739 || type == 740 || type == 741 || type == 742 || type == 743 || type == 744 || type == 788 || type == 1121 || type == 1155 || type == 1157 || type == 1178 || type == 1244 || type == 1256 || type == 1260 || type == 1264 || type == 1266 || type == 1295 || type == 1296 || type == 1308 || type == 1309 || type == 1313 || type == 1336 || type == 1444 || type == 1445 || type == 1446 || type == 1572 || type == 1801 || type == 1802 || type == 1930 || type == 1931 || type == 2188 || type == 2622 || type == 2621 || type == 2584 || type == 2551 || type == 2366 || type == 2535 || type == 2365 || type == 2364 || type == 2623 || type == 2750 || type == 2795 || type == 3053 || type == 3051 || type == 3209 || type == 3014 || type == 3105 || type == 2882 || type == 3269 || type == 3006 || type == 3377 || type == 3069 || type == 2749 || type == 3249 || type == 3476 || type == 3474 || type == 3531 || type == 3541 || type == 3542 || type == 3569 || type == 3570 || type == 3571 || type == 3779 || type == 3787 || type == 3531 || type == 3852 || type == 3870 || type == 4269 || type == 4273 || type == 4281 || type == 4347 || type == 4348 || type == 4270 || type == 4758 || type == 4715 || type == 4952 || type == 4607 || type == 5005 || type == 5065 || type == 5069 || type == 5114 || type == 5119 || type == 5118 || type == 3824 || type == 3818 || type == 3829 || type == 3832 || type == 3825 || type == 3819 || type == 3830 || type == 3833 || type == 3826 || type == 3820 || type == 3831 || type == 3834 || type == 4062) {
+					else if (type == 64 || type == 112 || type == 113 || type == 127 || type == 157 || type == 165 || type == 218 || type == 272 || type == 494 || type == 495 || type == 496 || type == 514 || type == 517 || type == 518 || type == 519 || type == 683 || type == 726 || type == 739 || type == 740 || type == 741 || type == 742 || type == 743 || type == 744 || type == 788 || type == 1121 || type == 1155 || type == 1157 || type == 1178 || type == 1244 || type == 1256 || type == 1260 || type == 1264 || type == 1266 || type == 1295 || type == 1296 || type == 1308 || type == 1309 || type == 1313 || type == 1336 || type == 1444 || type == 1445 || type == 1446 || type == 1572 || type == 1801 || type == 1802 || type == 1930 || type == 1931 || type == 2188 || type == 2622 || type == 2621 || type == 2584 || type == 2551 || type == 2366 || type == 2535 || type == 2365 || type == 2364 || type == 2623 || type == 2750 || type == 2795 || type == 3053 || type == 3051 || type == 3209 || type == 3014 || type == 3105 || type == 2882 || type == 3269 || type == 3006 || type == 3377 || type == 3069 || type == 2749 || type == 3249 || type == 3476 || type == 3474 || type == 3531 || type == 3541 || type == 3542 || type == 3569 || type == 3570 || type == 3571 || type == 3779 || type == 3787 || type == 3531 || type == 3852 || type == 3870 || type == 4269 || type == 4273 || type == 4281 || type == 4347 || type == 4348 || type == 4270 || type == 4758 || type == 4715 || type == 4952 || type == 4607 || type == 5005 || type == 5065 || type == 5069 || type == 5114 || type == 5119 || type == 5118 || type == 3824 || type == 3818 || type == 3829 || type == 3832 || type == 3825 || type == 3819 || type == 3830 || type == 3833 || type == 3826 || type == 3820 || type == 3831 || type == 3834 || type == 4062 || ItemLoader.MagicPrefix(this)) {
+						const int numVanilla = 36;
-						int num12 = unifiedRandom.Next(36);
+						int num12 = unifiedRandom.Next(numVanilla);
 						if (num12 == 0)
 							num = 26;
 
@@ -677,9 +_,12 @@
 
 						if (num12 == 35)
 							num = 83;
+
+						PrefixLoader.Roll(this, ref num, numVanilla, unifiedRandom, PrefixCategory.AnyWeapon, PrefixCategory.Magic);
 					}
-					else if (type == 55 || type == 119 || type == 191 || type == 284 || type == 670 || type == 1122 || type == 1513 || type == 1569 || type == 1571 || type == 1825 || type == 1918 || type == 3054 || type == 3262 || (type >= 3278 && type <= 3292) || (type >= 3315 && type <= 3317) || type == 3389 || type == 3030 || type == 3543 || type == 4764 || type == 4818 || type == 4760) {
+					else if (type == 55 || type == 119 || type == 191 || type == 284 || type == 670 || type == 1122 || type == 1513 || type == 1569 || type == 1571 || type == 1825 || type == 1918 || type == 3054 || type == 3262 || (type >= 3278 && type <= 3292) || (type >= 3315 && type <= 3317) || type == 3389 || type == 3030 || type == 3543 || type == 4764 || type == 4818 || type == 4760 || ItemLoader.WeaponPrefix(this)) {
+						const int numVanilla = 14;
-						int num13 = unifiedRandom.Next(14);
+						int num13 = unifiedRandom.Next(numVanilla);
 						if (type == 3389)
 							num13 = unifiedRandom.Next(15);
 
@@ -727,12 +_,15 @@
 
 						if (num13 == 14)
 							num = 84;
+
+						PrefixLoader.Roll(this, ref num, numVanilla, unifiedRandom, PrefixCategory.AnyWeapon);
 					}
 					else {
 						if (!IsAPrefixableAccessory())
 							return false;
 
 						num = unifiedRandom.Next(62, 81);
+						PrefixLoader.Roll(this, ref num, 81 - 62, unifiedRandom, PrefixCategory.Accessory);
 					}
 				}
 
@@ -740,7 +_,7 @@
 					case -3:
 						return true;
 					case -1:
-						if ((num == 7 || num == 8 || num == 9 || num == 10 || num == 11 || num == 22 || num == 23 || num == 24 || num == 29 || num == 30 || num == 31 || num == 39 || num == 40 || num == 56 || num == 41 || num == 47 || num == 48 || num == 49) && unifiedRandom.Next(3) != 0)
+						if ((num == 7 || num == 8 || num == 9 || num == 10 || num == 11 || num == 22 || num == 23 || num == 24 || num == 29 || num == 30 || num == 31 || num == 39 || num == 40 || num == 56 || num == 41 || num == 47 || num == 48 || num == 49) && !(applyPrefixOverride ?? false) && !unifiedRandom.NextBool(3))
 							num = 0;
 						break;
 				}
@@ -1019,6 +_,8 @@
 						num8 = 2;
 						break;
 				}
+				if (num >= PrefixID.Count)
+					PrefixLoader.GetPrefix(num)?.SetStats(ref num2, ref num3, ref num4, ref num5, ref num6, ref num7, ref num8);
 
 				if (num2 != 1f && Math.Round((float)damage * num2) == (double)damage) {
 					flag = true;
@@ -1040,11 +_,19 @@
 					num = -1;
 				}
 
+				if (num >= PrefixID.Count)
+					PrefixLoader.GetPrefix(num)?.ValidateItem(this, ref flag);
+
 				if (pre == -2 && num == 0) {
 					num = -1;
 					flag = true;
 				}
+
+				if (!flag && !ItemLoader.AllowPrefix(this, num))
+					flag = true;
 			}
+
+			UndoItemAnimationCompensations();
 
 			damage = (int)Math.Round((float)damage * num2);
 			useAnimation = (int)Math.Round((float)useAnimation * num4);
@@ -1055,6 +_,12 @@
 			scale *= num5;
 			shootSpeed *= num6;
 			crit += num8;
+
+			if (num >= PrefixID.Count)
+				PrefixLoader.GetPrefix(num)?.Apply(this);
+
+			ApplyItemAnimationCompensationsToVanillaItems();
+
 			float num14 = 1f * num2 * (2f - num4) * (2f - num7) * num5 * num3 * num6 * (1f + (float)num8 * 0.02f);
 			if (num == 62 || num == 69 || num == 73 || num == 77)
 				num14 *= 1.05f;
@@ -1068,6 +_,10 @@
 			if (num == 65 || num == 72 || num == 76 || num == 80 || num == 68)
 				num14 *= 1.2f;
 
+			if (num >= PrefixID.Count)
+				PrefixLoader.GetPrefix(num)?.ModifyValue(ref num14);
+
+			int baseRarity = rare;
 			if ((double)num14 >= 1.2)
 				rare += 2;
 			else if ((double)num14 >= 1.05)
@@ -1077,17 +_,22 @@
 			else if ((double)num14 <= 0.95)
 				rare--;
 
+			if (baseRarity >= ItemRarityID.Count)
+				rare = RarityLoader.GetRarity(baseRarity).GetPrefixedRarity(rare - baseRarity, num14);
+			else if (rare > ItemRarityID.Purple)
+				rare = ItemRarityID.Purple;
+
 			if (rare > -11) {
 				if (rare < -1)
 					rare = -1;
 
-				if (rare > 11)
-					rare = 11;
+				if (rare > RarityLoader.RarityCount - 1)
+					rare = RarityLoader.RarityCount - 1;
 			}
 
 			num14 *= num14;
 			value = (int)((float)value * num14);
-			prefix = (byte)num;
+			prefix = num;
 			return true;
 		}
 
@@ -1120,6 +_,8 @@
 		public Rectangle getRect() => new Rectangle((int)position.X, (int)position.Y, width, height);
 
 		public bool checkMat() {
+			material = ItemID.Sets.IsAMaterial[type];
+			return material; // bypass performance issue.
 			if (type >= 71 && type <= 74) {
 				material = false;
 				return false;
@@ -1319,6 +_,9 @@
 		}
 
 		public static int BannerToItem(int banner) {
+			if (NPCLoader.bannerToItem.ContainsKey(banner))
+				return NPCLoader.bannerToItem[banner];
+
 			int num = 0;
 			if (banner >= 276)
 				return 4965 + banner - 276;
@@ -2084,9 +_,10 @@
 					return 287;
 				case 133:
 					return 288;
-				default:
-					return 0;
 			}
+			if (i >= NPCID.Count) // in NPCtoBanner method
+				return NPCLoader.GetNPC(i).Banner;
+			return 0;
 		}
 
 		public static int BannerToNPC(int i) {
@@ -2655,9 +_,10 @@
 					return 176;
 				case 288:
 					return 133;
-				default:
-					return 0;
 			}
+			if (i >= NPCID.Count) // in BannerToNPC method
+				return i;
+			return 0;
 		}
 
 		public bool FitsAmmoSlot() {
@@ -7929,6 +_,7 @@
 					value = 300;
 					break;
 				case 434:
+					consumeAmmoOnLastShotOnly = true;
 					autoReuse = true;
 					useStyle = 5;
 					useAnimation = 12;
@@ -8902,6 +_,7 @@
 					rare = 2;
 					break;
 				case 506:
+					consumeAmmoOnFirstShotOnly = true;
 					useStyle = 5;
 					autoReuse = true;
 					useAnimation = 30;
@@ -12284,6 +_,7 @@
 					scale = 1.15f;
 					break;
 				case 779:
+					consumeAmmoOnLastShotOnly = true;
 					useStyle = 5;
 					autoReuse = true;
 					useAnimation = 30;
@@ -22916,6 +_,7 @@
 					melee = true;
 					return;
 				case 1910:
+					consumeAmmoOnFirstShotOnly = true;
 					useStyle = 5;
 					autoReuse = true;
 					useAnimation = 30;
@@ -29993,7 +_,7 @@
 							case 2888:
 								useStyle = 5;
 								useAnimation = 24;
-								useTime = 23;
+								useTime = 24;
 								width = 12;
 								height = 28;
 								shoot = 469;
@@ -36960,6 +_,7 @@
 					shootSpeed = 17f;
 					return;
 				case 3852:
+					useLimitPerAnimation = 4;
 					useStyle = 5;
 					useAnimation = 25;
 					useTime = 3;
@@ -43196,6 +_,7 @@
 					expert = true;
 					break;
 				case 4952:
+					useLimitPerAnimation = 4;
 					autoReuse = true;
 					useStyle = 14;
 					holdStyle = 6;
@@ -43217,6 +_,8 @@
 					flame = true;
 					break;
 				case 4953:
+					useLimitPerAnimation = 5;
+					consumeAmmoOnLastShotOnly = true;
 					useStyle = 5;
 					autoReuse = true;
 					useAnimation = 30;
@@ -44343,7 +_,8 @@
 			shoot = projectileId;
 			UseSound = SoundID.Item152;
 			noMelee = true;
-			summon = true;
+			//summon = true;
+			DamageType = DamageClass.SummonMeleeSpeed;
 			noUseGraphic = true;
 			damage = dmg;
 			knockBack = kb;
@@ -44387,7 +_,7 @@
 			return false;
 		}
 
-		private void DefaultToSeaShelll() {
+		public void DefaultToSeaShelll() {
 			useStyle = 1;
 			autoReuse = true;
 			useAnimation = 15;
@@ -44420,7 +_,8 @@
 			}
 		}
 
+		// tML: changed to take an int instead of a short for convenience and consistency purposes
-		public void DefaultToCapturedCritter(short npcIdToSpawnOnUse) {
+		public void DefaultToCapturedCritter(int npcIdToSpawnOnUse) {
 			useStyle = 1;
 			autoReuse = true;
 			useTurn = true;
@@ -44799,6 +_,11 @@
 			mountType = mount;
 		}
 
+		/// <summary>
+		/// This method sets a variety of common Item values common to placeable walls.<br/>
+		/// Specifically: useStyle = 1;	useTurn = true;	useAnimation = 15; useTime = 7; autoReuse = true; maxStack = 999; consumable = true; createWall = wallToPlace; width = 12; height = 12;<br/>
+		/// </summary>
+		/// <param name="wallToPlace"></param>
 		public void DefaultToPlacableWall(ushort wallToPlace) {
 			useStyle = 1;
 			useTurn = true;
@@ -44818,6 +_,14 @@
 			crit = bonusCritChance;
 		}
 
+		/// <summary>
+		/// This method sets a variety of common Item values common to bow weapons.<br/>
+		/// Specifically: width = 14; height = 30; UseSound = SoundID.Item5;<br/>
+		/// Addtionally: <inheritdoc cref="DefaultToRangedWeapon(int,int,int,float,bool)" />
+		/// </summary>
+		/// <param name="singleShotTime"></param>
+		/// <param name="shotVelocity"></param>
+		/// <param name="hasAutoReuse"></param>
 		public void DefaultToBow(int singleShotTime, float shotVelocity, bool hasAutoReuse = false) {
 			DefaultToRangedWeapon(1, AmmoID.Arrow, singleShotTime, shotVelocity, hasAutoReuse);
 			width = 14;
@@ -44836,6 +_,15 @@
 			magic = true;
 		}
 
+		/// <summary>
+		/// This method sets a variety of common Item values common to ranged weapons.<br/>
+		/// Specifically: autoReuse = hasAutoReuse; useStyle = 5; useAnimation = singleShotTime; useTime = singleShotTime; shoot = baseProjType; useAmmo = ammoID; shootSpeed = shotVelocity; noMelee = true; ranged = true;<br/>
+		/// </summary>
+		/// <param name="baseProjType"></param>
+		/// <param name="ammoID"></param>
+		/// <param name="singleShotTime"></param>
+		/// <param name="shotVelocity"></param>
+		/// <param name="hasAutoReuse"></param>
 		public void DefaultToRangedWeapon(int baseProjType, int ammoID, int singleShotTime, float shotVelocity, bool hasAutoReuse = false) {
 			autoReuse = hasAutoReuse;
 			useStyle = 5;
@@ -44861,7 +_,7 @@
 			maxStack = 999;
 		}
 
-		private void DefaultToTorch(int tileStyleToPlace, bool allowWaterPlacement = false) {
+		public void DefaultToTorch(int tileStyleToPlace, bool allowWaterPlacement = false) {
 			flame = true;
 			noWet = !allowWaterPlacement;
 			holdStyle = 1;
@@ -44921,6 +_,18 @@
 			autoReuse = true;
 		}
 
+		/// <summary>
+		/// This method sets a variety of common Item values common to food items.<br/>
+		/// Specifically: UseSound = useGulpSound ? Item3 : Item2; useStyle = useGulpSound ? DrinkLiquid : EatFood;<br/>
+		/// useTurn = true; useAnimation = useTime = animationTime; maxStack = 30; consumable = true;<br/>
+		/// buffType = foodbuff; buffTime = foodbuffduration; rare = Blue; value = 20 silver;
+		/// </summary>
+		/// <param name="newwidth"></param>
+		/// <param name="newheight"></param>
+		/// <param name="foodbuff"></param>
+		/// <param name="foodbuffduration"></param>
+		/// <param name="useGulpSound">If true, the gulp sound is set, otherwise the crunch sound is set</param>
+		/// <param name="animationTime"></param>
 		public void DefaultToFood(int newwidth, int newheight, int foodbuff, int foodbuffduration, bool useGulpSound = false, int animationTime = 17) {
 			if (useGulpSound)
 				UseSound = SoundID.Item3;
@@ -45006,6 +_,18 @@
 			SetDefaults(Type, noMatCheck: false);
 		}
 
+		public void CloneDefaults(int TypeToClone) {
+			int originalType = type;
+			int originalNetID = netID;
+			var originalModItem = ModItem;
+			var originalGlobals = globalItems;
+			SetDefaults(TypeToClone);
+			type = originalType;
+			netID = originalNetID;
+			ModItem = originalModItem;
+			globalItems = originalGlobals;
+		}
+
 		public void SetDefaults(int Type, bool noMatCheck = false) {
 			if (Type < 0) {
 				netDefaults(Type);
@@ -45018,8 +_,10 @@
 				playerIndexTheItemIsReservedFor = Main.myPlayer;
 
 			ResetStats(Type);
+			/*
 			if (type >= 5125)
 				type = 0;
+			*/
 
 			if (type == 0) {
 				netID = 0;
@@ -45044,7 +_,18 @@
 				SetDefaults5(type);
 			}
 
+			// Compensate for the change of itemAnimation getting reset at 0 instead of vanilla's 1.
+			ApplyItemAnimationCompensationsToVanillaItems();
+
+			// tML: make sure some vanilla balance doesn't get obliterated by attack speed changes
+			RestoreMeleeSpeedBehaviorOnVanillaItems();
+
+			//Set 'master' bool for vanilla items with master rarity.
+			if (type < ItemID.Count && rare == ItemRarityID.Master) {
+				master = true;
+			}
+
-			dye = (byte)GameShaders.Armor.GetShaderIdFromItemId(type);
+			dye = GameShaders.Armor.GetShaderIdFromItemId(type);
 			if (hairDye != 0)
 				hairDye = GameShaders.Hair.GetShaderIdFromItemId(type);
 
@@ -45193,11 +_,12 @@
 				maxStack = 999;
 
 			netID = type;
+			ItemLoader.SetDefaults(this);
 			if (!noMatCheck)
 				material = ItemID.Sets.IsAMaterial[type];
 
 			RebuildTooltip();
-			if (type > 0 && type < 5125 && ItemID.Sets.Deprecated[type]) {
+			if (type > 0 && ItemID.Sets.Deprecated[type]) {
 				netID = 0;
 				type = 0;
 				stack = 0;
@@ -45207,14 +_,27 @@
 		public void ResetStats(int Type) {
 			tooltipContext = -1;
 			BestiaryNotes = null;
+			ModItem = null;
+			globalItems = new Instanced<GlobalItem>[0];
+			StatsModifiedBy = new();
+			AllowReforgeForStackableItem = false;
+			attackSpeedOnlyAffectsWeaponAnimation = false;
+			useLimitPerAnimation = null;
+			consumeAmmoOnFirstShotOnly = false;
+			consumeAmmoOnLastShotOnly = false;
+			InterruptChannelOnHurt = false;
+			StopAnimationOnHurt = false;
+			DamageType = DamageClass.Default;
 			sentry = false;
 			canBePlacedInVanityRegardlessOfConditions = false;
 			DD2Summon = false;
 			shopSpecialCurrency = -1;
 			shopCustomPrice = null;
 			expert = false;
+			master = false;
 			isAShopItem = false;
 			expertOnly = false;
+			masterOnly = false;
 			instanced = false;
 			questItem = false;
 			fishingPole = 0;
@@ -45231,10 +_,12 @@
 			mech = false;
 			flame = false;
 			reuseDelay = 0;
+			/*
 			melee = false;
 			magic = false;
 			ranged = false;
 			summon = false;
+			*/
 			placeStyle = 0;
 			buffTime = 0;
 			buffType = 0;
@@ -45310,6 +_,10 @@
 		}
 
 		public Color GetAlpha(Color newColor) {
+			Color? modColor = ItemLoader.GetAlpha(this, newColor);
+			if (modColor.HasValue)
+				return modColor.Value;
+
 			switch (type) {
 				case 3318:
 				case 3319:
@@ -45616,6 +_,7 @@
 				timeSinceItemSpawned += num3;
 			}
 
+			ItemLoader.PostUpdate(this);
 			if (Main.netMode == 2 && playerIndexTheItemIsReservedFor != Main.myPlayer) {
 				timeSinceTheItemHasBeenReservedForSomeone++;
 				if (timeSinceTheItemHasBeenReservedForSomeone >= 300) {
@@ -45696,6 +_,7 @@
 		}
 
 		private void CheckLavaDeath(int i) {
+			bool? canBurnInLava = ItemLoader.CanBurnInLava(this);
 			if (type == 267) {
 				if (Main.netMode == 1)
 					return;
@@ -45715,7 +_,9 @@
 
 				NetMessage.SendData(21, -1, -1, null, i);
 			}
+			else if (canBurnInLava == false)
+				return;
-			else if (playerIndexTheItemIsReservedFor == Main.myPlayer && type != 312 && type != 318 && type != 173 && type != 174 && type != 4422 && type != 175 && type != 2701 && rare == 0) {
+			else if (canBurnInLava == true || (playerIndexTheItemIsReservedFor == Main.myPlayer && type != 312 && type != 318 && type != 173 && type != 174 && type != 4422 && type != 175 && type != 2701 && rare == 0)) {
 				active = false;
 				type = 0;
 				stack = 0;
@@ -45725,6 +_,7 @@
 		}
 
 		private void MoveInWorld(float gravity, float maxFallSpeed, ref Vector2 wetVelocity) {
+			ItemLoader.Update(this, ref gravity, ref maxFallSpeed);
 			if (ItemID.Sets.ItemNoGravity[type]) {
 				base.velocity.X *= 0.95f;
 				if ((double)base.velocity.X < 0.1 && (double)base.velocity.X > -0.1)
@@ -45735,6 +_,7 @@
 					base.velocity.Y = 0f;
 			}
 			else {
+				//patch file: num, num2
 				base.velocity.Y += gravity;
 				if (base.velocity.Y > maxFallSpeed)
 					base.velocity.Y = maxFallSpeed;
@@ -45934,14 +_,25 @@
 					num2 *= 2;
 
 				if (num < (float)num2) {
+					if (!ItemLoader.CanStack(this, item))
+						continue;
+
+					if (!ItemLoader.CanStackInWorld(this, item))
+						continue;
+
 					position = (position + item.position) / 2f;
 					velocity = (velocity + item.velocity) / 2f;
+
+					ItemLoader.StackItems(this, item, out _);
+
+					/* TML: #OnStackHook
 					int num3 = item.stack;
 					if (num3 > maxStack - stack)
 						num3 = maxStack - stack;
 
 					item.stack -= num3;
 					stack += num3;
+					*/
 					if (item.stack <= 0) {
 						item.SetDefaults();
 						item.active = false;
@@ -46280,20 +_,63 @@
 				case 4070:
 					return TextureAssets.Item[type].Frame(1, 4);
 				default:
-					return TextureAssets.Item[type].Frame();
+					// Vanila:  return TextureAssets.Item[type].Frame();
+					// Notes:
+					//   If the item doesn't have an animation, "Main.itemAnimations[type]" is just null, so the code will default to Asset<Texture2D>.Frame(), which will just be what vanilla does.
+					//   However, if it does have an animation, then the source rect will be obtained from the animation instance, which is also what's used for displaying the animation
+					//   source rect for items in the inventory and dropped items in the world.  This source rect will then be the basis for the use item's hitbox, rather than the entire
+					//   spritesheet's size.
+					//     - absoluteAquarian
+					return Main.itemAnimations[type]?.GetFrame(TextureAssets.Item[type].Value) ?? TextureAssets.Item[type].Frame();
 			}
 		}
 
+		/// <summary>
+		/// <inheritdoc cref="Item.NewItem(IEntitySource, int, int, int, int, int, int, bool, int, bool, bool)"/>
+		/// <br/><br/>This particular overload uses two Vector2 to determine the actual spawn position.
+		/// </summary>
+		/// <returns><inheritdoc cref="Item.NewItem(IEntitySource, int, int, int, int, int, int, bool, int, bool, bool)"/></returns>
 		public static int NewItem(IEntitySource source, Vector2 pos, Vector2 randomBox, int Type, int Stack = 1, bool noBroadcast = false, int prefixGiven = 0, bool noGrabDelay = false, bool reverseLookup = false) => NewItem(source, (int)pos.X, (int)pos.Y, (int)randomBox.X, (int)randomBox.Y, Type, Stack, noBroadcast, prefixGiven, noGrabDelay, reverseLookup);
+
+		/// <summary>
+		/// <inheritdoc cref="Item.NewItem(IEntitySource, int, int, int, int, int, int, bool, int, bool, bool)"/>
+		/// <br/><br/>This particular overload uses a Vector2 instead of X and Y to determine the actual spawn position.
+		/// </summary>
+		/// <returns><inheritdoc cref="Item.NewItem(IEntitySource, int, int, int, int, int, int, bool, int, bool, bool)"/></returns>
 		public static int NewItem(IEntitySource source, Vector2 pos, int Width, int Height, int Type, int Stack = 1, bool noBroadcast = false, int prefixGiven = 0, bool noGrabDelay = false, bool reverseLookup = false) => NewItem(source, (int)pos.X, (int)pos.Y, Width, Height, Type, Stack, noBroadcast, prefixGiven, noGrabDelay, reverseLookup);
 
+		/// <summary>
+		/// Spawns an item into the game world with the given type and stack size. The X, Y, Width, and Height parameters dictate a rectangle, the item will be spawned centered within that rectangle. Other overloads support passing in a position directly, or just use 0 for Width and Height if the center is passed in a X and Y.
+		/// This method should not be called on multiplayer clients. If you need to spawn items from client code, use <see cref="Player.QuickSpawnItem(IEntitySource, int, int)"></see> instead, it handles the multiplayer syncing code needed.
+		/// See the <paramref name="noBroadcast"/> documentation if you need to customize attached ModItem or GlobalItem data prior to syncing.
+		/// The source represents the entity causing this item to spawn. The return value is the index of the spawned Item within the <see cref="Main.item"/> array. 
+		/// </summary>
+		/// <param name="source"></param>
+		/// <param name="X"></param>
+		/// <param name="Y"></param>
+		/// <param name="Width"></param>
+		/// <param name="Height"></param>
+		/// <param name="Type">Either an <see cref="ItemID"/> entry or <see cref="ModContent.ItemType{T}"/>, for example <see cref="ItemID.IronskinPotion"/> or ModContent.ItemType&lt;MyModItem&gt;()</param>
+		/// <param name="Stack">Item stack</param>
+		/// <param name="noBroadcast">Controls whether an item spawned on a server is synced using <see cref="NetMessage.SendData"/> and <see cref="MessageID.SyncItem"/>. If false, the item will be synced. If true, the calling code can modify the item instance and then sync the item with <see cref="MessageID.SyncItem"/>. Has no effect except on server. NewItem running on multiplayer clients always needs to manually sync, see <see cref="Player.QuickSpawnItem(IEntitySource, int, int)"/> source code for an example.</param>
+		/// <param name="pfix"></param>
+		/// <param name="noGrabDelay"></param>
+		/// <param name="reverseLookup"></param>
+		/// <returns>The index of the item within <see cref="Main.item"/></returns>
 		public static int NewItem(IEntitySource source, int X, int Y, int Width, int Height, int Type, int Stack = 1, bool noBroadcast = false, int pfix = 0, bool noGrabDelay = false, bool reverseLookup = false) {
+			return Item.NewItem_Inner(source, X, Y, Width, Height, null, Type, Stack, noBroadcast, pfix, noGrabDelay, reverseLookup);
+		}
+
+		private static int NewItem_Inner(IEntitySource source, int X, int Y, int Width, int Height, Item itemToClone, int Type, int Stack = 1, bool noBroadcast = false, int pfix = 0, bool noGrabDelay = false, bool reverseLookup = false) {
 			if (WorldGen.gen)
 				return 0;
 
 			if (Main.rand == null)
 				Main.rand = new UnifiedRandom();
 
+			if (NPCLoader.blockLoot.Contains(Type))
+				return Main.maxItems;
+
 			if (Main.tenthAnniversaryWorld) {
 				if (Type == 58) {
 					Type = Main.rand.NextFromList(new short[3] {
@@ -46328,7 +_,7 @@
 					Type = 1868;
 			}
 
-			if (Type > 0 && cachedItemSpawnsByType[Type] != -1) {
+			if (itemToClone != null && Type > 0 && cachedItemSpawnsByType[Type] != -1) {
 				cachedItemSpawnsByType[Type] += Stack;
 				return 400;
 			}
@@ -46341,9 +_,16 @@
 			Main.timeItemSlotCannotBeReusedFor[num] = 0;
 			Main.item[num] = new Item();
 			Item item = Main.item[num];
+			if (itemToClone != null) {
+				Main.item[num] = itemToClone.Clone();
+				item = Main.item[num];
+				Type = itemToClone.type; // just to be safe if IL edits change type swaps and velocity tweaks.
+				goto skipItemCreation;
+			}
 			item.SetDefaults(Type);
 			item.Prefix(pfix);
 			item.stack = Stack;
+			skipItemCreation:
 			item.position.X = X + Width / 2 - item.width / 2;
 			item.position.Y = Y + Height / 2 - item.height / 2;
 			item.wet = Collision.WetCollision(item.position, item.width, item.height);
@@ -46363,6 +_,8 @@
 			if (ItemSlot.Options.HighlightNewItems && item.type >= 0 && !ItemID.Sets.NeverAppearsAsNewInInventory[item.type])
 				item.newAndShiny = true;
 
+			ItemLoader.OnSpawn(item, source);
+
 			if (Main.netMode == 2 && !noBroadcast)
 				NetMessage.SendData(21, -1, -1, null, num, noGrabDelay.ToInt());
 			else if (Main.netMode == 0)
@@ -46434,14 +_,17 @@
 						continue;
 
 					Player.ItemSpaceStatus status = player.ItemSpace(Main.item[whoAmI]);
-					if (player.CanPullItem(Main.item[whoAmI], status)) {
+					if (ItemLoader.CanPickup(Main.item[whoAmI], player) && player.CanPullItem(Main.item[whoAmI], status)) {
 						float num3 = Math.Abs(player.position.X + (float)(player.width / 2) - position.X - (float)(width / 2)) + Math.Abs(player.position.Y + (float)(player.height / 2) - position.Y - (float)height);
+						int grabRange = Player.defaultItemGrabRange;
 						if (player.manaMagnet && (type == 184 || type == 1735 || type == 1868))
-							num3 -= (float)manaGrabRange;
+							grabRange += manaGrabRange;
 
 						if (player.lifeMagnet && (type == 58 || type == 1734 || type == 1867))
-							num3 -= (float)lifeGrabRange;
+							grabRange += lifeGrabRange;
 
+						ItemLoader.GrabRange(Main.item[whoAmI], player, ref grabRange);
+						num3 -= grabRange;
 						if (type == 4143)
 							num3 -= (float)manaGrabRange;
 
@@ -46460,17 +_,43 @@
 			}
 		}
 
-		public Item Clone() => (Item)MemberwiseClone();
-		public Item DeepClone() => (Item)MemberwiseClone();
-
-		public bool IsTheSameAs(Item compareItem) {
+		public Item Clone() {
+			Item newItem = (Item)MemberwiseClone();
+
+			newItem.ModItem = ModItem?.Clone(newItem);
+			newItem.globalItems = globalItems
+				.Select(g => new Instanced<GlobalItem>(g.Index, g.Instance?.Clone(this, newItem)))
+				.ToArray();
+
+			return newItem;
+		}
+
+		// clones the item, but copies over the data from another data source
+		// specifically needed for reforging
+		public Item CloneWithModdedDataFrom(Item dataSource) {
+			Item newItem = (Item)MemberwiseClone();
+
+			newItem.ModItem = dataSource.ModItem?.Clone(newItem);
+			newItem.globalItems = dataSource.globalItems
+				.Select(g => new Instanced<GlobalItem>(g.Index, g.Instance?.Clone(dataSource, newItem)))
+				.ToArray();
+
+			return newItem;
+		}
+
+		internal Item DeepClone() => Clone();
+
+		// TML: Made internal so that modders will have to replace it with a more straightforward item.type == compareItem.type
+		internal bool IsTheSameAs(Item compareItem) {
 			if (netID == compareItem.netID)
 				return type == compareItem.type;
 
 			return false;
 		}
 
+		// TML: Made internal + renamed in Item.TML.cs with more descriptive name (IsNotSameTypePrefixAndStack)
+		//TODO change to !IsNetSyncEquivalent ?
-		public bool IsNotTheSameAs(Item compareItem) {
+		internal bool IsNotTheSameAs(Item compareItem) {
 			if (netID == compareItem.netID && stack == compareItem.stack)
 				return prefix != compareItem.prefix;
 
@@ -46493,6 +_,8 @@
 			dye = 0;
 			shoot = 0;
 			mountType = -1;
+			ModItem = null;
+			globalItems = new Instanced<GlobalItem>[0];
 		}
 
 		public void OnPurchase(Item item) {
@@ -46513,7 +_,7 @@
 			if (context == ItemSerializationContext.SavingAndLoading) {
 				writer.Write(netID);
 				writer.Write(stack);
-				writer.Write(prefix);
+				ItemIO.WriteByteVanillaPrefix(this, writer);
 			}
 		}
 
@@ -46524,7 +_,7 @@
 				Prefix(reader.ReadByte());
 			}
 
-			if (type >= 5125)
+			if (type >= ItemLoader.ItemCount)
 				TurnToAir();
 		}
 
