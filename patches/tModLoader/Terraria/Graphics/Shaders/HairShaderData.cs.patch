--- src/TerrariaNetCore/Terraria/Graphics/Shaders/HairShaderData.cs
+++ src/tModLoader/Terraria/Graphics/Shaders/HairShaderData.cs
@@ -1,3 +_,4 @@
+using System;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics;
 using ReLogic.Content;
@@ -17,38 +_,43 @@
 
 	public bool ShaderDisabled => _shaderDisabled;
 
+	[Obsolete("Removed in 1.4.5. Use Asset<Effect> version instead. Asset version works with AsyncLoad")]
 	public HairShaderData(Ref<Effect> shader, string passName)
 		: base(shader, passName)
 	{
 	}
+	public HairShaderData(Asset<Effect> shader, string passName)
+		: base(shader, passName)
+	{
+	}
 
 	public virtual void Apply(Player player, DrawData? drawData = null)
 	{
 		if (!_shaderDisabled) {
-			base.Shader.Parameters["uColor"].SetValue(_uColor);
+			base.Shader.Parameters["uColor"]?.SetValue(_uColor);
-			base.Shader.Parameters["uSaturation"].SetValue(_uSaturation);
+			base.Shader.Parameters["uSaturation"]?.SetValue(_uSaturation);
-			base.Shader.Parameters["uSecondaryColor"].SetValue(_uSecondaryColor);
+			base.Shader.Parameters["uSecondaryColor"]?.SetValue(_uSecondaryColor);
-			base.Shader.Parameters["uTime"].SetValue(Main.GlobalTimeWrappedHourly);
+			base.Shader.Parameters["uTime"]?.SetValue(Main.GlobalTimeWrappedHourly);
-			base.Shader.Parameters["uOpacity"].SetValue(_uOpacity);
+			base.Shader.Parameters["uOpacity"]?.SetValue(_uOpacity);
-			base.Shader.Parameters["uTargetPosition"].SetValue(_uTargetPosition);
+			base.Shader.Parameters["uTargetPosition"]?.SetValue(_uTargetPosition);
 			if (drawData.HasValue) {
 				DrawData value = drawData.Value;
 				Vector4 value2 = new Vector4(value.sourceRect.Value.X, value.sourceRect.Value.Y, value.sourceRect.Value.Width, value.sourceRect.Value.Height);
-				base.Shader.Parameters["uSourceRect"].SetValue(value2);
+				base.Shader.Parameters["uSourceRect"]?.SetValue(value2);
-				base.Shader.Parameters["uWorldPosition"].SetValue(Main.screenPosition + value.position);
+				base.Shader.Parameters["uWorldPosition"]?.SetValue(Main.screenPosition + value.position);
-				base.Shader.Parameters["uImageSize0"].SetValue(new Vector2(value.texture.Width, value.texture.Height));
+				base.Shader.Parameters["uImageSize0"]?.SetValue(new Vector2(value.texture.Width, value.texture.Height));
 			}
 			else {
-				base.Shader.Parameters["uSourceRect"].SetValue(new Vector4(0f, 0f, 4f, 4f));
+				base.Shader.Parameters["uSourceRect"]?.SetValue(new Vector4(0f, 0f, 4f, 4f));
 			}
 
 			if (_uImage != null) {
 				Main.graphics.GraphicsDevice.Textures[1] = _uImage.Value;
-				base.Shader.Parameters["uImageSize1"].SetValue(new Vector2(_uImage.Width(), _uImage.Height()));
+				base.Shader.Parameters["uImageSize1"]?.SetValue(new Vector2(_uImage.Width(), _uImage.Height()));
 			}
 
 			if (player != null)
-				base.Shader.Parameters["uDirection"].SetValue((float)player.direction);
+				base.Shader.Parameters["uDirection"]?.SetValue((float)player.direction);
 
 			Apply();
 		}
@@ -67,6 +_,12 @@
 	public HairShaderData UseImage(string path)
 	{
 		_uImage = Main.Assets.Request<Texture2D>(path);
+		return this;
+	}
+
+	public HairShaderData UseImage(Asset<Texture2D> asset)
+	{
+		_uImage = asset;
 		return this;
 	}
 
