--- src/Terraria/Terraria/Graphics/Light/LegacyLighting.cs
+++ src/tModLoader/Terraria/Graphics/Light/LegacyLighting.cs
@@ -5,6 +_,7 @@
 using System.Diagnostics;
 using Terraria.DataStructures;
 using Terraria.Utilities;
+using Terraria.ModLoader;
 
 namespace Terraria.Graphics.Light
 {
@@ -106,7 +_,7 @@
 		private int _expandedRectTop;
 		private int _expandedRectRight;
 		private int _expandedRectBottom;
-		private float _negLight = 0.04f;
+		internal float _negLight = 0.04f;
 		private float _negLight2 = 0.16f;
 		private float _wetLightR = 0.16f;
 		private float _wetLightG = 0.16f;
@@ -114,7 +_,7 @@
 		private float _honeyLightR = 0.16f;
 		private float _honeyLightG = 0.16f;
 		private float _honeyLightB = 0.16f;
-		private float _blueWave = 1f;
+		internal float _blueWave = 1f;
 		private int _blueDir = 1;
 		private RectArea _minBoundArea;
 		private RectArea _requestedArea;
@@ -122,7 +_,6 @@
 		private RectArea _offScreenTiles2ExpandedArea;
 		private TileLightScanner _tileScanner;
 		private readonly Camera _camera;
-		private World _world;
 		private static FastRandom _swipeRandom = FastRandom.CreateWithRandomSeed();
 		private LightMap _lightMap = new LightMap();
 
@@ -133,10 +_,9 @@
 
 		public bool IsColorOrWhiteMode => Mode < 2;
 
-		public LegacyLighting(Camera camera, World world) {
+		public LegacyLighting(Camera camera) {
 			_camera = camera;
-			_world = world;
-			_tileScanner = new TileLightScanner(world);
+			_tileScanner = new TileLightScanner();
 		}
 
 		public Vector3 GetColor(int x, int y) {
@@ -288,10 +_,10 @@
 			value2 = Utils.Clamp(value2, Lighting.OffScreenTiles, Main.maxTilesX - Lighting.OffScreenTiles);
 			value3 = Utils.Clamp(value3, Lighting.OffScreenTiles, Main.maxTilesY - Lighting.OffScreenTiles);
 			value4 = Utils.Clamp(value4, Lighting.OffScreenTiles, Main.maxTilesY - Lighting.OffScreenTiles);
-			Main.mapMinX = Utils.Clamp(_requestedRectLeft, num, _world.TileColumns - num);
+			Main.mapMinX = Utils.Clamp(_requestedRectLeft, num, Main.maxTilesX - num);
-			Main.mapMaxX = Utils.Clamp(_requestedRectRight, num, _world.TileColumns - num);
+			Main.mapMaxX = Utils.Clamp(_requestedRectRight, num, Main.maxTilesX - num);
-			Main.mapMinY = Utils.Clamp(_requestedRectTop, num, _world.TileRows - num);
+			Main.mapMinY = Utils.Clamp(_requestedRectTop, num, Main.maxTilesY - num);
-			Main.mapMaxY = Utils.Clamp(_requestedRectBottom, num, _world.TileRows - num);
+			Main.mapMaxY = Utils.Clamp(_requestedRectBottom, num, Main.maxTilesY - num);
 			Main.mapMinX = Utils.Clamp(Main.mapMinX, value, value2);
 			Main.mapMaxX = Utils.Clamp(Main.mapMaxX, value, value2);
 			Main.mapMinY = Utils.Clamp(Main.mapMinY, value3, value4);
@@ -330,9 +_,9 @@
 		}
 
 		private void UpdateLightToSkyColor(float tileR, float tileG, float tileB) {
-			int num = Utils.Clamp(_expandedRectLeft, 0, _world.TileColumns - 1);
+			int num = Utils.Clamp(_expandedRectLeft, 0, Main.maxTilesX - 1);
-			int num2 = Utils.Clamp(_expandedRectRight, 0, _world.TileColumns - 1);
+			int num2 = Utils.Clamp(_expandedRectRight, 0, Main.maxTilesX - 1);
-			int num3 = Utils.Clamp(_expandedRectTop, 0, _world.TileRows - 1);
+			int num3 = Utils.Clamp(_expandedRectTop, 0, Main.maxTilesY - 1);
 			int num4 = Utils.Clamp(_expandedRectBottom, 0, (int)Main.worldSurface - 1);
 			if (!((double)num3 < Main.worldSurface))
 				return;
@@ -564,10 +_,10 @@
 				}
 			}
 
-			num = Utils.Clamp(_expandedRectLeft, 5, _world.TileColumns - 1);
+			num = Utils.Clamp(_expandedRectLeft, 5, Main.maxTilesX - 1);
-			num2 = Utils.Clamp(_expandedRectRight, 5, _world.TileColumns - 1);
+			num2 = Utils.Clamp(_expandedRectRight, 5, Main.maxTilesX - 1);
-			num3 = Utils.Clamp(_expandedRectTop, 5, _world.TileRows - 1);
+			num3 = Utils.Clamp(_expandedRectTop, 5, Main.maxTilesY - 1);
-			num4 = Utils.Clamp(_expandedRectBottom, 5, _world.TileRows - 1);
+			num4 = Utils.Clamp(_expandedRectBottom, 5, Main.maxTilesY - 1);
 			Main.SceneMetrics.ScanAndExportToMain(new SceneMetricsScanSettings {
 				VisualScanArea = new Rectangle(num, num3, num2 - num, num4 - num3),
 				BiomeScanCenterPositionInWorld = Main.LocalPlayer.Center,
@@ -578,6 +_,7 @@
 			_tileScanner.ExportTo(new Rectangle(num, num3, num2 - num, num4 - num3), _lightMap);
 			for (int m = num; m < num2; m++) {
 				LightingState[] array3 = _states[m - _expandedRectLeft];
+				//patch file: n, num17
 				for (int n = num3; n < num4; n++) {
 					LightingState lightingState2 = array3[n - _expandedRectTop];
 					Tile tile = Main.tile[m, n];
@@ -746,6 +_,8 @@
 							_wetLightB = 0f;
 							break;
 					}
+
+					LoaderManager.Get<WaterStylesLoader>().LightColorMultiplier(Main.waterStyle, ref _wetLightR, ref _wetLightG, ref _wetLightB);
 				}
 				else {
 					_negLight = 0.9f;
@@ -772,6 +_,8 @@
 					_negLight *= 0.85f;
 					_negLight2 *= 0.85f;
 				}
+
+				SystemLoader.ModifyLightingBrightness(ref _negLight, ref _negLight2);
 			}
 			else {
 				_negLight = 0.04f;
@@ -796,6 +_,7 @@
 					_negLight2 += 0.18f;
 				}
 
+				SystemLoader.ModifyLightingBrightness(ref _negLight, ref _negLight2);
 				_wetLightR = _negLight * 1.2f;
 				_wetLightG = _negLight * 1.1f;
 			}
