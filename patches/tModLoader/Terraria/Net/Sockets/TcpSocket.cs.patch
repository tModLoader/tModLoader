--- src/TerrariaNetCore/Terraria/Net/Sockets/TcpSocket.cs
+++ src/tModLoader/Terraria/Net/Sockets/TcpSocket.cs
@@ -4,7 +_,9 @@
 using System.Net.Sockets;
 using System.Threading;
 using ReLogic.OS;
+using Steamworks;
 using Terraria.Localization;
+using Terraria.ModLoader;
 
 namespace Terraria.Net.Sockets;
 
@@ -38,6 +_,9 @@
 
 	void ISocket.Close()
 	{
+		if (_remoteAddress != null)
+			ModNet.Log(_remoteAddress, "Closing TcpSocket");
+
 		_remoteAddress = null;
 		_connection.Close();
 	}
@@ -75,7 +_,15 @@
 			tuple = (Tuple<SocketSendCallback, object>)obj[0];
 		}
 
+		(var state, var size) = ((object, int))tuple.Item2;
+		tuple = Tuple.Create(tuple.Item1, state);
+		if (ModNet.DetailedLogging)
+			ModNet.Debug(_remoteAddress, $"sent {size}");
+
 		try {
+			if (!_connection.Connected)
+				return; // reduce exception spam, because `GetStream` is invalid on a closed/disposed connection
+
 			_connection.GetStream().EndWrite(result);
 			tuple.Item1(tuple.Item2);
 		}
@@ -90,6 +_,17 @@
 
 	void ISocket.AsyncSend(byte[] data, int offset, int size, SocketSendCallback callback, object state)
 	{
+		if (!_connection.Connected) { // replace first chance exception with a cleaner log message, because GetStream fails on a closed _connection
+			ModNet.Warn("TcpSocket, AsyncSend after connection closed.");
+			return;
+		}
+
+		if (ModNet.DetailedLogging)
+			ModNet.Debug(_remoteAddress, $"send {size}");
+
+		// tML, for debugging
+		state = (state, size);
+
 		if (!Platform.IsWindows) {
 			byte[] array = LegacyNetBufferPool.RequestBuffer(data, offset, size);
 			_connection.GetStream().BeginWrite(array, 0, size, SendCallback, new object[2] {
@@ -152,7 +_,8 @@
 		while (_isListening && !Netplay.Disconnect) {
 			try {
 				ISocket socket = new TcpSocket(_listener.AcceptTcpClient());
+				// moved to Netplay.OnConnectionAccepted to report steam connections as well
-				Console.WriteLine(Language.GetTextValue("Net.ClientConnecting", socket.GetRemoteAddress()));
+				// Console.WriteLine(Language.GetTextValue("Net.ClientConnecting", socket.GetRemoteAddress()));
 				_listenerCallback(socket);
 			}
 			catch (Exception) {
