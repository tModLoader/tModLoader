--- src/TerrariaNetCore/Terraria/NetMessage.cs
+++ src/tModLoader/Terraria/NetMessage.cs
@@ -1,4 +_,5 @@
 using Ionic.Zlib;
+using log4net.Core;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics.PackedVector;
 using System;
@@ -11,6 +_,8 @@
 using Terraria.ID;
 using Terraria.IO;
 using Terraria.Localization;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Social;
 
 namespace Terraria
@@ -50,7 +_,7 @@
 		}
 
 		public static MessageBuffer[] buffer = new MessageBuffer[257];
-		private static PlayerDeathReason _currentPlayerDeathReason;
+		public static PlayerDeathReason _currentPlayerDeathReason;
 		private static NetSoundInfo _currentNetSoundInfo;
 		private static CoinLossRevengeSystem.RevengeMarker _currentRevengeMarker;
 
@@ -76,6 +_,9 @@
 			if (Main.netMode == 2 && remoteClient >= 0)
 				num = remoteClient;
 
+			if (ModNet.HijackSendData(num, msgType, remoteClient, ignoreClient, text, number, number2, number3, number4, number5, number6, number7))
+				return;
+
 			lock (buffer[num]) {
 				BinaryWriter writer = buffer[num].writer;
 				if (writer == null) {
@@ -89,12 +_,12 @@
 				writer.Write((byte)msgType);
 				switch (msgType) {
 					case 1:
-						writer.Write("Terraria" + 248);
+						writer.Write(BuildInfo.versionedName);
 						break;
 					case 2:
 						text.Serialize(writer);
 						if (Main.dedServ)
-							Console.WriteLine(Language.GetTextValue("CLI.ClientWasBooted", Netplay.Clients[num].Socket.GetRemoteAddress().ToString(), text));
+							Logging.ServerConsoleLine(Language.GetTextValue("CLI.ClientWasBooted", Netplay.Clients[num].Socket.GetRemoteAddress().ToString(), text));
 						break;
 					case 3:
 						writer.Write((byte)remoteClient);
@@ -106,7 +_,12 @@
 							writer.Write((byte)player5.skinVariant);
 							writer.Write((byte)player5.hair);
 							writer.Write(player5.name);
+
+							if (ModNet.AllowVanillaClients)
+								PlayerIO.WriteByteVanillaHairDye(player5.hairDye, writer);
+							else
-							writer.Write(player5.hairDye);
+								writer.Write7BitEncodedInt(player5.hairDye);
+
 							BitsByte bb6 = (byte)0;
 							for (int num14 = 0; num14 < 8; num14++) {
 								bb6[num14] = player5.hideVisibleAccessory[num14];
@@ -157,12 +_,19 @@
 
 							num8 = item5.stack;
 							num9 = item5.netID;
+							//Patch context.
 							if (num8 < 0)
 								num8 = 0;
 
-							writer.Write((short)num8);
-							writer.Write((byte)number3);
-							writer.Write((short)num9);
+							if (ModNet.AllowVanillaClients) {
+								ItemIO.WriteShortVanillaStack(num8, writer);
+								ItemIO.WriteByteVanillaPrefix(item5, writer);
+								ItemIO.WriteShortVanillaID(item5, writer);
+							}
+							else {
+								ItemIO.Send(item5, writer, writeStack: true);
+							}
+
 							break;
 						}
 					case 7: {
@@ -306,12 +_,15 @@
 							writer.Write((short)WorldGen.SavedOreTiers.Mythril);
 							writer.Write((short)WorldGen.SavedOreTiers.Adamantite);
 							writer.Write((sbyte)Main.invasionType);
+
 							if (SocialAPI.Network != null)
 								writer.Write(SocialAPI.Network.GetLobbyId());
 							else
 								writer.Write(0uL);
 
 							writer.Write(Sandstorm.IntendedSeverity);
+							if (!ModNet.AllowVanillaClients)
+								WorldIO.SendModData(writer);
 							break;
 						}
 					case 8:
@@ -509,14 +_,24 @@
 							writer.Write((short)number);
 							writer.WriteVector2(item7.position);
 							writer.WriteVector2(item7.velocity);
-							writer.Write((short)item7.stack);
-							writer.Write(item7.prefix);
+
+							if (ModNet.AllowVanillaClients) {
+								ItemIO.WriteShortVanillaStack(item7, writer);
+								ItemIO.WriteByteVanillaPrefix(item7, writer);
+							}
+							else {
+								writer.Write7BitEncodedInt(item7.stack);
+								writer.Write7BitEncodedInt(item7.prefix);
+							}
+
 							writer.Write((byte)number2);
 							short value5 = 0;
+							//Patch context just in case.
 							if (item7.active && item7.stack > 0)
 								value5 = (short)item7.netID;
 
 							writer.Write(value5);
+							ItemIO.SendModData(item7, writer);
 							break;
 						}
 					case 22:
@@ -586,9 +_,12 @@
 								}
 							}
 
-							if (nPC2.type >= 0 && nPC2.type < 670 && Main.npcCatchable[nPC2.type])
+							if (nPC2.type >= 0 && Main.npcCatchable[nPC2.type])
 								writer.Write((byte)nPC2.releaseOwner);
 
+							if (!ModNet.AllowVanillaClients)
+								NPCLoader.SendExtraAI(writer, NPCLoader.WriteExtraAI(nPC2));
+
 							break;
 						}
 					case 24:
@@ -624,12 +_,17 @@
 							if (projectile.knockBack != 0f)
 								bb22[5] = true;
 
-							if (projectile.type > 0 && projectile.type < 972 && ProjectileID.Sets.NeedsUUID[projectile.type])
+							if (projectile.type > 0 && ProjectileID.Sets.NeedsUUID[projectile.type])
 								bb22[7] = true;
 
 							if (projectile.originalDamage != 0)
 								bb22[6] = true;
 
+							byte[] extraAI = !ModNet.AllowVanillaClients ? ProjectileLoader.WriteExtraAI(projectile) : null;
+							bool hasExtraAI = extraAI?.Length > 0;
+
+							bb22[2] = hasExtraAI; // This bit is unused by vanilla.
+
 							writer.Write(bb22);
 							for (int num21 = 0; num21 < Projectile.maxAI; num21++) {
 								if (bb22[num21])
@@ -651,11 +_,18 @@
 							if (bb22[7])
 								writer.Write((short)projectile.projUUID);
 
+							if (hasExtraAI) {
+								ProjectileLoader.SendExtraAI(writer, extraAI);
+							}
+
 							break;
 						}
 					case 28:
 						writer.Write((short)number);
+						if (ModNet.AllowVanillaClients)
-						writer.Write((short)number2);
+							writer.Write((short)number2);
+						else
+							writer.Write((int)number2);
 						writer.Write(number3);
 						writer.Write((byte)(number4 + 1f));
 						writer.Write((byte)number5);
@@ -676,13 +_,21 @@
 							Item item6 = Main.chest[number].item[(byte)number2];
 							writer.Write((short)number);
 							writer.Write((byte)number2);
+							/*
 							short value2 = (short)item6.netID;
 							if (item6.Name == null)
 								value2 = 0;
-
-							writer.Write((short)item6.stack);
-							writer.Write(item6.prefix);
-							writer.Write(value2);
+							*/
+
+							if (ModNet.AllowVanillaClients) {
+								ItemIO.WriteShortVanillaStack(item6, writer);
+								ItemIO.WriteByteVanillaPrefix(item6, writer);
+								ItemIO.WriteShortVanillaID(item6, writer);
+							}
+							else {
+								ItemIO.Send(item6, writer, writeStack: true);
+							}
+
 							break;
 						}
 					case 33: {
@@ -726,6 +_,8 @@
 						else {
 							writer.Write((short)0);
 						}
+						if (number >= 100)
+							writer.Write((ushort)number6);
 						break;
 					case 35:
 						writer.Write((byte)number);
@@ -738,6 +_,9 @@
 							writer.Write(player3.zone2);
 							writer.Write(player3.zone3);
 							writer.Write(player3.zone4);
+							if (!ModNet.AllowVanillaClients)
+								BiomeLoader.SendCustomBiomes(player3, writer);
+
 							break;
 						}
 					case 38:
@@ -790,7 +_,7 @@
 						}
 					case 50: {
 							writer.Write((byte)number);
-							for (int n = 0; n < 22; n++) {
+							for (int n = 0; n < Player.MaxBuffs; n++) {
 								writer.Write((ushort)Main.player[number].buffType[n]);
 							}
 
@@ -997,7 +_,7 @@
 							bool flag3 = TileEntity.ByID.ContainsKey(number);
 							writer.Write(flag3);
 							if (flag3)
-								TileEntity.Write(writer, TileEntity.ByID[number], networkSend: true);
+								TileEntity.Write(writer, TileEntity.ByID[number], networkSend: true, lightSend: true); //TML: Made lightSend true.
 
 							break;
 						}
@@ -1060,14 +_,28 @@
 							writer.Write((short)number);
 							writer.Write((short)number2);
 							Item item3 = Main.player[(int)number4].inventory[(int)number3];
-							writer.Write((short)item3.netID);
-							writer.Write(item3.prefix);
-							writer.Write((short)number5);
+							if (ModNet.AllowVanillaClients) {
+								ItemIO.WriteShortVanillaID(item3, writer);
+								ItemIO.WriteByteVanillaPrefix(item3, writer);
+								ItemIO.WriteShortVanillaStack(number5, writer);
+							}
+							else {
+								ItemIO.Send(item3, writer);
+								writer.Write7BitEncodedInt(number5);
+							}
+
 							break;
 						}
 					case 91:
 						writer.Write(number);
+						// TML: #WorldUIAnchorProjectileSyncFix
+						// number2 is packed with owner and type
+						int packedOwnerType = (int)number2;
+						number2 = (int)number2 & 0xFF; // Reassign for patch reduction - this is now "type" (Masking has no effect on vanilla value)
 						writer.Write((byte)number2);
+						// Send byte for owner if type corresponds to projectile (magic number 2)
+						if (!ModNet.AllowVanillaClients && number2 == 2)
+							writer.Write((byte)(packedOwnerType >> 8));
 						if (number2 != 255f) {
 							writer.Write((ushort)number3);
 							writer.Write((ushort)number4);
@@ -1230,9 +_,17 @@
 							writer.Write((short)number);
 							writer.Write((short)number2);
 							Item item2 = Main.player[(int)number4].inventory[(int)number3];
-							writer.Write((short)item2.netID);
-							writer.Write(item2.prefix);
-							writer.Write((short)number5);
+
+							if (ModNet.AllowVanillaClients) {
+								ItemIO.WriteShortVanillaID(item2, writer);
+								ItemIO.WriteByteVanillaPrefix(item2, writer);
+								ItemIO.WriteShortVanillaStack(number5, writer);
+							}
+							else {
+								ItemIO.Send(item2, writer);
+								writer.Write7BitEncodedInt(number5);
+							}
+
 							break;
 						}
 					case 124: {
@@ -1293,9 +_,17 @@
 							writer.Write((short)number);
 							writer.Write((short)number2);
 							Item item = Main.player[(int)number4].inventory[(int)number3];
-							writer.Write((short)item.netID);
-							writer.Write(item.prefix);
-							writer.Write((short)number5);
+
+							if (ModNet.AllowVanillaClients) {
+								ItemIO.WriteShortVanillaID(item, writer);
+								ItemIO.WriteByteVanillaPrefix(item, writer);
+								ItemIO.WriteShortVanillaStack(number5, writer);
+							}
+							else {
+								ItemIO.Send(item, writer);
+								writer.Write7BitEncodedInt(number5);
+							}
+
 							break;
 						}
 					case 134: {
@@ -1352,7 +_,10 @@
 
 				int num26 = (int)writer.BaseStream.Position;
 				writer.BaseStream.Position = position;
+				// TODO: Make this int or some other solution. This used to be cast to short. NetMessage.CheckBytes reads ushort though, so changing this is fine. We want to allow for more data primarily because writing tile
+				// chunks can go more than 32767 (and even 65535) bytes. This is because ModTileEntities can have large amounts of data especially when they sync Items and instanced GlobalItem classes are in play.
+				// Complications include AllowVanillaClients, message length byte length negotiation, and MessageBuffer.readBuffer having a fixed size.
-				writer.Write((short)num26);
+				writer.Write((ushort)num26);
 				writer.BaseStream.Position = num26;
 				if (Main.netMode == 1) {
 					if (Netplay.Connection.Socket.IsConnected()) {
@@ -1620,16 +_,16 @@
 			int num6 = 0;
 			byte b = 0;
 			byte[] array4 = new byte[15];
-			Tile tile = null;
+			Tile? tile = null;
 			for (int i = yStart; i < yStart + height; i++) {
 				for (int j = xStart; j < xStart + width; j++) {
 					Tile tile2 = Main.tile[j, i];
-					if (tile2.isTheSameAs(tile) && TileID.Sets.AllowsSaveCompressionBatching[tile2.type]) {
-						num4 = (short)(num4 + 1);
-						continue;
-					}
-
 					if (tile != null) {
+						if (tile2.isTheSameAs(tile.Value) && TileID.Sets.AllowsSaveCompressionBatching[tile2.type]) {
+							num4 = (short)(num4 + 1);
+							continue;
+						}
+
 						if (num4 > 0) {
 							array4[num5] = (byte)(num4 & 0xFF);
 							num5++;
@@ -1670,7 +_,7 @@
 							}
 						}
 
-						if (tile2.type == 88 && tile2.frameX % 54 == 0 && tile2.frameY % 36 == 0) {
+						if (TileID.Sets.BasicDresser[tile2.type] && tile2.frameX % 54 == 0 && tile2.frameY % 36 == 0) {
 							short num8 = (short)Chest.FindChest(j, i);
 							if (num8 != -1) {
 								array[num] = num8;
@@ -1690,7 +_,7 @@
 								array2[num2++] = num10;
 						}
 
-						if (tile2.type == 425 && tile2.frameX % 36 == 0 && tile2.frameY % 36 == 0) {
+						if ((tile2.type == 425 || tile2.type >= TileID.Count && Main.tileSign[tile2.type]) && tile2.frameX % 36 == 0 && tile2.frameY % 36 == 0) {
 							short num11 = (short)Sign.ReadSign(j, i);
 							if (num11 != -1)
 								array2[num2++] = num11;
@@ -1855,9 +_,17 @@
 				writer.Write(sign.text);
 			}
 
+			foreach (var item in TileEntity.ByPosition) {
+				Point16 pos = item.Key;
+				if (pos.X >= xStart && pos.X < xStart + width && pos.Y >= yStart && pos.Y < yStart + height) {
+					if (item.Value.type > 2)
+						array3[num3++] = (short)item.Value.ID;
+				}
+			}
+
 			writer.Write(num3);
 			for (int m = 0; m < num3; m++) {
-				TileEntity.Write(writer, TileEntity.ByID[array3[m]]);
+				TileEntity.Write(writer, TileEntity.ByID[array3[m]], networkSend: true); //TML: Made networkSend true, but lightSend should be false.
 			}
 		}
 
@@ -1892,16 +_,20 @@
 		}
 
 		public static void DecompressTileBlock_Inner(BinaryReader reader, int xStart, int yStart, int width, int height) {
-			Tile tile = null;
+			Tile tile = default;
 			int num = 0;
 			for (int i = yStart; i < yStart + height; i++) {
 				for (int j = xStart; j < xStart + width; j++) {
 					if (num != 0) {
 						num--;
+						/*
 						if (Main.tile[j, i] == null)
 							Main.tile[j, i] = new Tile(tile);
 						else
 							Main.tile[j, i].CopyFrom(tile);
+						*/
+
+						Main.tile[j, i].CopyFrom(tile);
 
 						continue;
 					}
@@ -2053,7 +_,7 @@
 
 			num3 = reader.ReadInt16();
 			for (int m = 0; m < num3; m++) {
-				TileEntity tileEntity = TileEntity.Read(reader);
+				TileEntity tileEntity = TileEntity.Read(reader, networkSend: true); //TML: Made networkSend true, but lightSend should be false.
 				TileEntity.ByID[tileEntity.ID] = tileEntity;
 				TileEntity.ByPosition[tileEntity.Position] = tileEntity;
 			}
@@ -2066,10 +_,11 @@
 					buffer[i].totalData += streamLength;
 					buffer[i].checkBytes = true;
 				}
-				catch {
+				catch (Exception e) {
 					if (Main.netMode == 1) {
 						Main.menuMode = 15;
 						Main.statusText = Language.GetTextValue("Error.BadHeaderBufferOverflow");
+						Logging.Terraria.Error(Main.statusText, e);
 						Netplay.Disconnect = true;
 					}
 					else {
@@ -2113,7 +_,7 @@
 				}
 				catch (Exception) {
 					if (Main.dedServ && num < NetMessage.buffer.Length - 100)
-						Console.WriteLine("Error on message " + NetMessage.buffer[num + 2]);
+						Logging.ServerConsoleLine("Error on message " + NetMessage.buffer[num + 2], Level.Warn);
 
 					num2 = 0;
 					num = 0;
@@ -2324,8 +_,10 @@
 			}
 
 			if (!flag) {
-				Console.WriteLine(Language.GetTextValue("Net.ServerAutoShutdown"));
+				Logging.ServerConsoleLine(Language.GetTextValue("Net.ServerAutoShutdown"));
 				WorldFile.SaveWorld();
+				SystemLoader.OnWorldUnload();
+				TileIO.PostExitWorldCleanup();
 				Netplay.Disconnect = true;
 			}
 		}
@@ -2376,11 +_,12 @@
 					SendData(5, toWho, fromWho, null, plr, 94 + m, (int)Main.player[plr].miscDyes[m].prefix);
 				}
 
+				PlayerLoader.SyncPlayer(Main.player[plr], toWho, fromWho, false);
 				if (!Netplay.Clients[plr].IsAnnouncementCompleted) {
 					Netplay.Clients[plr].IsAnnouncementCompleted = true;
 					ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.mp[19].Key, Main.player[plr].name), new Color(255, 240, 20), plr);
 					if (Main.dedServ)
-						Console.WriteLine(Lang.mp[19].Format(Main.player[plr].name));
+						Logging.ServerConsoleLine(Lang.mp[19].Format(Main.player[plr].name));
 				}
 
 				return;
@@ -2392,7 +_,7 @@
 				Netplay.Clients[plr].IsAnnouncementCompleted = false;
 				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.mp[20].Key, Netplay.Clients[plr].Name), new Color(255, 240, 20), plr);
 				if (Main.dedServ)
-					Console.WriteLine(Lang.mp[20].Format(Netplay.Clients[plr].Name));
+					Logging.ServerConsoleLine(Lang.mp[20].Format(Netplay.Clients[plr].Name));
 
 				Netplay.Clients[plr].Name = "Anonymous";
 			}
