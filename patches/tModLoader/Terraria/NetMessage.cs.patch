--- src/TerrariaNetCore/Terraria/NetMessage.cs
+++ src/tModLoader/Terraria/NetMessage.cs
@@ -1,5 +_,6 @@
 using System;
 using System.IO;
+using System.Threading;
 using Ionic.Zlib;
 using Microsoft.Xna.Framework;
 using Microsoft.Xna.Framework.Graphics.PackedVector;
@@ -10,6 +_,8 @@
 using Terraria.GameContent.Tile_Entities;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Social;
 
 namespace Terraria;
@@ -54,7 +_,7 @@
 	private static short[] _compressChestList = new short[8000];
 	private static short[] _compressSignList = new short[1000];
 	private static short[] _compressEntities = new short[1000];
-	private static PlayerDeathReason _currentPlayerDeathReason;
+	public static PlayerDeathReason _currentPlayerDeathReason;
 	private static NetSoundInfo _currentNetSoundInfo;
 	private static CoinLossRevengeSystem.RevengeMarker _currentRevengeMarker;
 
@@ -85,6 +_,9 @@
 		if (Main.netMode == 2 && remoteClient >= 0)
 			num = remoteClient;
 
+		if (ModNet.HijackSendData(num, msgType, remoteClient, ignoreClient, text, number, number2, number3, number4, number5, number6, number7))
+			return;
+
 		lock (buffer[num]) {
 			BinaryWriter writer = buffer[num].writer;
 			if (writer == null) {
@@ -98,12 +_,12 @@
 			writer.Write((byte)msgType);
 			switch (msgType) {
 				case 1:
-					writer.Write("Terraria" + 276);
+					writer.Write(ModNet.NetVersionString);
 					break;
 				case 2:
 					text.Serialize(writer);
 					if (Main.dedServ)
-						Console.WriteLine(Language.GetTextValue("CLI.ClientWasBooted", Netplay.Clients[num].Socket.GetRemoteAddress().ToString(), text));
+						Logging.ServerConsoleLine(Language.GetTextValue("CLI.ClientWasBooted", Netplay.Clients[num].Socket.GetRemoteAddress().ToString(), text));
 					break;
 				case 3:
 					writer.Write((byte)remoteClient);
@@ -115,7 +_,15 @@
 					writer.Write((byte)player4.skinVariant);
 					writer.Write((byte)player4.hair);
 					writer.Write(player4.name);
+
+					if (ModNet.AllowVanillaClients) {
-					writer.Write(player4.hairDye);
+						writer.Write7BitEncodedInt(player4.hairDye);
+						goto SkipVanillaWrite;
+					}
+
+					writer.Write((byte)player4.hairDye);
+					SkipVanillaWrite:
+
 					BitsByte bitsByte16 = (byte)0;
 					for (int num11 = 0; num11 < 8; num11++) {
 						bitsByte16[num11] = player4.hideVisibleAccessory[num11];
@@ -177,12 +_,19 @@
 
 					num13 = item6.stack;
 					num14 = item6.netID;
+					// Extra patch context.
 					if (num13 < 0)
 						num13 = 0;
 
+					if (!ModNet.AllowVanillaClients) {
+						ItemIO.Send(item6, writer, writeStack: true);
+						goto SkipVanillaWrite;
+					}
+
 					writer.Write((short)num13);
 					writer.Write((byte)number3);
 					writer.Write((short)num14);
+					SkipVanillaWrite:
 					break;
 				}
 				case 7: {
@@ -350,8 +_,13 @@
 						writer.Write(SocialAPI.Network.GetLobbyId());
 					else
 						writer.Write(0uL);
+					// Extra patch context.
 
 					writer.Write(Sandstorm.IntendedSeverity);
+
+					if (!ModNet.AllowVanillaClients)
+						WorldIO.SendModData(writer);
+
 					break;
 				}
 				case 8:
@@ -560,8 +_,17 @@
 					writer.Write((short)number);
 					writer.WriteVector2(item3.position);
 					writer.WriteVector2(item3.velocity);
+
+					if (!ModNet.AllowVanillaClients) {
+						writer.Write7BitEncodedInt(item3.stack);
+						writer.Write7BitEncodedInt(item3.prefix);
+						goto SkipVanillaWrite;
+					}
+
 					writer.Write((short)item3.stack);
-					writer.Write(item3.prefix);
+					writer.Write((byte)item3.prefix);
+					SkipVanillaWrite:
+
 					writer.Write((byte)number2);
 					short value2 = 0;
 					if (item3.active && item3.stack > 0)
@@ -576,6 +_,7 @@
 					if (msgType == 148)
 						writer.Write((byte)MathHelper.Clamp(item3.timeLeftInWhichTheItemCannotBeTakenByEnemies, 0f, 255f));
 
+					ItemIO.SendModData(item3, writer);
 					break;
 				}
 				case 22:
@@ -645,9 +_,12 @@
 						}
 					}
 
-					if (nPC2.type >= 0 && nPC2.type < 688 && Main.npcCatchable[nPC2.type])
+					if (nPC2.type >= 0 && Main.npcCatchable[nPC2.type])
 						writer.Write((byte)nPC2.releaseOwner);
 
+					if (!ModNet.AllowVanillaClients)
+						NPCLoader.SendExtraAI(writer, NPCLoader.WriteExtraAI(nPC2));
+
 					break;
 				}
 				case 24:
@@ -682,12 +_,17 @@
 					if (projectile.knockBack != 0f)
 						bitsByte24[5] = true;
 
-					if (projectile.type > 0 && projectile.type < 1022 && ProjectileID.Sets.NeedsUUID[projectile.type])
+					if (projectile.type > 0 && ProjectileID.Sets.NeedsUUID[projectile.type])
 						bitsByte24[7] = true;
 
 					if (projectile.originalDamage != 0)
 						bitsByte24[6] = true;
 
+					byte[] extraAI = !ModNet.AllowVanillaClients ? ProjectileLoader.WriteExtraAI(projectile) : null;
+					bool hasExtraAI = extraAI?.Length > 0;
+
+					bitsByte24[2] = hasExtraAI; // This bit is unused by vanilla.
+
 					if ((byte)bitsByte25 != 0)
 						bitsByte24[2] = true;
 
@@ -719,11 +_,20 @@
 					if (bitsByte25[0])
 						writer.Write(projectile.ai[2]);
 
+					if (hasExtraAI) {
+						ProjectileLoader.SendExtraAI(writer, extraAI);
+					}
+
 					break;
 				}
 				case 28:
 					writer.Write((short)number);
+
+					if (ModNet.AllowVanillaClients)
-					writer.Write((short)number2);
+						writer.Write((short)number2);
+					else
+						writer.Write((int)number2);
+
 					writer.Write(number3);
 					writer.Write((byte)(number4 + 1f));
 					writer.Write((byte)number5);
@@ -744,13 +_,21 @@
 					Item item7 = Main.chest[number].item[(byte)number2];
 					writer.Write((short)number);
 					writer.Write((byte)number2);
+
+					if (!ModNet.AllowVanillaClients) {
+						ItemIO.Send(item7, writer, writeStack: true);
+						goto SkipVanillaWrite;
+					}
+
 					short value4 = (short)item7.netID;
 					if (item7.Name == null)
 						value4 = 0;
 
+					// Extra patch context
 					writer.Write((short)item7.stack);
-					writer.Write(item7.prefix);
+					writer.Write((byte)item7.prefix);
 					writer.Write(value4);
+					SkipVanillaWrite:
 					break;
 				}
 				case 33: {
@@ -794,6 +_,11 @@
 					else {
 						writer.Write((short)0);
 					}
+
+					// Write extra modded chest id, see calls to SendData(34, 
+					if (number >= 100)
+						writer.Write((ushort)number6);
+
 					break;
 				case 35:
 					writer.Write((byte)number);
@@ -807,6 +_,10 @@
 					writer.Write(player3.zone3);
 					writer.Write(player3.zone4);
 					writer.Write(player3.zone5);
+
+					if (!ModNet.AllowVanillaClients)
+						BiomeLoader.SendCustomBiomes(player3, writer);
+
 					break;
 				}
 				case 38:
@@ -859,7 +_,7 @@
 				}
 				case 50: {
 					writer.Write((byte)number);
-					for (int l = 0; l < 44; l++) {
+					for (int l = 0; l < Player.MaxBuffs; l++) {
 						writer.Write((ushort)Main.player[number].buffType[l]);
 					}
 
@@ -1067,7 +_,7 @@
 					bool flag3 = TileEntity.ByID.ContainsKey(number);
 					writer.Write(flag3);
 					if (flag3)
-						TileEntity.Write(writer, TileEntity.ByID[number], networkSend: true);
+						TileEntity.Write(writer, TileEntity.ByID[number], networkSend: true, lightSend: true); //TML: Made lightSend true.
 
 					break;
 				}
@@ -1130,14 +_,27 @@
 					writer.Write((short)number);
 					writer.Write((short)number2);
 					Item item4 = Main.player[(int)number4].inventory[(int)number3];
+
+					if (!ModNet.AllowVanillaClients) {
+						ItemIO.Send(item4, writer);
+						writer.Write7BitEncodedInt(number5);
+						goto SkipVanillaWrite;
+					}
+
 					writer.Write((short)item4.netID);
-					writer.Write(item4.prefix);
+					writer.Write((byte)item4.prefix);
 					writer.Write((short)number5);
+					SkipVanillaWrite:
 					break;
 				}
 				case 91:
 					writer.Write(number);
 					writer.Write((byte)number2);
+
+					// Send byte for owner if type corresponds to projectile (magic number 2) #WorldUIAnchorProjectileSyncFix
+					if (!ModNet.AllowVanillaClients && (byte)number2 == 2)
+						writer.Write((byte)((int)number2 >> 8));
+
 					if (number2 != 255f) {
 						writer.Write((ushort)number3);
 						writer.Write((ushort)number4);
@@ -1300,9 +_,16 @@
 					writer.Write((short)number);
 					writer.Write((short)number2);
 					Item item2 = Main.player[(int)number4].inventory[(int)number3];
+
+					if (!ModNet.AllowVanillaClients) {
+						ItemIO.Send(item2, writer, writeStack: true);
+						goto SkipVanillaWrite;
+					}
+
 					writer.Write((short)item2.netID);
-					writer.Write(item2.prefix);
+					writer.Write((byte)item2.prefix);
 					writer.Write((short)number5);
+					SkipVanillaWrite:
 					break;
 				}
 				case 124: {
@@ -1365,9 +_,17 @@
 					writer.Write((short)number);
 					writer.Write((short)number2);
 					Item item = Main.player[(int)number4].inventory[(int)number3];
+
+
+					if (!ModNet.AllowVanillaClients) {
+						ItemIO.Send(item, writer, writeStack: true);
+						goto SkipVanillaWrite;
+					}
+
 					writer.Write((short)item.netID);
-					writer.Write(item.prefix);
+					writer.Write((byte)item.prefix);
 					writer.Write((short)number5);
+					SkipVanillaWrite:
 					break;
 				}
 				case 134: {
@@ -1448,6 +_,16 @@
 				throw new Exception("Maximum packet length exceeded. id: " + msgType + " length: " + num23);
 
 			writer.BaseStream.Position = position;
+
+			// TODO: Make this int or some other solution. This used to be cast to short. NetMessage.CheckBytes reads ushort though, so changing this is fine. We want to allow for more data primarily because writing tile
+			// chunks can go more than 32767 (and even 65535) bytes. This is because ModTileEntities can have large amounts of data especially when they sync Items and instanced GlobalItem classes are in play.
+			// Complications include AllowVanillaClients, message length byte length negotiation, and MessageBuffer.readBuffer having a fixed size.
+			if (num23 > ushort.MaxValue) // An exception is better than silent packet drops.
+				throw new IndexOutOfRangeException($"Maximum packet length exceeded {num23} > {ushort.MaxValue}");
+
+			if (ModNet.DetailedLogging)
+				ModNet.LogSend(remoteClient, ignoreClient, $"SendData {MessageID.GetName(msgType)}({msgType})", num23);
+
 			writer.Write((ushort)num23);
 			writer.BaseStream.Position = num23;
 			if (Main.netMode == 1) {
@@ -1660,7 +_,7 @@
 
 			buffer[num].writeLocked = false;
 			if (msgType == 2 && Main.netMode == 2) {
-				Netplay.Clients[num].PendingTermination = true;
+				Netplay.Clients[num].SetPendingTermination("Kicked");
 				Netplay.Clients[num].PendingTerminationApproved = true;
 			}
 		}
@@ -1687,11 +_,11 @@
 		int num6 = 0;
 		byte b = 0;
 		byte[] array = new byte[16];
-		Tile tile = null;
+		Tile? tile = null;
 		for (int i = yStart; i < yStart + height; i++) {
 			for (int j = xStart; j < xStart + width; j++) {
 				Tile tile2 = Main.tile[j, i];
-				if (tile2.isTheSameAs(tile) && TileID.Sets.AllowsSaveCompressionBatching[tile2.type]) {
+				if (tile.HasValue && tile2.isTheSameAs(tile.Value) && TileID.Sets.AllowsSaveCompressionBatching[tile2.type]) {
 					num4 = (short)(num4 + 1);
 					continue;
 				}
@@ -1738,7 +_,7 @@
 						}
 					}
 
-					if (tile2.type == 88 && tile2.frameX % 54 == 0 && tile2.frameY % 36 == 0) {
+					if (TileID.Sets.BasicDresser[tile2.type] && tile2.frameX % 54 == 0 && tile2.frameY % 36 == 0) {
 						short num8 = (short)Chest.FindChest(j, i);
 						if (num8 != -1) {
 							_compressChestList[num] = num8;
@@ -1758,7 +_,7 @@
 							_compressSignList[num2++] = num10;
 					}
 
-					if (tile2.type == 425 && tile2.frameX % 36 == 0 && tile2.frameY % 36 == 0) {
+					if ((tile2.type == 425 || tile2.type >= TileID.Count && Main.tileSign[tile2.type]) && tile2.frameX % 36 == 0 && tile2.frameY % 36 == 0) {
 						short num11 = (short)Sign.ReadSign(j, i);
 						if (num11 != -1)
 							_compressSignList[num2++] = num11;
@@ -1948,9 +_,18 @@
 			writer.Write(sign.text);
 		}
 
+		// Add all modded tile entities within the range to the send list
+		foreach (var item in TileEntity.ByPosition) {
+			Point16 pos = item.Key;
+			if (pos.X >= xStart && pos.X < xStart + width && pos.Y >= yStart && pos.Y < yStart + height) {
+				if (item.Value.type >= TileEntitiesManager.VanillaTypeCount)
+					_compressEntities[num3++] = (short)item.Value.ID;
+			}
+		}
+
 		writer.Write(num3);
 		for (int m = 0; m < num3; m++) {
-			TileEntity.Write(writer, TileEntity.ByID[_compressEntities[m]]);
+			TileEntity.Write(writer, TileEntity.ByID[_compressEntities[m]], networkSend: true); //TML: Made networkSend true, but lightSend should be false.
 		}
 	}
 
@@ -1963,16 +_,20 @@
 
 	public static void DecompressTileBlock_Inner(BinaryReader reader, int xStart, int yStart, int width, int height)
 	{
-		Tile tile = null;
+		Tile tile = default;
 		int num = 0;
 		for (int i = yStart; i < yStart + height; i++) {
 			for (int j = xStart; j < xStart + width; j++) {
 				if (num != 0) {
 					num--;
+					/*
 					if (Main.tile[j, i] == null)
 						Main.tile[j, i] = new Tile(tile);
 					else
 						Main.tile[j, i].CopyFrom(tile);
+					*/
+
+					Main.tile[j, i].CopyFrom(tile);
 
 					continue;
 				}
@@ -2151,7 +_,7 @@
 
 		num3 = reader.ReadInt16();
 		for (int m = 0; m < num3; m++) {
-			TileEntity tileEntity = TileEntity.Read(reader);
+			TileEntity tileEntity = TileEntity.Read(reader, networkSend: true); //TML: Made networkSend true, but lightSend should be false.
 			TileEntity.ByID[tileEntity.ID] = tileEntity;
 			TileEntity.ByPosition[tileEntity.Position] = tileEntity;
 		}
@@ -2161,20 +_,45 @@
 
 	public static void ReceiveBytes(byte[] bytes, int streamLength, int i = 256)
 	{
+		if (ModNet.DetailedLogging)
+			ModNet.Debug(i, $"recv {streamLength}");
+
+		var lockStart = DateTime.Now;
 		lock (buffer[i]) {
+			// Actually do some flow-control to handle the case where we get more than 128kb between main thread CheckBytes calls (once per frame).
+			// Without this, BlockCopy gets an out of bounds exception and the connection terminates with a read buffer overflow error.
+			bool firstWait = true;
+			while (buffer[i].totalData + streamLength > buffer[i].readBuffer.Length) {
+				if (firstWait) {
+					if (ModNet.DetailedLogging)
+						ModNet.Debug(i, $"waiting for space in readBuffer");
+
+					firstWait = false;
+				}
+
+				Monitor.Exit(buffer[i]);
+				Thread.Yield();
+				Monitor.Enter(buffer[i]);
+			}
+
+			var timeToAcquireLock = (DateTime.Now - lockStart).TotalMilliseconds;
+			if (timeToAcquireLock > 1 && ModNet.DetailedLogging)
+				ModNet.Debug(i, $"buffer lock contended for {timeToAcquireLock:0.0}ms");
+
 			try {
 				Buffer.BlockCopy(bytes, 0, buffer[i].readBuffer, buffer[i].totalData, streamLength);
 				buffer[i].totalData += streamLength;
 				buffer[i].checkBytes = true;
 			}
-			catch {
+			catch (Exception e) {
 				if (Main.netMode == 1) {
 					Main.menuMode = 15;
 					Main.statusText = Language.GetTextValue("Error.BadHeaderBufferOverflow");
+					ModNet.Error($"BlockCopy bounds error: srclen={bytes.Length}, dstlen={buffer[i].readBuffer.Length}, dstoffset={buffer[i].totalData}, num={streamLength}", e);
 					Netplay.Disconnect = true;
 				}
 				else {
-					Netplay.Clients[i].PendingTermination = true;
+					Netplay.Clients[i].SetPendingTermination($"Exception in ReceiveBytes {e.Message}");
 				}
 			}
 		}
@@ -2191,12 +_,16 @@
 
 			int num = 0;
 			int num2 = buffer[bufferIndex].totalData;
+			int msgId = -1;
 			try {
+				if (num2 > 0 && ModNet.DetailedLogging)
+					ModNet.Debug(bufferIndex, $"check {num2}");
+
 				while (num2 >= 2) {
 					int num3 = BitConverter.ToUInt16(buffer[bufferIndex].readBuffer, num);
 					if (num2 >= num3) {
 						long position = buffer[bufferIndex].reader.BaseStream.Position;
-						buffer[bufferIndex].GetData(num + 2, num3 - 2, out var _);
+						buffer[bufferIndex].GetData(num + 2, num3 - 2, out msgId);
 						if (Main.dedServ && Netplay.Clients[bufferIndex].PendingTermination) {
 							Netplay.Clients[bufferIndex].PendingTerminationApproved = true;
 							buffer[bufferIndex].checkBytes = false;
@@ -2212,9 +_,12 @@
 					break;
 				}
 			}
-			catch (Exception) {
+			catch (Exception e) {
+				/*
 				if (Main.dedServ && num < buffer.Length - 100)
 					Console.WriteLine(Language.GetTextValue("Error.NetMessageError", buffer[num + 2]));
+				*/
+				ModNet.Error(bufferIndex, $"{MessageID.GetName(msgId)}({msgId})", e);
 
 				num2 = 0;
 				num = 0;
@@ -2226,6 +_,9 @@
 				}
 
 				buffer[bufferIndex].totalData = num2;
+
+				if (num2 > 0 && ModNet.DetailedLogging)
+					ModNet.Debug(bufferIndex, $"partial {num2}");
 			}
 
 			buffer[bufferIndex].checkBytes = false;
@@ -2452,7 +_,7 @@
 		}
 
 		if (!flag) {
-			Console.WriteLine(Language.GetTextValue("Net.ServerAutoShutdown"));
+			Logging.ServerConsoleLine(Language.GetTextValue("Net.ServerAutoShutdown"));
 			Netplay.Disconnect = true;
 		}
 	}
@@ -2506,11 +_,14 @@
 			SyncOnePlayer_ItemArray(plr, toWho, fromWho, Main.player[plr].Loadouts[1].Dye, PlayerItemSlotID.Loadout2_Dye_0);
 			SyncOnePlayer_ItemArray(plr, toWho, fromWho, Main.player[plr].Loadouts[2].Armor, PlayerItemSlotID.Loadout3_Armor_0);
 			SyncOnePlayer_ItemArray(plr, toWho, fromWho, Main.player[plr].Loadouts[2].Dye, PlayerItemSlotID.Loadout3_Dye_0);
+
+			PlayerLoader.SyncPlayer(Main.player[plr], toWho, fromWho, false);
+
 			if (!Netplay.Clients[plr].IsAnnouncementCompleted) {
 				Netplay.Clients[plr].IsAnnouncementCompleted = true;
 				ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.mp[19].Key, Main.player[plr].name), new Color(255, 240, 20), plr);
 				if (Main.dedServ)
-					Console.WriteLine(Lang.mp[19].Format(Main.player[plr].name));
+					Logging.ServerConsoleLine(Lang.mp[19].Format(Main.player[plr].name));
 			}
 
 			return;
@@ -2522,7 +_,7 @@
 			Netplay.Clients[plr].IsAnnouncementCompleted = false;
 			ChatHelper.BroadcastChatMessage(NetworkText.FromKey(Lang.mp[20].Key, Netplay.Clients[plr].Name), new Color(255, 240, 20), plr);
 			if (Main.dedServ)
-				Console.WriteLine(Lang.mp[20].Format(Netplay.Clients[plr].Name));
+				Logging.ServerConsoleLine(Lang.mp[20].Format(Netplay.Clients[plr].Name));
 
 			Netplay.Clients[plr].Name = "Anonymous";
 		}
