--- src/TerrariaNetCore/Terraria/Gore.cs
+++ src/tModLoader/Terraria/Gore.cs
@@ -7,10 +_,11 @@
 using Terraria.Graphics.Effects;
 using Terraria.ID;
 using Terraria.Utilities;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
-	public class Gore
+	public partial class Gore
 	{
 		public static int goreTime = 600;
 		public Vector2 position;
@@ -239,6 +_,10 @@
 			if (Main.netMode == 2 || !active)
 				return;
 
+			if (ModGore != null && !ModGore.Update(this))
+				return;
+
+			GoreLoader.SetupUpdateType(this);
 			switch (GoreID.Sets.SpecialAI[type]) {
 				case 4:
 					UpdateAmbientFloorCloud();
@@ -830,6 +_,7 @@
 				else
 					Lighting.AddLight((int)((position.X + 32f * scale / 2f) / 16f), (int)((position.Y + 32f * scale / 2f) / 16f), num37, num38, num39);
 			}
+			GoreLoader.TakeDownUpdateType(this);
 		}
 
 		private void Gore_UpdateLeaf() {
@@ -989,16 +_,28 @@
 				alpha++;
 		}
 
+		// Source-less overloads for vanilla
+		internal static Gore NewGorePerfect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+			=> NewGorePerfect(IEntitySource.GetFallback(), Position, Velocity, Type, Scale);
+
+		internal static Gore NewGoreDirect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+			=> NewGoreDirect(IEntitySource.GetFallback(), Position, Velocity, Type, Scale);
+
+		internal static int NewGore(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+			=> NewGore(IEntitySource.GetFallback(), Position, Velocity, Type, Scale);
+
+		// Actual API methods
-		public static Gore NewGorePerfect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f) {
+		public static Gore NewGorePerfect(IEntitySource source, Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f) {
-			Gore gore = NewGoreDirect(Position, Velocity, Type, Scale);
+			Gore gore = NewGoreDirect(source, Position, Velocity, Type, Scale);
 			gore.position = Position;
 			gore.velocity = Velocity;
 			return gore;
 		}
 
-		public static Gore NewGoreDirect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f) => Main.gore[NewGore(Position, Velocity, Type, Scale)];
+		public static Gore NewGoreDirect(IEntitySource source, Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+			=> Main.gore[NewGore(source, Position, Velocity, Type, Scale)];
 
-		public static int NewGore(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f) {
+		public static int NewGore(IEntitySource source, Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f) {
 			if (Main.netMode == 2)
 				return 600;
 
@@ -1035,6 +_,13 @@
 			Main.gore[num].alpha = 0;
 			Main.gore[num].rotation = 0f;
 			Main.gore[num].scale = Scale;
+
+			var gore = Main.gore[num];
+			gore.ResetNewFields();
+
+			gore.ModGore = GoreLoader.GetModGore(gore.type);
+			gore.ModGore?.OnSpawn(gore, source);
+
 			if (!ChildSafety.Disabled && ChildSafety.DangerousGore(Type)) {
 				Main.gore[num].type = Main.rand.Next(11, 14);
 				Main.gore[num].scale = Main.rand.NextFloat() * 0.5f + 0.5f;
@@ -1149,6 +_,12 @@
 		}
 
 		public Color GetAlpha(Color newColor) {
+			if (ModGore != null) {
+				Color? modColor = ModGore.GetAlpha(this, newColor);
+				if (modColor.HasValue)
+					return modColor.Value;
+			}
+
 			float num = (float)(255 - alpha) / 255f;
 			int r;
 			int g;
