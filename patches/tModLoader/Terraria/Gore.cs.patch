--- src/TerrariaNetCore/Terraria/Gore.cs
+++ src/tModLoader/Terraria/Gore.cs
@@ -6,11 +_,12 @@
 using Terraria.GameContent.Shaders;
 using Terraria.Graphics.Effects;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.Utilities;
 
 namespace Terraria;
 
-public class Gore
+public partial class Gore
 {
 	public static int goreTime = 600;
 	public Vector2 position;
@@ -262,6 +_,11 @@
 		if (Main.netMode == 2 || !active)
 			return;
 
+		if (ModGore != null && !ModGore.Update(this))
+			return;
+
+		GoreLoader.SetupUpdateType(this);
+
 		if (sticky) {
 			if (DeactivateIfOutsideOfWorld())
 				return;
@@ -857,11 +_,14 @@
 				num38 *= 0.3f;
 			}
 
+			// Extra patch context.
 			if (TextureAssets.Gore[type].IsLoaded)
 				Lighting.AddLight((int)((position.X + (float)TextureAssets.Gore[type].Width() * scale / 2f) / 16f), (int)((position.Y + (float)TextureAssets.Gore[type].Height() * scale / 2f) / 16f), num38, num39, num40);
 			else
 				Lighting.AddLight((int)((position.X + 32f * scale / 2f) / 16f), (int)((position.Y + 32f * scale / 2f) / 16f), num38, num39, num40);
 		}
+
+		GoreLoader.TakeDownUpdateType(this);
 	}
 
 	private void Gore_UpdateLeaf()
@@ -1023,17 +_,60 @@
 			alpha++;
 	}
 
+	// TML introduces 'IEntitySource' parameters to gore creation.
+
+	// Source-less overloads for vanilla
+
-	public static Gore NewGorePerfect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+	internal static Gore NewGorePerfect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+		=> NewGorePerfect(IEntitySource.GetGoreFallback(), Position, Velocity, Type, Scale);
+
+	internal static Gore NewGoreDirect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+		=> NewGoreDirect(IEntitySource.GetGoreFallback(), Position, Velocity, Type, Scale);
+
+	internal static int NewGore(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+		=> NewGore(IEntitySource.GetGoreFallback(), Position, Velocity, Type, Scale);
+
+	// Actual API methods
+
+	/// <summary>
+	/// Spawns a gore with an exact position and velocity, no randomization
+	/// </summary>
+	/// <param name="source">Recommend using <see cref="Entity.GetSource_Death"/> or <see cref="Entity.GetSource_FromThis"/>" as the spawn source</param>
+	/// <param name="Position"></param>
+	/// <param name="Velocity"></param>
+	/// <param name="Type"></param>
+	/// <param name="Scale"></param>
+	/// <returns></returns>
+	public static Gore NewGorePerfect(IEntitySource source, Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
 	{
-		Gore gore = NewGoreDirect(Position, Velocity, Type, Scale);
+		Gore gore = NewGoreDirect(source, Position, Velocity, Type, Scale);
 		gore.position = Position;
 		gore.velocity = Velocity;
 		return gore;
 	}
 
-	public static Gore NewGoreDirect(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f) => Main.gore[NewGore(Position, Velocity, Type, Scale)];
+	/// <summary>
+	/// Spawns a gore with given properties
+	/// </summary>
+	/// <param name="source">Recommend using <see cref="Entity.GetSource_Death"/> or <see cref="Entity.GetSource_FromThis"/>" as the spawn source</param>
+	/// <param name="Position"></param>
+	/// <param name="Velocity"></param>
+	/// <param name="Type"></param>
+	/// <param name="Scale"></param>
+	/// <returns>A reference to the gore</returns>
+	public static Gore NewGoreDirect(IEntitySource source, Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+		=> Main.gore[NewGore(source, Position, Velocity, Type, Scale)];
 
+	/// <summary>
+	/// Spawns a gore with given properties
+	/// </summary>
+	/// <param name="source">Recommend using <see cref="Entity.GetSource_Death"/> or <see cref="Entity.GetSource_FromThis"/>" as the spawn source</param>
+	/// <param name="Position"></param>
+	/// <param name="Velocity"></param>
+	/// <param name="Type"></param>
+	/// <param name="Scale"></param>
+	/// <returns>The index of the gore in the <see cref="Main.gore"/> array</returns>
-	public static int NewGore(Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
+	public static int NewGore(IEntitySource source, Vector2 Position, Vector2 Velocity, int Type, float Scale = 1f)
 	{
 		if (Main.netMode == 2)
 			return 600;
@@ -1047,7 +_,8 @@
 		if (Main.rand == null)
 			Main.rand = new UnifiedRandom();
 
-		if (Type == -1)
+		// Changed from '== -1'.
+		if (Type <= 0)
 			return 600;
 
 		int num = 600;
@@ -1074,6 +_,7 @@
 		Main.gore[num].alpha = 0;
 		Main.gore[num].rotation = 0f;
 		Main.gore[num].scale = Scale;
+
 		if (!ChildSafety.Disabled && ChildSafety.DangerousGore(Type)) {
 			Main.gore[num].type = Main.rand.Next(11, 14);
 			Main.gore[num].scale = Main.rand.NextFloat() * 0.5f + 0.5f;
@@ -1126,7 +_,8 @@
 		int num2 = GoreID.Sets.SpecialAI[Type];
 		if (num2 == 3) {
 			Main.gore[num].velocity = new Vector2((Main.rand.NextFloat() - 0.5f) * 1f, Main.rand.NextFloat() * ((float)Math.PI * 2f));
-			bool flag = (Type >= 910 && Type <= 925) || (Type >= 1113 && Type <= 1121) || (Type >= 1248 && Type <= 1255) || Type == 1257 || Type == 1278;
+			//bool flag = (Type >= 910 && Type <= 925) || (Type >= 1113 && Type <= 1121) || (Type >= 1248 && Type <= 1255) || Type == 1257 || Type == 1278;
+			bool flag = GoreID.Sets.PaintedFallingLeaf[Type];
 			Gore obj = Main.gore[num];
 			SpriteFrame spriteFrame = new SpriteFrame((byte)((!flag) ? 1u : 32u), 8) {
 				CurrentRow = (byte)Main.rand.Next(8)
@@ -1186,6 +_,15 @@
 			Main.gore[num].timeLeft = 480;
 		}
 
+		var gore = Main.gore[num];
+
+		// Reset TML's added fields to reuse the gore instance.
+		gore.ResetNewFields();
+
+		// Initialize ModGore objects.
+		gore.ModGore = GoreLoader.GetModGore(gore.type);
+		gore.ModGore?.OnSpawn(gore, source ?? IEntitySource.GetGoreFallback());
+
 		if (Main.gore[num].DeactivateIfOutsideOfWorld())
 			return 600;
 
@@ -1194,6 +_,9 @@
 
 	public Color GetAlpha(Color newColor)
 	{
+		if (ModGore?.GetAlpha(this, newColor) is Color modColor)
+			return modColor;
+
 		float num = (float)(255 - alpha) / 255f;
 		int r;
 		int g;
