--- src/Terraria/Terraria/Chest.cs
+++ src/tModLoader/Terraria/Chest.cs
@@ -7,6 +_,7 @@
 using Terraria.GameContent.Events;
 using Terraria.ID;
 using Terraria.ObjectData;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -192,11 +_,14 @@
 			return list;
 		}
 
-		public static bool IsLocked(int x, int y) => IsLocked(Main.tile[x, y]);
+		public static bool IsLocked(int x, int y) => IsLocked(x, y, Main.tile[x, y]);
 
-		public static bool IsLocked(Tile t) {
+		public static bool IsLocked(int x, int y, Tile t) {
 			if (t == null)
 				return true;
+				
+			if (t.type >= TileID.Count)
+				return TileLoader.IsLockedChest(x, y, t.type);
 
 			if (t.type == 21 && ((t.frameX >= 72 && t.frameX <= 106) || (t.frameX >= 144 && t.frameX <= 178) || (t.frameX >= 828 && t.frameX <= 1006) || (t.frameX >= 1296 && t.frameX <= 1330) || (t.frameX >= 1368 && t.frameX <= 1402) || (t.frameX >= 1440 && t.frameX <= 1474)))
 				return true;
@@ -272,6 +_,17 @@
 			Tile tileSafely = Framing.GetTileSafely(X, Y);
 			int type2 = tileSafely.type;
 			int num2 = tileSafely.frameX / 36;
+			if (Main.tile[X, Y].type >= TileID.Count) {
+				num = -36;
+				type = 11;
+				bool manual = false;
+				if(!TileLoader.UnlockChest(X, Y, Main.tile[X, Y].type, ref num, ref type, ref manual))
+					return false;
+				if (manual)
+					return true;
+				num *= -1;
+				goto PostVanillaChests;
+			}
 			switch (type2) {
 				case 21:
 					switch (num2) {
@@ -317,6 +_,7 @@
 					}
 					return false;
 			}
+			PostVanillaChests:
 
 			SoundEngine.PlaySound(22, X * 16, Y * 16);
 			for (int i = X; i <= X + 1; i++) {
@@ -411,15 +_,21 @@
 			}
 			else {
 				switch (type) {
-					case 21:
+					case TileID.Containers:
 						NetMessage.SendData(34, -1, -1, null, 0, x, y, style);
 						break;
-					case 467:
+					case TileID.Containers2:
 						NetMessage.SendData(34, -1, -1, null, 4, x, y, style);
 						break;
-					default:
+					case TileID.Dressers:
 						NetMessage.SendData(34, -1, -1, null, 2, x, y, style);
 						break;
+					case int _ when TileID.Sets.BasicChest[type]:
+						NetMessage.SendData(34, -1, -1, null, 100, x, y, style, 0, type, 0);
+						break;
+					case int _ when TileID.Sets.BasicDresser[type]:
+						NetMessage.SendData(34, -1, -1, null, 102, x, y, style, 0, type, 0);
+						break;
 				}
 			}
 
@@ -504,14 +_,15 @@
 			}
 		}
 
-		public void AddItemToShop(Item newItem) {
+		public int AddItemToShop(Item newItem) { //tML: Now returns the item's index.
 			int num = Main.shopSellbackHelper.Remove(newItem);
+			
 			if (num >= newItem.stack)
-				return;
+				return 0;
 
 			int num2 = 0;
 			while (true) {
-				if (num2 < 39) {
+				if (num2 < 38) { // tModLoader change: When selling to vendor with full inventory, replace 2nd to last item rather than have the item disappear to facilitate PostSellItem Item reference.
 					if (item[num2] == null || item[num2].type == 0)
 						break;
 
@@ -519,7 +_,7 @@
 					continue;
 				}
 
-				return;
+				break;
 			}
 
 			item[num2] = newItem.Clone();
@@ -528,6 +_,7 @@
 			item[num2].stack -= num;
 			_ = item[num2].value;
 			_ = 0;
+			return num2;
 		}
 
 		public static void SetupTravelShop() {
@@ -877,9 +_,12 @@
 							Main.travelShop[num2++] = 3636;
 							Main.travelShop[num2++] = 3641;
 							break;
+						//patch file: num2
 					}
 				}
 			}
+
+			NPCLoader.SetupTravelShop(Main.travelShop, ref num2);
 		}
 
 		public void SetupShop(int type) {
@@ -2578,6 +_,7 @@
 					array[num++].SetDefaults(4921);
 			}
 
+			NPCLoader.SetupShop(type, this, ref num);
 			for (int num12 = 0; num12 < num; num12++) {
 				array[num12].isAShopItem = true;
 			}
