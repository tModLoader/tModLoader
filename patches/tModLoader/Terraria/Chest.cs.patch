--- src/TerrariaNetCore/Terraria/Chest.cs
+++ src/tModLoader/Terraria/Chest.cs
@@ -8,6 +_,7 @@
 using Terraria.GameContent.Events;
 using Terraria.ID;
 using Terraria.ObjectData;
+using Terraria.ModLoader;
 
 namespace Terraria
 {
@@ -193,12 +_,15 @@
 			return list;
 		}
 
-		public static bool IsLocked(int x, int y) => IsLocked(Main.tile[x, y]);
+		public static bool IsLocked(int x, int y) => IsLocked(x, y, Main.tile[x, y]);
 
-		public static bool IsLocked(Tile t) {
+		public static bool IsLocked(int x, int y, Tile t) {
 			if (t == null)
 				return true;
 
+			if (t.type >= TileID.Count)
+				return TileLoader.IsLockedChest(x, y, t.type);
+
 			if (t.type == 21 && ((t.frameX >= 72 && t.frameX <= 106) || (t.frameX >= 144 && t.frameX <= 178) || (t.frameX >= 828 && t.frameX <= 1006) || (t.frameX >= 1296 && t.frameX <= 1330) || (t.frameX >= 1368 && t.frameX <= 1402) || (t.frameX >= 1440 && t.frameX <= 1474)))
 				return true;
 
@@ -229,6 +_,16 @@
 							continue;
 
 						flag = true;
+						// flag set above means "item of same type found in chest, able to be put into an empty slot later", which means we have to respect it before TryStackItems
+						if (!ItemLoader.TryStackItems(Main.chest[i].item[j], item, out _))
+							continue;
+
+						if (item.stack <= 0) {
+							item.SetDefaults();
+							return item;
+						}
+
+						/* TML: #OnStackHook
 						int num = Main.chest[i].item[j].maxStack - Main.chest[i].item[j].stack;
 						if (num > 0) {
 							if (num > item.stack)
@@ -241,6 +_,7 @@
 								return item;
 							}
 						}
+						*/
 					}
 					else {
 						flag2 = true;
@@ -273,6 +_,17 @@
 			Tile tileSafely = Framing.GetTileSafely(X, Y);
 			int type2 = tileSafely.type;
 			int num2 = tileSafely.frameX / 36;
+			if (Main.tile[X, Y].type >= TileID.Count) {
+				num = -36;
+				type = 11;
+				bool manual = false;
+				if(!TileLoader.UnlockChest(X, Y, Main.tile[X, Y].type, ref num, ref type, ref manual))
+					return false;
+				if (manual)
+					return true;
+				num *= -1;
+				goto PostVanillaChests;
+			}
 			switch (type2) {
 				case 21:
 					switch (num2) {
@@ -318,6 +_,7 @@
 					}
 					return false;
 			}
+			PostVanillaChests:
 
 			SoundEngine.PlaySound(22, X * 16, Y * 16);
 			for (int i = X; i <= X + 1; i++) {
@@ -325,7 +_,7 @@
 					Tile tileSafely2 = Framing.GetTileSafely(i, j);
 					if (tileSafely2.type == type2) {
 						tileSafely2.frameX -= num;
-						Main.tile[i, j] = tileSafely2;
+						// Main.tile[i, j] = tileSafely2;
 						for (int k = 0; k < 4; k++) {
 							Dust.NewDust(new Vector2(i * 16, j * 16), 16, 16, type);
 						}
@@ -412,15 +_,21 @@
 			}
 			else {
 				switch (type) {
-					case 21:
+					case TileID.Containers:
 						NetMessage.SendData(34, -1, -1, null, 0, x, y, style);
 						break;
-					case 467:
+					case TileID.Containers2:
 						NetMessage.SendData(34, -1, -1, null, 4, x, y, style);
 						break;
-					default:
+					case TileID.Dressers:
 						NetMessage.SendData(34, -1, -1, null, 2, x, y, style);
 						break;
+					case int _ when TileID.Sets.BasicChest[type]:
+						NetMessage.SendData(34, -1, -1, null, 100, x, y, style, 0, type, 0);
+						break;
+					case int _ when TileID.Sets.BasicDresser[type]:
+						NetMessage.SendData(34, -1, -1, null, 102, x, y, style, 0, type, 0);
+						break;
 				}
 			}
 
@@ -505,14 +_,15 @@
 			}
 		}
 
-		public void AddItemToShop(Item newItem) {
+		public int AddItemToShop(Item newItem) { //tML: Now returns the item's index.
 			int num = Main.shopSellbackHelper.Remove(newItem);
+
 			if (num >= newItem.stack)
-				return;
+				return 0;
 
 			int num2 = 0;
 			while (true) {
-				if (num2 < 39) {
+				if (num2 < 38) { // tModLoader change: When selling to vendor with full inventory, replace 2nd to last item rather than have the item disappear to facilitate PostSellItem Item reference.
 					if (item[num2] == null || item[num2].type == 0)
 						break;
 
@@ -520,7 +_,7 @@
 					continue;
 				}
 
-				return;
+				break;
 			}
 
 			item[num2] = newItem.Clone();
@@ -529,6 +_,7 @@
 			item[num2].stack -= num;
 			_ = item[num2].value;
 			_ = 0;
+			return num2;
 		}
 
 		public static void SetupTravelShop() {
@@ -902,9 +_,12 @@
 							Main.travelShop[num2++] = 3636;
 							Main.travelShop[num2++] = 3641;
 							break;
+						//patch file: num2
 					}
 				}
 			}
+
+			NPCLoader.SetupTravelShop(Main.travelShop, ref num2);
 		}
 
 		public void SetupShop(int type) {
@@ -2015,12 +_,12 @@
 						num++;
 						array[num].SetDefaults(1979);
 						num++;
-						if (Main.player[Main.myPlayer].statLifeMax >= 400) {
+						if (Main.player[Main.myPlayer].ConsumedLifeCrystals == Player.LifeCrystalMax) {
 							array[num].SetDefaults(1977);
 							num++;
 						}
 
-						if (Main.player[Main.myPlayer].statManaMax >= 200) {
+						if (Main.player[Main.myPlayer].ConsumedManaCrystals == Player.ManaCrystalMax) {
 							array[num].SetDefaults(1978);
 							num++;
 						}
@@ -2611,6 +_,7 @@
 					array[num++].SetDefaults(4921);
 			}
 
+			NPCLoader.SetupShop(type, this, ref num);
 			for (int num13 = 0; num13 < num; num13++) {
 				array[num13].isAShopItem = true;
 			}
