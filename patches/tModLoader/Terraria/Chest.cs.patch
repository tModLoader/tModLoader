--- src/TerrariaNetCore/Terraria/Chest.cs
+++ src/tModLoader/Terraria/Chest.cs
@@ -8,6 +_,7 @@
 using Terraria.GameContent.Drawing;
 using Terraria.GameContent.Events;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.ObjectData;
 
 namespace Terraria;
@@ -206,13 +_,17 @@
 		return list;
 	}
 
-	public static bool IsLocked(int x, int y) => IsLocked(Main.tile[x, y]);
+	public static bool IsLocked(int x, int y) => IsLocked(x, y, Main.tile[x, y]);
 
-	public static bool IsLocked(Tile t)
+	//TML: Added x & y parameters.
+	public static bool IsLocked(int x, int y, Tile t)
 	{
 		if (t == null)
 			return true;
 
+		if (t.type >= TileID.Count)
+			return TileLoader.IsLockedChest(x, y, t.type);
+
 		if (t.type == 21 && ((t.frameX >= 72 && t.frameX <= 106) || (t.frameX >= 144 && t.frameX <= 178) || (t.frameX >= 828 && t.frameX <= 1006) || (t.frameX >= 1296 && t.frameX <= 1330) || (t.frameX >= 1368 && t.frameX <= 1402) || (t.frameX >= 1440 && t.frameX <= 1474)))
 			return true;
 
@@ -257,6 +_,16 @@
 				}
 				else if (item.IsTheSameAs(Main.chest[i].item[j])) {
 					flag2 = true;
+					// flag set above means "item of same type found in chest, able to be put into an empty slot later", which means we have to respect it before TryStackItems
+					if (!ItemLoader.TryStackItems(Main.chest[i].item[j], item, out _))
+						continue;
+
+					if (item.stack <= 0) {
+						item.SetDefaults();
+						return item;
+					}
+
+					/* #OnStackHook
 					int num = Main.chest[i].item[j].maxStack - Main.chest[i].item[j].stack;
 					if (num > 0) {
 						if (num > item.stack)
@@ -268,11 +_,13 @@
 							Main.chest[i].item[j].stack += num;
 						}
 
+						// Extra context.
 						if (item.stack <= 0) {
 							item.SetDefaults();
 							return item;
 						}
 					}
+					*/
 				}
 				else {
 					flag3 = true;
@@ -333,6 +_,24 @@
 		Tile tileSafely = Framing.GetTileSafely(X, Y);
 		int type2 = tileSafely.type;
 		int num2 = tileSafely.frameX / 36;
+
+		// Handle mod chests
+		if (Main.tile[X, Y].type >= TileID.Count) {
+			num = -36;
+			type = 11;
+			bool manual = false;
+
+			if (!TileLoader.UnlockChest(X, Y, Main.tile[X, Y].type, ref num, ref type, ref manual))
+				return false;
+
+			if (manual)
+				return true;
+
+			num *= -1;
+
+			goto PostVanillaChests;
+		}
+
 		switch (type2) {
 			case 21:
 				switch (num2) {
@@ -379,13 +_,19 @@
 				return false;
 		}
 
+		PostVanillaChests:
+
 		SoundEngine.PlaySound(22, X * 16, Y * 16);
 		for (int i = X; i <= X + 1; i++) {
 			for (int j = Y; j <= Y + 1; j++) {
 				Tile tileSafely2 = Framing.GetTileSafely(i, j);
 				if (tileSafely2.type == type2) {
 					tileSafely2.frameX -= num;
+
+					/*
 					Main.tile[i, j] = tileSafely2;
+					*/
+
 					for (int k = 0; k < 4; k++) {
 						Dust.NewDust(new Vector2(i * 16, j * 16), 16, 16, type);
 					}
@@ -540,15 +_,28 @@
 		}
 		else {
 			switch (type) {
+				// Containers
 				case 21:
 					NetMessage.SendData(34, -1, -1, null, 0, x, y, style);
 					break;
+				// Containers2
 				case 467:
 					NetMessage.SendData(34, -1, -1, null, 4, x, y, style);
 					break;
+				/*
 				default:
+				*/
+				case TileID.Dressers:
 					NetMessage.SendData(34, -1, -1, null, 2, x, y, style);
 					break;
+				// Handle mod chests
+				case int _ when TileID.Sets.BasicChest[type]:
+					NetMessage.SendData(34, -1, -1, null, 100, x, y, style, 0, type, 0);
+					break;
+				// Handle mod dressers
+				case int _ when TileID.Sets.BasicDresser[type]:
+					NetMessage.SendData(34, -1, -1, null, 102, x, y, style, 0, type, 0);
+					break;
 			}
 		}
 
@@ -637,13 +_,22 @@
 		}
 	}
 
+	//TML: Now returns the item's index.
-	public void AddItemToShop(Item newItem)
+	public int AddItemToShop(Item newItem)
 	{
 		int num = Main.shopSellbackHelper.Remove(newItem);
+
 		if (num >= newItem.stack)
-			return;
+			return 0;
 
+		//TML:
+		// When selling to vendor with full inventory, replace 2nd to last
+		// item rather than have the item disappear to facilitate PostSellItem Item reference.
+
+		/*
 		for (int i = 0; i < 39; i++) {
+		*/
+		for (int i = 0; i < 38; i++) {
 			if (item[i] == null || item[i].type == 0) {
 				item[i] = newItem.Clone();
 				item[i].favorited = false;
@@ -651,9 +_,15 @@
 				item[i].stack -= num;
 				_ = item[i].value;
 				_ = 0;
+				
+				/*
 				break;
+				*/
+				return i;
 			}
 		}
+
+		return 0;
 	}
 
 	public static void SetupTravelShop_AddToShop(int it, ref int added, ref int count)
@@ -731,8 +_,11 @@
 					Main.travelShop[count++] = 3636;
 					Main.travelShop[count++] = 3641;
 					break;
+					// Extra patch context.
 			}
 		}
+
+		NPCLoader.SetupTravelShop(Main.travelShop, ref count);
 	}
 
 	public static bool SetupTravelShop_CanAddItemToShop(int it)
@@ -2314,12 +_,12 @@
 				num++;
 				array[num].SetDefaults(1979);
 				num++;
-				if (Main.player[Main.myPlayer].statLifeMax >= 400) {
+				if (Main.player[Main.myPlayer].ConsumedLifeCrystals == Player.LifeCrystalMax) {
 					array[num].SetDefaults(1977);
 					num++;
 				}
 
-				if (Main.player[Main.myPlayer].statManaMax >= 200) {
+				if (Main.player[Main.myPlayer].ConsumedManaCrystals == Player.ManaCrystalMax) {
 					array[num].SetDefaults(1978);
 					num++;
 				}
@@ -2981,9 +_,12 @@
 			if (Main.player[Main.myPlayer].ZoneHallow && num < 39)
 				array[num++].SetDefaults(4916);
 
+			// Extra patch context.
 			if (Main.player[Main.myPlayer].ZoneGlowshroom && (!Main.remixWorld || Main.player[Main.myPlayer].Center.Y / 16f < (float)(Main.maxTilesY - 200)) && num < 39)
 				array[num++].SetDefaults(4921);
 		}
+
+		NPCLoader.SetupShop(type, this, ref num);
 
 		for (int num13 = 0; num13 < num; num13++) {
 			array[num13].isAShopItem = true;
