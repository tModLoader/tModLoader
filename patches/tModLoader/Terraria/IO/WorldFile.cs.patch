--- src/Terraria/Terraria/IO/WorldFile.cs
+++ src/tModLoader/Terraria/IO/WorldFile.cs
@@ -14,6 +_,9 @@
 using Terraria.Social;
 using Terraria.UI;
 using Terraria.Utilities;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
+using System.Linq;
 
 namespace Terraria.IO
 {
@@ -306,6 +_,7 @@
 			Main.checkXMas();
 			Main.checkHalloween();
 			bool flag = loadFromCloud && SocialAPI.Cloud != null;
+			//patch file: flag
 			if (!FileUtilities.Exists(Main.worldPathName, flag) && Main.autoGen) {
 				if (!flag) {
 					for (int num = Main.worldPathName.Length - 1; num >= 0; num--) {
@@ -351,6 +_,8 @@
 							CheckSavedOreTiers();
 							binaryReader.Close();
 							memoryStream.Close();
+							SystemLoader.OnWorldLoad();
+							WorldIO.Load(Main.worldPathName, flag);
 							if (num3 != 0)
 								WorldGen.loadFailed = true;
 							else
@@ -509,6 +_,9 @@
 			if (Main.worldPathName == null)
 				return;
 
+			if (!BackupIO.archiveLock)
+				BackupIO.World.ArchiveWorld(Main.worldPathName, useCloudSaving);
+
 			new Stopwatch().Start();
 			int num;
 			byte[] array;
@@ -546,6 +_,7 @@
 
 			if (text != null && array2 != null)
 				FileUtilities.WriteAllBytes(text, array2, useCloudSaving);
+			WorldIO.Save(Main.worldPathName, useCloudSaving);
 		}
 
 		private static void DoRollingBackups(string backupWorldWritePath) {
@@ -717,7 +_,7 @@
 				}
 
 				if (TEWeaponsRack.Place(item2.X, item2.Y) != -1 && flag2)
-					TEWeaponsRack.TryPlacing(item2.X, item2.Y, num2, prefix, 1);
+					TEWeaponsRack.TryPlacing(item2.X, item2.Y, new Item(num2, prefix: prefix), 1);
 			}
 		}
 
@@ -884,7 +_,11 @@
 			}
 
 			writer.Write(NPC.savedAngler);
+			if (Main.anglerQuest < ItemLoader.vanillaQuestFishCount)
-			writer.Write(Main.anglerQuest);
+				writer.Write(Main.anglerQuest);
+			else
+				writer.Write(0);
+
 			writer.Write(NPC.savedStylist);
 			writer.Write(NPC.savedTaxCollector);
 			writer.Write(NPC.savedGolfer);
@@ -966,7 +_,7 @@
 					byte b2;
 					byte b3 = b2 = (b = 0);
 					bool flag = false;
-					if (tile.active())
+					if (tile.active() && tile.type < TileID.Count)
 						flag = true;
 
 					if (flag) {
@@ -980,9 +_,11 @@
 						}
 
 						if (Main.tileFrameImportant[tile.type]) {
+							short frameX = tile.frameX;
+							TileIO.VanillaSaveFrames(tile, ref frameX);
-							array[num3] = (byte)(tile.frameX & 0xFF);
+							array[num3] = (byte)(frameX & 0xFF);
 							num3++;
-							array[num3] = (byte)((tile.frameX & 0xFF00) >> 8);
+							array[num3] = (byte)((frameX & 0xFF00) >> 8);
 							num3++;
 							array[num3] = (byte)(tile.frameY & 0xFF);
 							num3++;
@@ -997,7 +_,7 @@
 						}
 					}
 
-					if (tile.wall != 0) {
+					if (tile.wall != 0 && tile.wall < WallID.Count) {
 						b3 = (byte)(b3 | 4);
 						array[num3] = (byte)tile.wall;
 						num3++;
@@ -1125,7 +_,7 @@
 				writer.Write(chest.name);
 				for (int l = 0; l < 40; l++) {
 					Item item = chest.item[l];
-					if (item == null) {
+					if (item == null || item.ModItem != null) {
 						writer.Write((short)0);
 						continue;
 					}
@@ -1139,7 +_,7 @@
 					writer.Write((short)item.stack);
 					if (item.stack > 0) {
 						writer.Write(item.netID);
-						writer.Write(item.prefix);
+						ItemIO.WriteByteVanillaPrefix(item, writer);
 					}
 				}
 			}
@@ -1171,7 +_,7 @@
 		public static int SaveNPCs(BinaryWriter writer) {
 			for (int i = 0; i < Main.npc.Length; i++) {
 				NPC nPC = Main.npc[i];
-				if (nPC.active && nPC.townNPC && nPC.type != 368) {
+				if (nPC.active && nPC.townNPC && nPC.type != 368 && !NPCLoader.IsModNPC(nPC)) {
 					writer.Write(nPC.active);
 					writer.Write(nPC.netID);
 					writer.Write(nPC.GivenName);
@@ -1191,7 +_,7 @@
 			writer.Write(value: false);
 			for (int j = 0; j < Main.npc.Length; j++) {
 				NPC nPC2 = Main.npc[j];
-				if (nPC2.active && NPCID.Sets.SavesAndLoads[nPC2.type]) {
+				if (nPC2.active && NPCID.Sets.SavesAndLoads[nPC2.type] && !NPCLoader.IsModNPC(nPC2)) {
 					writer.Write(nPC2.active);
 					writer.Write(nPC2.netID);
 					writer.WriteVector2(nPC2.position);
@@ -1877,7 +_,7 @@
 				int num3 = reader.ReadInt32();
 				Tile tile = Main.tile[num2, num3];
 				Sign sign;
-				if (tile.active() && Main.tileSign[tile.type]) {
+				if (true) {//if (tile.active() && Main.tileSign[tile.type]) {
 					sign = new Sign();
 					sign.text = text;
 					sign.x = num2;
@@ -2167,6 +_,7 @@
 				return result;
 			}
 			catch (Exception value) {
+				Logging.Terraria.Error("World Validation", value);
 				using (StreamWriter streamWriter = new StreamWriter("client-crashlog.txt", append: true)) {
 					streamWriter.WriteLine(DateTime.Now);
 					streamWriter.WriteLine(value);
@@ -2217,8 +_,8 @@
 
 		public static int SaveTileEntities(BinaryWriter writer) {
 			lock (TileEntity.EntityCreationLock) {
-				writer.Write(TileEntity.ByID.Count);
-				foreach (KeyValuePair<int, TileEntity> item in TileEntity.ByID) {
+				writer.Write(TileEntity.ByID.Count - ModTileEntity.CountInWorld());
+				foreach (KeyValuePair<int, TileEntity> item in TileEntity.ByID.Where(pair => pair.Value.type < ModTileEntity.NumVanilla)) {
 					TileEntity.Write(writer, item.Value);
 				}
 			}
