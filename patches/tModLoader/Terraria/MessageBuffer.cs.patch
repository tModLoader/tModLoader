--- src/TerrariaNetCore/Terraria/MessageBuffer.cs
+++ src/tModLoader/Terraria/MessageBuffer.cs
@@ -16,9 +_,13 @@
 using Terraria.GameContent.UI;
 using Terraria.ID;
 using Terraria.Localization;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Exceptions;
+using Terraria.ModLoader.IO;
 using Terraria.Net;
 using Terraria.Testing;
 using Terraria.UI;
+using LegacySoundStyle = Terraria.Audio.SoundStyle;
 
 namespace Terraria;
 
@@ -107,8 +_,14 @@
 		int num = 0;
 		num = start + 1;
 		b = (byte)(messageType = readBuffer[start]);
+
+		if (ModNet.DetailedLogging)
+			ModNet.Debug(whoAmI, $"GetData {MessageID.GetName(b)}({b}), {length+2}");
+
+		/*
 		if (b >= MessageID.Count)
 			return;
+		*/
 
 		Main.ActiveNetDiagnosticsUI.CountReadMessage(b, length);
 		if (Main.netMode == 1 && Netplay.Connection.StatusMax > 0)
@@ -129,7 +_,8 @@
 		}
 
 		if (Main.netMode == 2) {
+			//TML: Added 'b < 250' check.
-			if (Netplay.Clients[whoAmI].State < 10 && b > 12 && b != 93 && b != 16 && b != 42 && b != 50 && b != 38 && b != 68 && b != 147)
+			if (Netplay.Clients[whoAmI].State < 10 && b > 12 && b != 93 && b != 16 && b != 42 && b != 50 && b != 38 && b != 68 && b != 147 && b < 250)
 				NetMessage.BootPlayer(whoAmI, Lang.mp[2].ToNetworkText());
 
 			if (Netplay.Clients[whoAmI].State == 0 && b != 1)
@@ -140,6 +_,10 @@
 			ResetReader();
 
 		reader.BaseStream.Position = num;
+
+		if (ModNet.HijackGetData(ref b, ref reader, whoAmI))
+			return;
+
 		switch (b) {
 			case 1:
 				if (Main.netMode != 2)
@@ -151,9 +_,20 @@
 					if (Netplay.Clients[whoAmI].State != 0)
 						break;
 
+					string clientVersion = reader.ReadString();
+
+					/*
 					if (reader.ReadString() == "Terraria" + 279) {
+					*/
+					if (ModNet.IsClientCompatible(clientVersion, out ModNet.isModdedClient[whoAmI], out var kickMsg)) {
 						if (string.IsNullOrEmpty(Netplay.ServerPassword)) {
 							Netplay.Clients[whoAmI].State = 1;
+
+							if (ModNet.isModdedClient[whoAmI]) {
+								ModNet.SyncMods(whoAmI);
+								return;
+							}
+
 							NetMessage.TrySendData(3, whoAmI);
 						}
 						else {
@@ -162,7 +_,10 @@
 						}
 					}
 					else {
+						/*
 						NetMessage.TrySendData(2, whoAmI, -1, Lang.mp[4].ToNetworkText());
+						*/
+						NetMessage.TrySendData(2, whoAmI, -1, NetworkText.FromLiteral(Lang.mp[4].Value + $"\n({kickMsg})"));
 					}
 				}
 				break;
@@ -170,6 +_,9 @@
 				if (Main.netMode == 1) {
 					Netplay.Disconnect = true;
 					Main.statusText = NetworkText.Deserialize(reader).ToString();
+
+					// Added by TML.
+					Main.menuMode = MenuID.MultiplayerJoining;
 				}
 				break;
 			case 3:
@@ -213,6 +_,9 @@
 					TrySendingItemArray(num142, player12.Loadouts[1].Dye, PlayerItemSlotID.Loadout2_Dye_0);
 					TrySendingItemArray(num142, player12.Loadouts[2].Armor, PlayerItemSlotID.Loadout3_Armor_0);
 					TrySendingItemArray(num142, player12.Loadouts[2].Dye, PlayerItemSlotID.Loadout3_Dye_0);
+
+					PlayerLoader.SyncPlayer(player12, -1, -1, true);
+
 					NetMessage.TrySendData(6);
 					if (Netplay.Connection.State == 2)
 						Netplay.Connection.State = 3;
@@ -231,11 +_,11 @@
 				player14.skinVariant = reader.ReadByte();
 				player14.skinVariant = (int)MathHelper.Clamp(player14.skinVariant, 0f, PlayerVariantID.Count - 1);
 				player14.hair = reader.ReadByte();
-				if (player14.hair >= 165)
+				if (player14.hair >= HairLoader.Count)
 					player14.hair = 0;
 
 				player14.name = reader.ReadString().Trim().Trim();
-				player14.hairDye = reader.ReadByte();
+				player14.hairDye = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.Read7BitEncodedInt();
 				ReadAccessoryVisibility(reader, player14.hideVisibleAccessory);
 				player14.hideMisc = reader.ReadByte();
 				player14.hairColor = reader.ReadRGB();
@@ -319,9 +_,9 @@
 				Player player17 = Main.player[num258];
 				lock (player17) {
 					int num259 = reader.ReadInt16();
-					int stack7 = reader.ReadInt16();
-					int num260 = reader.ReadByte();
-					int type16 = reader.ReadInt16();
+					int stack7 = ModNet.AllowVanillaClients ? reader.ReadInt16() : -1;
+					int num260 = ModNet.AllowVanillaClients ? reader.ReadByte() : -1;
+					int type16 = ModNet.AllowVanillaClients ? reader.ReadInt16() : -1;
 					Item[] array3 = null;
 					Item[] array4 = null;
 					int num261 = 0;
@@ -411,20 +_,35 @@
 					}
 
 					if (flag16) {
+						if (!ModNet.AllowVanillaClients) {
+							player17.trashItem = ItemIO.Receive(reader, readStack: true);
+							goto SkipVanillaRead;
+						}
+
 						player17.trashItem = new Item();
 						player17.trashItem.netDefaults(type16);
 						player17.trashItem.stack = stack7;
 						player17.trashItem.Prefix(num260);
+						SkipVanillaRead:
+
 						if (num258 == Main.myPlayer && !Main.ServerSideCharacter)
 							clientPlayer.trashItem = player17.trashItem.Clone();
 					}
 					else if (num259 <= 58) {
 						int type17 = array3[num261].type;
 						int stack8 = array3[num261].stack;
+
+						if (!ModNet.AllowVanillaClients) {
+							array3[num261] = ItemIO.Receive(reader, readStack: true);
+							goto SkipVanillaRead;
+						}
+
 						array3[num261] = new Item();
 						array3[num261].netDefaults(type16);
 						array3[num261].stack = stack7;
 						array3[num261].Prefix(num260);
+						SkipVanillaRead:
+
 						if (num258 == Main.myPlayer && !Main.ServerSideCharacter)
 							array4[num261] = array3[num261].Clone();
 
@@ -438,10 +_,17 @@
 						}
 					}
 					else {
+						if (!ModNet.AllowVanillaClients) {
+							array3[num261] = ItemIO.Receive(reader, readStack: true);
+							goto SkipVanillaRead;
+						}
+
 						array3[num261] = new Item();
 						array3[num261].netDefaults(type16);
 						array3[num261].stack = stack7;
 						array3[num261].Prefix(num260);
+						SkipVanillaRead:
+
 						if (num258 == Main.myPlayer && !Main.ServerSideCharacter)
 							array4[num261] = array3[num261].Clone();
 					}
@@ -625,6 +_,10 @@
 					Main.invasionType = reader.ReadSByte();
 					Main.LobbyId = reader.ReadUInt64();
 					Sandstorm.IntendedSeverity = reader.ReadSingle();
+
+					if (!ModNet.AllowVanillaClients && Netplay.Connection.State > 4)
+						WorldIO.ReceiveModData(reader);
+
 					if (Netplay.Connection.State == 3) {
 						Main.windSpeedCurrent = Main.windSpeedTarget;
 						Netplay.Connection.State = 4;
@@ -921,8 +_,11 @@
 					Player player11 = Main.player[num139];
 					player11.statLife = reader.ReadInt16();
 					player11.statLifeMax = reader.ReadInt16();
+					// Allow health stat to exceed vanilla bounds (#HealthManaAPI)
+					/*
 					if (player11.statLifeMax < 100)
 						player11.statLifeMax = 100;
+					*/
 
 					player11.dead = player11.statLife <= 0;
 					if (Main.netMode == 2)
@@ -1124,7 +_,7 @@
 				BitsByte bitsByte28 = (byte)0;
 				BitsByte bitsByte29 = (byte)0;
 				BitsByte bitsByte30 = (byte)0;
-				Tile tile4 = null;
+				Tile tile4 = default;
 				for (int num232 = num228; num232 < num228 + num230; num232++) {
 					for (int num233 = num229; num233 < num229 + num231; num233++) {
 						if (Main.tile[num232, num233] == null)
@@ -1206,8 +_,8 @@
 				int num105 = reader.ReadInt16();
 				Vector2 position3 = reader.ReadVector2();
 				Vector2 velocity3 = reader.ReadVector2();
-				int stack3 = reader.ReadInt16();
-				int prefixWeWant2 = reader.ReadByte();
+				int stack3 = ModNet.AllowVanillaClients ? reader.ReadInt16() : reader.Read7BitEncodedInt();
+				int prefixWeWant2 = ModNet.AllowVanillaClients ? reader.ReadByte() : reader.Read7BitEncodedInt();
 				int num106 = reader.ReadByte();
 				int num107 = reader.ReadInt16();
 				bool shimmered = false;
@@ -1231,11 +_,12 @@
 					Item item2 = Main.item[num108];
 					ItemSyncPersistentStats itemSyncPersistentStats = default(ItemSyncPersistentStats);
 					itemSyncPersistentStats.CopyFrom(item2);
-					bool newAndShiny = (item2.newAndShiny || item2.netID != num107) && ItemSlot.Options.HighlightNewItems && (num107 < 0 || num107 >= ItemID.Count || !ItemID.Sets.NeverAppearsAsNewInInventory[num107]);
+					bool newAndShiny = (item2.newAndShiny || item2.netID != num107) && ItemSlot.Options.HighlightNewItems && (num107 < 0 || !ItemID.Sets.NeverAppearsAsNewInInventory[num107]);
 					item2.netDefaults(num107);
 					item2.newAndShiny = newAndShiny;
 					item2.Prefix(prefixWeWant2);
 					item2.stack = stack3;
+					ItemIO.ReceiveModData(item2, reader);
 					item2.position = position3;
 					item2.velocity = velocity3;
 					item2.active = true;
@@ -1278,6 +_,7 @@
 					item4.netDefaults(num107);
 					item4.Prefix(prefixWeWant2);
 					item4.stack = stack3;
+					ItemIO.ReceiveModData(item4, reader);
 					item4.position = position3;
 					item4.velocity = velocity3;
 					item4.active = true;
@@ -1419,11 +_,16 @@
 				if (num158 == 668)
 					NPC.deerclopsBoss = num155;
 
-				if (nPC5.type >= 0 && nPC5.type < NPCID.Count && Main.npcCatchable[nPC5.type])
+				if (nPC5.type >= 0 && Main.npcCatchable[nPC5.type])
 					nPC5.releaseOwner = reader.ReadByte();
 
+				// Extra AI is read into a temporary buffer for parity with ProjectileLoader code, and to avoid exceptions causing underreads.
+				if (!ModNet.AllowVanillaClients)
+					NPCLoader.ReceiveExtraAI(nPC5, NPCLoader.ReadExtraAI(reader));
+
 				break;
 			}
+			/*
 			case 24: {
 				int num120 = reader.ReadInt16();
 				int num121 = reader.ReadByte();
@@ -1439,6 +_,7 @@
 
 				break;
 			}
+			*/
 			case 27: {
 				int num34 = reader.ReadInt16();
 				Vector2 position = reader.ReadVector2();
@@ -1459,6 +_,8 @@
 					num37 = -1;
 
 				array[2] = (bitsByte3[0] ? reader.ReadSingle() : 0f);
+				byte[] extraAI = bitsByte3[1] ? ProjectileLoader.ReadExtraAI(reader) : null;
+
 				if (Main.netMode == 2) {
 					if (num36 == 949) {
 						num35 = 255;
@@ -1515,6 +_,10 @@
 					Main.projectileIdentity[num35, num37] = num38;
 				}
 
+				if (extraAI != null) {
+					ProjectileLoader.ReceiveExtraAI(projectile, extraAI);
+				}
+
 				projectile.ProjectileFixDesperation();
 				if (Main.netMode == 2)
 					NetMessage.TrySendData(27, -1, whoAmI, null, num38);
@@ -1523,10 +_,29 @@
 			}
 			case 28: {
 				int num190 = reader.ReadInt16();
+				/*
 				int num191 = reader.ReadInt16();
 				float num192 = reader.ReadSingle();
 				int num193 = reader.ReadByte() - 1;
 				byte b10 = reader.ReadByte();
+				*/
+
+				var num191 = reader.Read7BitEncodedInt();
+				NPC.HitInfo hit = default;
+				if (num191 >= 0) {
+					hit = new NPC.HitInfo {
+						Damage = num191,
+						SourceDamage = reader.Read7BitEncodedInt(),
+						DamageType = DamageClassLoader.DamageClasses[reader.Read7BitEncodedInt()],
+						HitDirection = reader.ReadSByte(),
+						Knockback = reader.ReadSingle()
+					};
+					BitsByte flags = reader.ReadByte();
+					hit.Crit = flags[0];
+					hit.InstantKill = flags[1];
+					hit.HideCombatText = flags[2];
+				}
+
 				if (Main.netMode == 2) {
 					if (num191 < 0)
 						num191 = 0;
@@ -1535,7 +_,10 @@
 				}
 
 				if (num191 >= 0) {
+					/*
 					Main.npc[num190].StrikeNPC(num191, num192, num193, b10 == 1, noEffect: false, fromNet: true);
+					*/
+					Main.npc[num190].StrikeNPC(hit, fromNet: true);
 				}
 				else {
 					Main.npc[num190].life = 0;
@@ -1546,7 +_,11 @@
 				if (Main.netMode != 2)
 					break;
 
+				/*
 				NetMessage.TrySendData(28, -1, whoAmI, null, num190, num191, num192, num193, b10);
+				*/
+				NetMessage.SendStrikeNPC(Main.npc[num190], hit, ignoreClient: whoAmI);
+
 				if (Main.npc[num190].life <= 0)
 					NetMessage.TrySendData(23, -1, -1, null, num190);
 				else
@@ -1625,9 +_,9 @@
 			case 32: {
 				int num164 = reader.ReadInt16();
 				int num165 = reader.ReadByte();
-				int stack5 = reader.ReadInt16();
-				int prefixWeWant3 = reader.ReadByte();
-				int type8 = reader.ReadInt16();
+				int stack5 = ModNet.AllowVanillaClients ? reader.ReadInt16() : -1;
+				int prefixWeWant3 = ModNet.AllowVanillaClients ? reader.ReadByte() : -1;
+				int type8 = ModNet.AllowVanillaClients ? reader.ReadInt16() : -1;
 				if (num164 >= 0 && num164 < 8000) {
 					if (Main.chest[num164] == null)
 						Main.chest[num164] = new Chest();
@@ -1635,9 +_,16 @@
 					if (Main.chest[num164].item[num165] == null)
 						Main.chest[num164].item[num165] = new Item();
 
+					if (!ModNet.AllowVanillaClients) {
+						ItemIO.Receive(Main.chest[num164].item[num165], reader, readStack: true);
+						goto SkipVanillaItemSetup;
+					}
+
 					Main.chest[num164].item[num165].netDefaults(type8);
 					Main.chest[num164].item[num165].Prefix(prefixWeWant3);
 					Main.chest[num164].item[num165].stack = stack5;
+					SkipVanillaItemSetup:
+
 					Recipe.FindRecipes(canDelayCheck: true);
 				}
 
@@ -1703,22 +_,49 @@
 				if (Main.netMode == 2)
 					num206 = 0;
 
+
+				ushort modType = 0;
+				if (b12 >= 100)
+					modType = reader.ReadUInt16();
+
 				if (Main.netMode == 2) {
 					switch (b12) {
+						/*
 						case 0: {
+						*/
+						case byte _ when b12 % 100 == 0: {
+							if (modType == 0)
+								modType = TileID.Containers;
+
+							//TML: '21' -> 'modType'
-							int num209 = WorldGen.PlaceChest(num203, num204, 21, notNearOtherChests: false, num205);
+							int num209 = WorldGen.PlaceChest(num203, num204, modType, notNearOtherChests: false, num205);
+
 							if (num209 == -1) {
+								//TML: Added 'modType' at the end.
-								NetMessage.TrySendData(34, whoAmI, -1, null, b12, num203, num204, num205, num209);
+								NetMessage.TrySendData(34, whoAmI, -1, null, b12, num203, num204, num205, num209, modType);
+
+								/*
 								Item.NewItem(new EntitySource_TileBreak(num203, num204), num203 * 16, num204 * 16, 32, 32, Chest.chestItemSpawn[num205], 1, noBroadcast: true);
+								*/
+								int itemSpawn = b12 < 100 ? Chest.chestItemSpawn[num205] : TileLoader.GetItemDropFromTypeAndStyle(modType, num205);
+								if (itemSpawn > 0)
+									Item.NewItem(new EntitySource_TileBreak(num203, num204), num203 * 16, num204 * 16, 32, 32, itemSpawn, 1, noBroadcast: true);
 							}
 							else {
+								//TML: Added 'modType' at the end.
-								NetMessage.TrySendData(34, -1, -1, null, b12, num203, num204, num205, num209);
+								NetMessage.TrySendData(34, -1, -1, null, b12, num203, num204, num205, num209, modType);
 							}
 
 							break;
 						}
+						/*
 						case 1:
+						*/
+						case byte _ when b12 % 100 == 1:
+							/*
 							if (Main.tile[num203, num204].type == 21) {
+							*/
+							if (Main.tile[num203, num204].type == 21 || b12 == 101 && TileID.Sets.BasicChest[Main.tile[num203, num204].type]) {
 								Tile tile = Main.tile[num203, num204];
 								if (tile.frameX % 36 != 0)
 									num203--;
@@ -1736,20 +_,42 @@
 							goto default;
 						default:
 							switch (b12) {
+								/*
 								case 2: {
+								*/
+								case byte _ when b12 % 100 == 2: {
+									if (modType == 0)
+										modType = TileID.Dressers;
+
+									//TML: '88' -> 'modType'
-									int num207 = WorldGen.PlaceChest(num203, num204, 88, notNearOtherChests: false, num205);
+									int num207 = WorldGen.PlaceChest(num203, num204, modType, notNearOtherChests: false, num205);
+
 									if (num207 == -1) {
+										//TML: Added 'modType' at the end.
-										NetMessage.TrySendData(34, whoAmI, -1, null, b12, num203, num204, num205, num207);
+										NetMessage.TrySendData(34, whoAmI, -1, null, b12, num203, num204, num205, num207, modType);
+
+										/*
 										Item.NewItem(new EntitySource_TileBreak(num203, num204), num203 * 16, num204 * 16, 32, 32, Chest.dresserItemSpawn[num205], 1, noBroadcast: true);
+										*/
+										int itemSpawn = b12 < 100 ? Chest.dresserItemSpawn[num205] : TileLoader.GetItemDropFromTypeAndStyle(modType, num205);
+										if (itemSpawn > 0)
+											Item.NewItem(new EntitySource_TileBreak(num203, num204), num203 * 16, num204 * 16, 32, 32, itemSpawn, 1, noBroadcast: true);
 									}
 									else {
+										//TML: Added 'modType' at the end.
-										NetMessage.TrySendData(34, -1, -1, null, b12, num203, num204, num205, num207);
+										NetMessage.TrySendData(34, -1, -1, null, b12, num203, num204, num205, num207, modType);
 									}
 
 									break;
 								}
+								/*
 								case 3:
+								*/
+								case byte _ when b12 % 100 == 3:
+									/*
 									if (Main.tile[num203, num204].type == 88) {
+									*/
+									if (Main.tile[num203, num204].type == 88 || (b12 == 103 && TileID.Sets.BasicDresser[Main.tile[num203, num204].type])) {
 										Tile tile2 = Main.tile[num203, num204];
 										num203 -= tile2.frameX % 54 / 18;
 										if (tile2.frameY % 36 != 0)
@@ -1802,21 +_,37 @@
 				}
 
 				switch (b12) {
+					/*
 					case 0:
+					*/
+					case byte _ when b12 % 100 == 0:
 						if (num206 == -1) {
 							WorldGen.KillTile(num203, num204);
 							break;
 						}
 						SoundEngine.PlaySound(0, num203 * 16, num204 * 16);
+
+						if (modType == 0)
+							modType = TileID.Containers;
+
+						//TML: '21' -> 'modType'.
-						WorldGen.PlaceChestDirect(num203, num204, 21, num205, num206);
+						WorldGen.PlaceChestDirect(num203, num204, modType, num205, num206);
 						break;
+					/*
 					case 2:
+					*/
+					case byte _ when b12 % 100 == 2:
 						if (num206 == -1) {
 							WorldGen.KillTile(num203, num204);
 							break;
 						}
 						SoundEngine.PlaySound(0, num203 * 16, num204 * 16);
+
+						if (modType == 0)
+							modType = TileID.Dressers;
+
+						//TML: '88' -> 'modType'.
-						WorldGen.PlaceDresserDirect(num203, num204, 88, num205, num206);
+						WorldGen.PlaceDresserDirect(num203, num204, modType, num205, num206);
 						break;
 					case 4:
 						if (num206 == -1) {
@@ -1860,6 +_,13 @@
 				player7.zone3 = reader.ReadByte();
 				player7.zone4 = reader.ReadByte();
 				player7.zone5 = reader.ReadByte();
+
+				if (!ModNet.AllowVanillaClients)
+					BiomeLoader.ReceiveCustomBiomes(player7, reader);
+
+				//TML: Recalculate the 'not in any biome' value.
+				player7.ZonePurity = player7.InZonePurity();
+
 				if (Main.netMode == 2) {
 					if (!flag5 && player7.zone5[0])
 						NPC.SpawnFaelings(num101);
@@ -1885,6 +_,12 @@
 				if (Main.netMode == 2) {
 					if (reader.ReadString() == Netplay.ServerPassword) {
 						Netplay.Clients[whoAmI].State = 1;
+
+						if (ModNet.isModdedClient[whoAmI]) {
+							ModNet.SyncMods(whoAmI);
+							return;
+						}
+
 						NetMessage.TrySendData(3, whoAmI);
 					}
 					else {
@@ -1920,7 +_,13 @@
 				float itemRotation = reader.ReadSingle();
 				int itemAnimation = reader.ReadInt16();
 				player15.itemRotation = itemRotation;
+
+				// TML changes how item synchronization works, making it based on remote players' already-synchronized input.
+				// Setting itemAnimation in this packet would interfere with that.
+				/*
 				player15.itemAnimation = itemAnimation;
+				*/
+
 				player15.channel = player15.inventory[player15.selectedItem].channel;
 				if (Main.netMode == 2)
 					NetMessage.TrySendData(41, -1, whoAmI, null, num226);
@@ -2049,7 +_,11 @@
 				if (Main.tile[num237, num238] == null)
 					Main.tile[num237, num238] = new Tile();
 
+				// Can't lock on struct. Lock does nothing anyway as this is the only place it's acquired
+				/*
 				lock (Main.tile[num237, num238]) {
+				*/
+				{
 					Main.tile[num237, num238].liquid = b15;
 					Main.tile[num237, num238].liquidType(liquidType);
 					if (Main.netMode == 2) {
@@ -2304,7 +_,7 @@
 				if (Main.netMode != 2)
 					break;
 
-				if (num216 >= 0 && num216 < NPCID.Count && NPCID.Sets.MPAllowedEnemies[num216]) {
+				if (num216 >= 0 && NPCID.Sets.MPAllowedEnemies[num216]) {
 					if (!NPC.AnyNPCs(num216))
 						NPC.SpawnOnPlayer(num215, num216);
 				}
@@ -2708,7 +_,7 @@
 				if (Main.netMode == 1) {
 					int num103 = reader.ReadInt16();
 					int num104 = reader.ReadInt32();
-					if (num103 >= 0 && num103 < 290)
+					if (num103 >= 0) // upper bound check removed to support mod banner IDs
 						NPC.killCount[num103] = num104;
 				}
 				break;
@@ -2744,7 +_,8 @@
 					}
 				}
 				else {
+					//TML: Made 'lightSend' true.
-					TileEntity tileEntity = TileEntity.Read(reader, networkSend: true);
+					TileEntity tileEntity = TileEntity.Read(reader, networkSend: true, lightSend: true);
 					tileEntity.ID = num67;
 					TileEntity.ByID[tileEntity.ID] = tileEntity;
 					TileEntity.ByPosition[tileEntity.Position] = tileEntity;
@@ -2819,10 +_,24 @@
 				if (Main.netMode == 2) {
 					short x12 = reader.ReadInt16();
 					int y12 = reader.ReadInt16();
+
+					Item item;
+					if (!ModNet.AllowVanillaClients) {
+						item = ItemIO.Receive(reader);
+						item.stack = reader.Read7BitEncodedInt();
+						goto SkipVanillaRead;
+					}
+
 					int netid3 = reader.ReadInt16();
 					int prefix3 = reader.ReadByte();
 					int stack6 = reader.ReadInt16();
+					item = new Item(netid3, stack6, prefix3);
+					SkipVanillaRead:
+
+					/*
 					TEItemFrame.TryPlacing(x12, y12, netid3, prefix3, stack6);
+					*/
+					TEItemFrame.TryPlacing(x12, y12, item, 1);
 				}
 				break;
 			case 91: {
@@ -2831,6 +_,13 @@
 
 				int num185 = reader.ReadInt32();
 				int num186 = reader.ReadByte();
+
+				// If type corresponds to projectile (magic number 2), read another byte for owner #WorldUIAnchorProjectileSyncFix
+				if (!ModNet.AllowVanillaClients && num186 == 2) {
+					int owner = reader.ReadByte();
+					num186 |= owner << 8; // Reassign num186 for use in DeserializeNetAnchor - this is now "packedOwnerType"
+				}
+
 				if (num186 == 255) {
 					if (EmoteBubble.byID.ContainsKey(num185))
 						EmoteBubble.byID.Remove(num185);
@@ -3182,7 +_,16 @@
 				break;
 			case 117: {
 				int num234 = reader.ReadByte();
+				bool directHurt = false;
+				if (num234 == 255) {
+					num234 = reader.ReadByte();
+					directHurt = true;
+				}
+
 				if (Main.netMode != 2 || whoAmI == num234 || (Main.player[num234].hostile && Main.player[whoAmI].hostile)) {
+					if (directHurt)
+						goto ReadDirectHurt;
+
 					PlayerDeathReason playerDeathReason2 = PlayerDeathReason.FromReader(reader);
 					int damage3 = reader.ReadInt16();
 					int num235 = reader.ReadByte() - 1;
@@ -3193,6 +_,26 @@
 					Main.player[num234].Hurt(playerDeathReason2, damage3, num235, pvp2, quiet: true, flag15, num236);
 					if (Main.netMode == 2)
 						NetMessage.SendPlayerHurt(num234, playerDeathReason2, damage3, num235, flag15, pvp2, num236, -1, whoAmI);
+
+					break;
+
+					ReadDirectHurt:
+					BitsByte pack = reader.ReadByte();
+					var args = new Player.HurtInfo {
+						DamageSource = PlayerDeathReason.FromReader(reader),
+						PvP = pack[0],
+						CooldownCounter = reader.ReadSByte(),
+						Dodgeable = pack[1],
+						SourceDamage = reader.Read7BitEncodedInt(),
+						Damage = reader.Read7BitEncodedInt(),
+						HitDirection = reader.ReadSByte(),
+						Knockback = reader.ReadSingle(),
+						DustDisabled = pack[2],
+						SoundDisabled = pack[3]
+					};
+					Main.player[num234].Hurt(args, quiet: true);
+					if (Main.netMode == 2)
+						NetMessage.SendPlayerHurt(num234, args, ignoreClient: whoAmI);
 				}
 
 				break;
@@ -3293,10 +_,23 @@
 				if (Main.netMode == 2) {
 					short x10 = reader.ReadInt16();
 					int y10 = reader.ReadInt16();
+
+					Item item;
+					if (!ModNet.AllowVanillaClients) {
+						item = ItemIO.Receive(reader, readStack: true);
+						goto SkipVanillaRead;
+					}
+
 					int netid2 = reader.ReadInt16();
 					int prefix2 = reader.ReadByte();
 					int stack4 = reader.ReadInt16();
+					item = new Item(netid2, stack4, prefix2);
+					SkipVanillaRead:
+
+					/*
 					TEWeaponsRack.TryPlacing(x10, y10, netid2, prefix2, stack4);
+					*/
+					TEWeaponsRack.TryPlacing(x10, y10, item, item.stack);
 				}
 				break;
 			case 124: {
@@ -3431,20 +_,46 @@
 					ushort key = reader.ReadUInt16();
 					LegacySoundStyle legacySoundStyle = SoundID.SoundByIndex[key];
 					BitsByte bitsByte4 = reader.ReadByte();
+					/*
 					int num44 = -1;
 					float num45 = 1f;
 					float num46 = 0f;
 					SoundEngine.PlaySound(Style: (!bitsByte4[0]) ? legacySoundStyle.Style : reader.ReadInt32(), volumeScale: (!bitsByte4[1]) ? legacySoundStyle.Volume : MathHelper.Clamp(reader.ReadSingle(), 0f, 1f), pitchOffset: (!bitsByte4[2]) ? legacySoundStyle.GetRandomPitch() : MathHelper.Clamp(reader.ReadSingle(), -1f, 1f), type: legacySoundStyle.SoundId, x: point.X, y: point.Y);
+					*/
+
+					if (bitsByte4[0])
+						legacySoundStyle.Variants = new int[] { reader.ReadInt32() };
+
+					if (bitsByte4[1])
+						legacySoundStyle.Volume = MathHelper.Clamp(reader.ReadSingle(), 0f, 1f);
+
+					if (bitsByte4[2])
+						legacySoundStyle.Pitch = MathHelper.Clamp(reader.ReadSingle(), 0f, 1f);
+
+					SoundEngine.PlaySound(legacySoundStyle, point.ToVector2());
 				}
 				break;
 			case 133:
 				if (Main.netMode == 2) {
 					short x5 = reader.ReadInt16();
 					int y5 = reader.ReadInt16();
+
+					Item item;
+					if (!ModNet.AllowVanillaClients) {
+						item = ItemIO.Receive(reader, readStack: true);
+						goto SkipVanillaRead;
+					}
+
 					int netid = reader.ReadInt16();
 					int prefix = reader.ReadByte();
 					int stack = reader.ReadInt16();
+					item = new Item(netid, stack, prefix);
+					SkipVanillaRead:
+
+					/*
 					TEFoodPlatter.TryPlacing(x5, y5, netid, prefix, stack);
+					*/
+					TEFoodPlatter.TryPlacing(x5, y5, item, item.stack);
 				}
 				break;
 			case 134: {
@@ -3587,6 +_,27 @@
 
 				break;
 			}
+			case MessageID.InGameChangeConfig:
+				ModLoader.Config.ConfigManager.HandleInGameChangeConfigPacket(reader, whoAmI);
+				return;
+			case MessageID.ModPacket:
+				ModNet.HandleModPacket(reader, whoAmI, length);
+				return;
+			case MessageID.SyncMods:
+				if (Main.netMode == 1) {
+					ModNet.SyncClientMods(reader);
+				}
+				else {
+					ModNet.SendNetIDs(whoAmI);
+					NetMessage.SendData(3, whoAmI);
+				}
+				return;
+			case MessageID.ModFile:
+				if (Main.netMode == 1)
+					ModNet.ReceiveMod(reader);
+				else
+					ModNet.SendMod(reader.ReadString(), whoAmI);
+				return;
 			default:
 				if (Netplay.Clients[whoAmI].State == 0)
 					NetMessage.BootPlayer(whoAmI, Lang.mp[2].ToNetworkText());
