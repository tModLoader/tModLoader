--- src/TerrariaNetCore/Terraria/Utilities/FileUtilities.cs
+++ src/tModLoader/Terraria/Utilities/FileUtilities.cs
@@ -6,7 +_,7 @@
 
 namespace Terraria.Utilities
 {
-	public static class FileUtilities
+	public static partial class FileUtilities
 	{
 		private static Regex FileNameRegex = new Regex("^(?<path>.*[\\\\\\/])?(?:$|(?<fileName>.+?)(?:(?<extension>\\.[^.]*$)|$))", RegexOptions.IgnoreCase | RegexOptions.Compiled);
 
@@ -20,14 +_,10 @@
 		public static void Delete(string path, bool cloud, bool forceDeleteFile = false) {
 			if (cloud && SocialAPI.Cloud != null)
 				SocialAPI.Cloud.Delete(path);
-			else if (forceDeleteFile)
-				File.Delete(path);
-			else
-#if WINDOWS
+			else if (!forceDeleteFile && OperatingSystem.IsWindows())
 				FileOperationAPIWrapper.MoveToRecycleBin(path);
-#else
+			else
 				File.Delete(path);
-#endif
 		}
 
 		public static string GetFullPath(string path, bool cloud) {
@@ -38,10 +_,13 @@
 		}
 
 		public static void Copy(string source, string destination, bool cloud, bool overwrite = true) {
+			/*
 			if (!cloud)
 				File.Copy(source, destination, overwrite);
 			else if (SocialAPI.Cloud != null && (overwrite || !SocialAPI.Cloud.HasFile(destination)))
 				SocialAPI.Cloud.Write(destination, SocialAPI.Cloud.Read(source));
+			*/
+			CopyExtended(source, destination, cloud, overwriteAlways: overwrite);
 		}
 
 		public static void Move(string source, string destination, bool cloud, bool overwrite = true, bool forceDeleteSourceFile = false) {
@@ -155,6 +_,7 @@
 		}
 
 		public static void CopyFolder(string sourcePath, string destinationPath) {
+			/*
 			Directory.CreateDirectory(destinationPath);
 			string[] directories = Directory.GetDirectories(sourcePath, "*", SearchOption.AllDirectories);
 			for (int i = 0; i < directories.Length; i++) {
@@ -165,6 +_,8 @@
 			foreach (string obj in directories) {
 				File.Copy(obj, obj.Replace(sourcePath, destinationPath), overwrite: true);
 			}
+			*/
+			CopyFolderEXT(sourcePath, destinationPath, isCloud: false, overwriteAlways: true);
 		}
 
 		public static void ProtectedInvoke(Action action) {
