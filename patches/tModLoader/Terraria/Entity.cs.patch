--- src/TerrariaNetCore/Terraria/Entity.cs
+++ src/tModLoader/Terraria/Entity.cs
@@ -3,19 +_,55 @@
 
 namespace Terraria;
 
-public abstract class Entity
+public abstract partial class Entity
 {
+	/// <summary>
+	/// The index of this Entity within its specific array. These arrays track the entities in the world.
+	/// <br/> Item: unused
+	/// <br/> Projectile: <see cref="Main.projectile"/>
+	/// <br/> NPC: <see cref="Main.npc"/>
+	/// <br/> Player: <see cref="Main.player"/>
+	/// <para/> Note that Projectile.whoAmI is not consistent between clients in multiplayer for the same projectile.
+	/// </summary>
 	public int whoAmI;
+
+	/// <summary>
+	/// If true, the Entity actually exists within the game world. Within the specific entity array, if active is false, the entity is junk data. Always check active if iterating over the entity array. Another option for iterating is to use <see cref="Main.ActivePlayers"/>, <see cref="Main.ActiveNPCs"/>, <see cref="Main.ActiveProjectiles"/>, or <see cref="Main.ActiveItems"/> instead for simpler code.
+	/// </summary>
 	public bool active;
 	internal long entityId;
+
+	/// <summary>
+	/// The position of this Entity in world coordinates. Note that this corresponds to the top left corner of the entity. Use <see cref="Center"/> instead for logic that needs the position at the center of the entity.
+	/// </summary>
 	public Vector2 position;
+
+	/// <summary>
+	/// The velocity of this Entity in world coordinates per tick.
+	/// </summary>
 	public Vector2 velocity;
 	public Vector2 oldPosition;
 	public Vector2 oldVelocity;
 	public int oldDirection;
+	/// <summary>
+	/// The direction this entity is facing. A value of 1 means the entity is facing to the right. -1 means facing to the left.
+	/// </summary>
 	public int direction = 1;
+
+	/// <summary>
+	/// The width of this Entity's hitbox, in pixels.
+	/// </summary>
 	public int width;
+
+	/// <summary>
+	/// The height of this Entity's hitbox, in pixels.
+	/// </summary>
 	public int height;
+
+	/// <summary>
+	/// The Entity is currently in water.
+	/// <br/> Projectile: Affects movement speed and some projectiles die when wet. <see cref="Projectile.ignoreWater"/> prevents this.
+	/// </summary>
 	public bool wet;
 	public bool shimmerWet;
 	public bool honeyWet;
@@ -24,6 +_,9 @@
 
 	public virtual Vector2 VisualPosition => position;
 
+	/// <summary>
+	/// The center position of this entity in world coordinates. Calculated from <see cref="position"/>, <see cref="width"/>, and <see cref="height"/>.
+	/// </summary>
 	public Vector2 Center {
 		get {
 			return new Vector2(position.X + (float)(width / 2), position.Y + (float)(height / 2));
