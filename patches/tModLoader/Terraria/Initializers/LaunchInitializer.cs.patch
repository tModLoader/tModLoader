--- src/TerrariaNetCore/Terraria/Initializers/LaunchInitializer.cs
+++ src/tModLoader/Terraria/Initializers/LaunchInitializer.cs
@@ -1,6 +_,10 @@
 using System;
 using System.Diagnostics;
+using System.Linq;
+using System.Text.RegularExpressions;
 using Terraria.Localization;
+using Terraria.ModLoader.Core;
+using Terraria.ModLoader.Engine;
 using Terraria.Social;
 
 namespace Terraria.Initializers;
@@ -25,13 +_,58 @@
 		string s;
 		if ((s = TryParameter("-p", "-port")) != null && int.TryParse(s, out var result))
 			Netplay.ListenPort = result;
+
+		// Added by TML.
+		if (TryParameter("-modpack") is string modPack)
+			ModOrganizer.commandLineModPack = modPack;
+
+		if (HasParameter("-accuratememorytracking"))
+			MemoryTracking.accurate = true;
+
+		// Added by TML.
+		if (HasParameter("-skipselect")) {
+			string playerName = null;
+			string worldName = null;
+
+			if (TryParameter("-skipselect") is string skipSelectArgs) {
+				Regex cmdRegEx = new Regex(@"(?<name>.*?):(?<val>.*)");
+				Match m = cmdRegEx.Match(skipSelectArgs);
+
+				if (m.Success) {
+					playerName = m.Groups["name"].Value;
+					worldName = m.Groups["val"].Value;
+				}
+			}
+
+			ModLoader.ModLoader.OnSuccessfulLoad += () => {
+				WorldGen.clearWorld();
+
+				Main.LoadWorlds();
+				(Main.WorldList.FirstOrDefault(x => x.Name == worldName) ?? Main.WorldList[0]).SetAsActive();
+				if (Main.dedServ) // Fix #4035, logic will continue to DedServ_PostModLoad where selected world will be loaded and WorldGen.serverLoadWorld run.
+					return;
+
+				Main.LoadPlayers();
+				(Main.PlayerList.FirstOrDefault(x => x.Name == playerName) ?? Main.PlayerList[0]).SetAsActive();
+
+				if (!GameContent.UI.States.UIWorldSelect.CanWorldBePlayed(Main.ActiveWorldFileData)) {
+					throw new Exception(
+						$"The selected character {playerName} can not be used with the selected world {worldName}.\n" +
+						$"This could be due to mismatched Journey Mode or other mod specific changes." +
+						$"Check in Game Menus for more information."
+					);
+				}
+
+				WorldGen.playWorld();
+			};
+		}
 	}
 
 	private static void LoadClientParameters(Main game)
 	{
 		string iP;
 		if ((iP = TryParameter("-j", "-join")) != null)
-			game.AutoJoin(iP);
+			game.AutoJoin(iP, TryParameter("-plr", "-player"));
 
 		string arg;
 		if ((arg = TryParameter("-pass", "-password")) != null) {
@@ -45,6 +_,13 @@
 
 	private static void LoadServerParameters(Main game)
 	{
+		if (!OperatingSystem.IsWindows()) {
+			if (TryParameter("-forcepriority") != null) {
+				ModLoader.Logging.tML.Warn("The -forcepriority command line parameter has no effect on non-Windows OS. You'll have to set priority manually within your OS."); // Fix #3749
+			}
+			goto PostSetPriorityClass;
+		}
+
 		try {
 			string s;
 			if ((s = TryParameter("-forcepriority")) != null) {
@@ -84,6 +_,7 @@
 		}
 		catch {
 		}
+		PostSetPriorityClass:
 
 		string value;
 		if ((value = TryParameter("-maxplayers", "-players")) != null) {
@@ -103,6 +_,16 @@
 		if ((s2 = TryParameter("-language")) != null)
 			LanguageManager.Instance.SetLanguage(s2);
 
+		// Added by TML.
+		if (TryParameter("-publish") is string publish) {
+			ModLoader.UI.UIModSourceItem.PublishModCommandLine(publish);
+			// Application Exits
+		}
+
+		// Added by TML.
+		if (TryParameter("-install") is string install)
+			FileAssociationSupport.HandleFileAssociation(install);
+
 		string worldName;
 		if ((worldName = TryParameter("-worldname")) != null)
 			game.SetWorldName(worldName);
@@ -111,6 +_,14 @@
 		if ((newMOTD = TryParameter("-motd")) != null)
 			game.NewMOTD(newMOTD);
 
+		// Added by TML.
+		if (TryParameter("-modpath") is string modPath)
+			ModOrganizer.modPath = modPath;
+
+		// Added by TML.
+		if (HasParameter("-showserverconsole"))
+			Main.showServerConsole = true;
+
 		string banFilePath;
 		if ((banFilePath = TryParameter("-banlist")) != null)
 			Netplay.BanFilePath = banFilePath;
@@ -160,7 +_,7 @@
 		return false;
 	}
 
-	private static string TryParameter(params string[] keys)
+	public static string TryParameter(params string[] keys)
 	{
 		for (int i = 0; i < keys.Length; i++) {
 			if (Program.LaunchParameters.TryGetValue(keys[i], out var value)) {
