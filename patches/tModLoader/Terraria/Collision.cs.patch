--- src/TerrariaNetCore/Terraria/Collision.cs
+++ src/tModLoader/Terraria/Collision.cs
@@ -3,10 +_,11 @@
 using Microsoft.Xna.Framework;
 using Terraria.DataStructures;
 using Terraria.ID;
+using Terraria.ModLoader;
 
 namespace Terraria;
 
-public class Collision
+public partial class Collision
 {
 	public struct HurtTile
 	{
@@ -17,8 +_,8 @@
 
 	public static bool stair;
 	public static bool stairFall;
-	public static bool honey;
-	public static bool shimmer;
+	public static ref bool honey => ref Liquid[2];
+	public static ref bool shimmer => ref Liquid[3];
 	public static bool sloping;
 	public static bool landMine = false;
 	public static bool up;
@@ -1030,7 +_,7 @@
 		if (tile == null || !tile.active() || tile.inActive() || !Main.tileSolid[tile.type])
 			return false;
 
-		if (treatPlatformsAsNonSolid && tile.type > 0 && tile.type <= TileID.Count && (TileID.Sets.Platforms[tile.type] || tile.type == 380))
+		if (treatPlatformsAsNonSolid && tile.type > 0 && (TileID.Sets.Platforms[tile.type] || tile.type == 380))
 			return false;
 
 		int num = tile.blockType();
@@ -1137,6 +_,9 @@
 	{
 		honey = false;
 		shimmer = false;
+		for (int k = 0; k < LiquidLoader.LiquidCount; k++) {
+			Liquid[k] = false;
+		}
 		Vector2 vector = new Vector2(Position.X + (float)(Width / 2), Position.Y + (float)(Height / 2));
 		int num = 10;
 		int num2 = Height / 2;
@@ -1170,12 +_,18 @@
 					vector2.Y += num5 * 2f;
 					num4 -= (int)(num5 * 2f);
 					if (vector.X + (float)num > vector2.X && vector.X < vector2.X + 16f && vector.Y + (float)num2 > vector2.Y && vector.Y < vector2.Y + (float)num4) {
+						for (int k = 0; k < LiquidLoader.LiquidCount; k++) {
+							if (Main.tile[i, j].LiquidType == k) {
+								Liquid[k] = true;
+							}
+						}
+						/*
 						if (Main.tile[i, j].honey())
 							honey = true;
 
 						if (Main.tile[i, j].shimmer())
 							shimmer = true;
-
+						*/
 						return true;
 					}
 				}
@@ -1187,11 +_,17 @@
 					vector2.Y = j * 16;
 					int num6 = 16;
 					if (vector.X + (float)num > vector2.X && vector.X < vector2.X + 16f && vector.Y + (float)num2 > vector2.Y && vector.Y < vector2.Y + (float)num6) {
+						for (int k = 0; k < LiquidLoader.LiquidCount; k++) {
+							if (Main.tile[i, j - 1].LiquidType == k) {
+								Liquid[k] = true;
+							}
+						}
+						/*
 						if (Main.tile[i, j - 1].honey())
 							honey = true;
 						else if (Main.tile[i, j - 1].shimmer())
 							shimmer = true;
-
+						*/
 						return true;
 					}
 				}
@@ -2614,7 +_,10 @@
 			tile = Main.tile[num2, num3];
 			tile2 = Main.tile[num2, num3 - 1];
 			if (specialChecksMode == 1)
+				/*
 				flag5 = tile.type != 16 && tile.type != 18 && tile.type != 14 && tile.type != 469 && tile.type != 134;
+				*/
+				flag5 = !TileID.Sets.IgnoredByNpcStepUp[tile.type];
 
 			flag4 = flag4 && ((tile.nactive() && (!tile.topSlope() || (tile.slope() == 1 && position.X + (float)(width / 2) < (float)(num2 * 16)) || (tile.slope() == 2 && position.X + (float)(width / 2) > (float)(num2 * 16 + 16))) && (!tile.topSlope() || position.Y + (float)height > (float)(num3 * 16)) && ((Main.tileSolid[tile.type] && !Main.tileSolidTop[tile.type]) || (holdsMatching && ((Main.tileSolidTop[tile.type] && tile.frameY == 0) || TileID.Sets.Platforms[tile.type]) && (!Main.tileSolid[tile2.type] || !tile2.nactive()) && flag5))) || (tile2.halfBrick() && tile2.nactive()));
 			flag4 &= !Main.tileSolidTop[tile.type] || !Main.tileSolidTop[tile2.type];
@@ -2694,7 +_,7 @@
 			if (tile.active()) {
 				if (Main.tileSolid[tile.type]) {
 					int num5 = tile.blockType();
-					if (tile.type != 19) {
+					if (!TileID.Sets.Platforms[tile.type]) {
 						switch (num5) {
 							case 1:
 								return 0f;
