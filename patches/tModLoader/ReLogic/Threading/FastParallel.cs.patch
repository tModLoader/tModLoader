--- src/TerrariaNetCore/ReLogic/Threading/FastParallel.cs
+++ src/tModLoader/ReLogic/Threading/FastParallel.cs
@@ -66,6 +_,8 @@
 		ThreadPriority priority = Thread.CurrentThread.Priority;
 		Thread.CurrentThread.Priority = ThreadPriority.Highest;
 		*/
+
+		var tpStartState = (completed: ThreadPool.CompletedWorkItemCount, pending: ThreadPool.PendingWorkItemCount);
 		
 		int num3 = num / num2;
 		int num4 = num % num2;
@@ -98,8 +_,13 @@
 		if (!countdownEvent.Wait(10000)) {
 			// #2659, throw an exception instead of freezing the process forever.
 			// After removing the thread priority changes, this will probably no-longer happen, but may as well leave it in to see.
-			ThreadPool.GetAvailableThreads(out int workerThreads, out _);
-			throw new Exception($"Fatal Deadlock in FastParallelFor. pending: {ThreadPool.PendingWorkItemCount}. avail: {workerThreads}");
+
+			// Note, exception logging has been improved over TerrariaNetCore, but only in tML solution because exception dumping based on flags is a tML logging feature
+			var tpCurrentState = (completed: ThreadPool.CompletedWorkItemCount, pending: ThreadPool.PendingWorkItemCount);
+			throw new Exception($"Fatal Deadlock in FastParallelFor. Tasks Queued: {num2 - 1}, Unfinished: {countdownEvent.CurrentCount}, Proc Count: {Environment.ProcessorCount}\n" +
+				$"\tThreadPool Completed: {tpCurrentState.completed} (+{tpCurrentState.completed-tpStartState.completed}), Pending: {tpCurrentState.pending} ({tpCurrentState.pending - tpStartState.pending:+0;-#})") {
+				Data = { ["dump"] = "normal" }
+			};
 		}
 	}
 
