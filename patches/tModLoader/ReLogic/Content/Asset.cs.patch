--- src/TerrariaNetCore/ReLogic/Content/Asset.cs
+++ src/tModLoader/ReLogic/Content/Asset.cs
@@ -1,4 +_,6 @@
 using System;
+using System.Threading;
+using System.Threading.Tasks;
 using ReLogic.Content.Sources;
 
 namespace ReLogic.Content;
@@ -7,6 +_,10 @@
 {
 	public static readonly Asset<T> Empty = new Asset<T>("");
 
+	public static T DefaultValue { get; set; }
+
+	private T ownValue;
+
 	public string Name { get; private set; }
 
 	public bool IsLoaded => State == AssetState.Loaded;
@@ -17,7 +_,12 @@
 
 	public IContentSource Source { get; private set; }
 
+	public T Value => IsLoaded ? ownValue : DefaultValue;
+
+	internal Action Continuation { get; set; }
+	Action IAsset.Continuation { set => Continuation = value; }
+
-	public T Value { get; private set; }
+	public Action Wait { get; internal set; }
 
 	internal Asset(string name) {
 		State = AssetState.NotLoaded;
@@ -29,11 +_,9 @@
 	}
 
 	internal void Unload() {
-		if (Value is IDisposable disposable)
-			disposable.Dispose();
-
+		(ownValue as IDisposable)?.Dispose();
 		State = AssetState.NotLoaded;
-		Value = null;
+		ownValue = null;
 		Source = null;
 	}
 
@@ -41,15 +_,11 @@
 		if (value == null)
 			throw new ArgumentNullException("value");
 
-		if (source == null)
-			throw new ArgumentNullException("source");
-
-		if (Value is IDisposable disposable)
-			disposable.Dispose();
-
-		State = AssetState.Loaded;
-		Value = value;
+		(ownValue as IDisposable)?.Dispose();
+		ownValue = value;
 		Source = source;
+		Thread.MemoryBarrier();
+		State = AssetState.Loaded;
 	}
 
 	internal void SetToLoadingState() {
@@ -60,12 +_,12 @@
 		if (IsDisposed)
 			return;
 
-		if (disposing && Value != null) {
+		if (disposing && ownValue != null) {
-			IDisposable disposable = Value as IDisposable;
+			IDisposable disposable = ownValue as IDisposable;
 			if (IsLoaded)
 				disposable?.Dispose();
 
-			Value = null;
+			ownValue = null;
 		}
 
 		IsDisposed = true;
