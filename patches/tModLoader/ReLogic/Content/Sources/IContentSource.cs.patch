--- src/TerrariaNetCore/ReLogic/Content/Sources/IContentSource.cs
+++ src/tModLoader/ReLogic/Content/Sources/IContentSource.cs
@@ -1,5 +_,8 @@
+using System;
 using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
 using System.IO;
+using System.Linq;
 
 namespace ReLogic.Content.Sources;
 
@@ -7,17 +_,57 @@
 {
 	IContentValidator ContentValidator { get; set; }
 
+	/*
 	bool HasAsset(string assetName);
 
 	List<string> GetAllAssetsStartingWith(string assetNameStart);
+	*/
 
+	// Added by TML.
+	RejectedAssetCollection Rejections { get; }
+
+	// Added by TML.
+	IEnumerable<string> EnumerateAssets();
+
+	/// <summary>
+	/// Must be threadsafe! 
+	/// </summary>
+	/// <returns>null if the asset does not exist</returns>
 	string GetExtension(string assetName);
 
+	//TML: Changed parameter name from 'assetName'.
+	/// <summary>
+	/// Must be threadsafe! 
+	/// </summary>
-	Stream OpenStream(string assetName);
+	Stream OpenStream(string fullAssetName);
 
+	/*
 	void RejectAsset(string assetName, IRejectionReason reason);
 
 	void ClearRejections();
 
 	bool TryGetRejections(List<string> rejectionReasons);
+	*/
+
+	// Added by TML.
+	/// <summary>
+	/// Checks Rejections and GetExtension to determine if an asset exists
+	/// </summary>
+	/// <param name="assetName"></param>
+	/// <returns></returns>
+	public bool HasAsset(string assetName) =>
+		!Rejections.IsRejected(assetName) && GetExtension(assetName) != null;
+
+	// Added by TML.
+	[Obsolete, SuppressMessage("CodeQuality", "IDE0051:Remove unused private members")]
+	private IEnumerable<string> GetAllAssetsStartingWith(string assetNameStart)
+		=> GetAllAssetsStartingWith(assetNameStart, ignoreCase: false);
+
+	// Added by TML.
+	IEnumerable<string> GetAllAssetsStartingWith(string assetNameStart, bool ignoreCase = false)
+	{
+		var comparison = ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal;
+
+		return EnumerateAssets().Where(s => s.StartsWith(assetNameStart, comparison));
+	}
 }
