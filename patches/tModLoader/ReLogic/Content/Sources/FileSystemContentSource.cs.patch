--- src/TerrariaNetCore/ReLogic/Content/Sources/FileSystemContentSource.cs
+++ src/tModLoader/ReLogic/Content/Sources/FileSystemContentSource.cs
@@ -1,16 +_,21 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 
 namespace ReLogic.Content.Sources;
 
+//TML: Now derives from ContentSource instead of IContentSource
-public class FileSystemContentSource : IContentSource
+public class FileSystemContentSource : ContentSource
 {
 	private readonly string _basePath;
 	private readonly Dictionary<string, string> _nameToAbsolutePath = new Dictionary<string, string>();
+
+	/*
 	private readonly RejectedAssetCollection _rejections = new RejectedAssetCollection();
 
 	public IContentValidator ContentValidator { get; set; }
+	*/
 
 	public int FileCount => _nameToAbsolutePath.Count;
 
@@ -21,8 +_,17 @@
 			_basePath += Path.DirectorySeparatorChar;
 
 		BuildNameToAbsolutePathDictionary();
+
+		// Added by TML.
+		SetAssetNames(_nameToAbsolutePath.Keys);
+
+		// #2617 - Allow using paths with extensions in GetExtension calls, because we happen to return such paths in EnumerateAssets().
+		foreach (var pair in assetExtensions.ToArray()) {
+			assetExtensions.TryAdd(pair.Key + pair.Value, pair.Value);
+		}
 	}
 
+	/*
 	public bool HasAsset(string assetName)
 	{
 		if (_rejections.IsRejected(assetName))
@@ -49,8 +_,9 @@
 
 		return Path.GetExtension(value) ?? "";
 	}
+	*/
 
-	public Stream OpenStream(string assetName)
+	public override Stream OpenStream(string assetName)
 	{
 		if (!_nameToAbsolutePath.TryGetValue(assetName, out var value))
 			throw AssetLoadException.FromMissingAsset(assetName);
@@ -72,14 +_,19 @@
 			string[] files = Directory.GetFiles(_basePath, "*", SearchOption.AllDirectories);
 			for (int i = 0; i < files.Length; i++) {
 				string fullPath = Path.GetFullPath(files[i]);
+				/*
 				string text = Path.GetExtension(fullPath) ?? "";
 				string path = fullPath.Substring(_basePath.Length, fullPath.Length - text.Length - _basePath.Length);
+				*/
+
+				string path = fullPath.Substring(_basePath.Length);
 				path = AssetPathHelper.CleanPath(path);
 				_nameToAbsolutePath[path] = fullPath;
 			}
 		}
 	}
 
+	/*
 	public void RejectAsset(string assetName, IRejectionReason reason)
 	{
 		_rejections.Reject(assetName, reason);
@@ -91,4 +_,5 @@
 	}
 
 	public bool TryGetRejections(List<string> rejectionReasons) => _rejections.TryGetRejections(rejectionReasons);
+	*/
 }
