--- src/TerrariaNetCore/ReLogic/Content/Sources/ZipContentSource.cs
+++ src/tModLoader/ReLogic/Content/Sources/ZipContentSource.cs
@@ -7,18 +_,16 @@
 
 namespace ReLogic.Content.Sources;
 
+//TML: Now derives from ContentSource instead of IContentSource
-public class ZipContentSource : IContentSource, IDisposable
+public class ZipContentSource : ContentSource, IDisposable
 {
 	private readonly ZipFile _zipFile;
 	private readonly Dictionary<string, ZipEntry> _entries = new Dictionary<string, ZipEntry>();
 	private readonly string _basePath;
 	private bool _isDisposed;
-	private readonly RejectedAssetCollection _rejections = new RejectedAssetCollection();
 
 	public int EntryCount => _entries.Count;
 
-	public IContentValidator ContentValidator { get; set; }
-
 	public ZipContentSource(string path)
 		: this(path, "")
 	{
@@ -31,7 +_,8 @@
 			throw new ArgumentException("Content directory cannot contain \"..\"", "contentDir");
 
 		_basePath = CleanZipPath(contentDir);
-		BuildExtensionFreeEntryList();
+
+		BuildEntryList(); //BuildExtensionFreeEntryList();
 	}
 
 	public ZipContentSource(ZipFile zip, string contentDir)
@@ -41,9 +_,11 @@
 			throw new ArgumentException("Content directory cannot contain \"..\"", "contentDir");
 
 		_basePath = CleanZipPath(contentDir);
-		BuildExtensionFreeEntryList();
+
+		BuildEntryList(); //BuildExtensionFreeEntryList();
 	}
 
+	/*
 	public bool HasAsset(string assetName)
 	{
 		if (!_entries.TryGetValue(assetName, out var _))
@@ -73,28 +_,42 @@
 
 		return Path.GetExtension(value.FileName) ?? "";
 	}
-
-	public Stream OpenStream(string assetName)
+	*/
+	
+	public override Stream OpenStream(string assetName)
 	{
 		if (!_entries.TryGetValue(assetName, out var value))
 			throw AssetLoadException.FromMissingAsset(assetName);
 
 		MemoryStream memoryStream = new MemoryStream((int)value.UncompressedSize);
+
+		//TML: Wrapped call in this lock.
+		lock (_zipFile) {
-		value.Extract(memoryStream);
+			value.Extract(memoryStream);
+		}
+
 		memoryStream.Position = 0L;
 		return memoryStream;
 	}
 
+	//TML: Renamed from BuildExtensionFreeEntryList()
-	private void BuildExtensionFreeEntryList()
+	private void BuildEntryList()
 	{
 		_entries.Clear();
 		foreach (ZipEntry item in _zipFile.Entries.Where((ZipEntry entry) => !entry.IsDirectory && entry.FileName.StartsWith(_basePath))) {
 			string fileName = item.FileName;
+
+			/*
 			string text = Path.GetExtension(fileName) ?? "";
 			string path = fileName.Substring(_basePath.Length, fileName.Length - text.Length - _basePath.Length);
+			*/
+			string path = fileName.Substring(_basePath.Length, fileName.Length - _basePath.Length);
+
 			path = AssetPathHelper.CleanPath(path);
 			_entries[path] = item;
 		}
+
+		SetAssetNames(_entries.Keys);
 	}
 
 	private static bool ZipPathContainsInvalidCharacters(string path)
@@ -132,6 +_,7 @@
 		Dispose(disposing: true);
 	}
 
+	/*
 	public void RejectAsset(string assetName, IRejectionReason reason)
 	{
 		_rejections.Reject(assetName, reason);
@@ -143,4 +_,5 @@
 	}
 
 	public bool TryGetRejections(List<string> rejectionReasons) => _rejections.TryGetRejections(rejectionReasons);
+	*/
 }
