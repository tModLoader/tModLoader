--- src/Terraria/ReLogic/Content/AssetReaderCollection.cs
+++ src/tModLoader/ReLogic/Content/AssetReaderCollection.cs
@@ -1,26 +_,23 @@
 using ReLogic.Content.Readers;
 using System.Collections.Generic;
-using System.IO;
+using System.Linq;
 
 namespace ReLogic.Content
 {
 	public class AssetReaderCollection
 	{
 		private readonly Dictionary<string, IAssetReader> _readersByExtension = new Dictionary<string, IAssetReader>();
+		private string[] _extensions;
 
 		public void RegisterReader(IAssetReader reader, params string[] extensions) {
 			foreach (string text in extensions) {
 				_readersByExtension[text.ToLower()] = reader;
 			}
-		}
-
-		public T Read<T>(Stream stream, string extension) where T : class {
-			if (!_readersByExtension.TryGetValue(extension.ToLower(), out IAssetReader value))
-				throw AssetLoadException.FromMissingReader(extension);
-
-			return value.FromStream<T>(stream);
-		}
-
-		public bool CanReadExtension(string extension) => _readersByExtension.ContainsKey(extension.ToLower());
+			_extensions = _readersByExtension.Keys.ToArray();
+		}
+
+		public bool TryGetReader(string extension, out IAssetReader reader) => _readersByExtension.TryGetValue(extension.ToLower(), out reader);
+
+		public string[] GetSupportedExtensions() => _extensions;
 	}
 }
