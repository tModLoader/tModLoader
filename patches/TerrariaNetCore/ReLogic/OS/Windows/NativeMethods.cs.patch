--- src/Terraria/ReLogic/OS/Windows/NativeMethods.cs
+++ src/TerrariaNetCore/ReLogic/OS/Windows/NativeMethods.cs
@@ -1,12 +_,16 @@
 using System;
 using System.Runtime.InteropServices;
+using System.Text;
+#if !NETCORE
 using System.Windows.Forms;
+#endif
 
 namespace ReLogic.OS.Windows;
 
 internal static class NativeMethods
 {
 	public delegate IntPtr WndProcCallback(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
+	public delegate bool EnumWindowsProcCallback(IntPtr hWnd, IntPtr lParam);
 
 	public enum StdHandleType
 	{
@@ -97,7 +_,8 @@
 		FO_RENAME
 	}
 
+	//TML: Removed packing, as it would cause crashes.
-	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto, Pack = 1)]
+	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto /*, Pack = 1*/)]
 	private struct SHFILEOPSTRUCT
 	{
 		public IntPtr hwnd;
@@ -112,17 +_,40 @@
 		public string lpszProgressTitle;
 	}
 
+	[DllImport("kernel32.dll")]
+	public static extern int GetCurrentProcessId();
+
+	[DllImport("user32.dll")]
+	[return: MarshalAs(UnmanagedType.Bool)]
+	public static extern bool EnumWindows(EnumWindowsProcCallback lpEnumFunc, IntPtr lParam);
+
+	[DllImport("user32.dll")]
+	public static extern int GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);
+
+	[DllImport("user32.dll")]
+	public static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);
+
 	[DllImport("user32.dll", CharSet = CharSet.Unicode)]
 	public static extern IntPtr CallWindowProc(IntPtr lpPrevWndFunc, IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
 
+#if NETCORE
+	[DllImport("user32.dll", CharSet = CharSet.Unicode)]
+	public static extern IntPtr SetWindowLongPtr(IntPtr hWnd, int nIndex, IntPtr dwNewLong);
+#else
 	[DllImport("user32.dll", CharSet = CharSet.Unicode)]
 	public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);
+#endif
 
 	[DllImport("user32.dll", CharSet = CharSet.Unicode)]
 	public static extern IntPtr DefWindowProc(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);
 
+
+	[DllImport("user32.dll")]
+	public static extern IntPtr GetDC(IntPtr hWnd);
+
 	[DllImport("user32.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Unicode)]
 	public static extern bool TranslateMessage(ref Message message);
+
 
 	[DllImport("user32.dll", CharSet = CharSet.Unicode)]
 	public static extern IntPtr GetForegroundWindow();
