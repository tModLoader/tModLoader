--- src/Terraria/ReLogic/Localization/IME/Windows/NativeMethods.cs
+++ src/TerrariaNetCore/ReLogic/Localization/IME/Windows/NativeMethods.cs
@@ -1,11 +_,45 @@
 using System;
 using System.Runtime.InteropServices;
-using System.Windows.Forms;
 
 namespace ReLogic.Localization.IME.Windows;
 
 internal static class NativeMethods
 {
+#if NETCORE
+	[DllImport("Imm32.dll")]
+	public static extern bool ImmSetOpenStatus(IntPtr hImc, bool bOpen);
+
+	[DllImport("Imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern IntPtr ImmGetContext(IntPtr hWnd);
+
+	[DllImport("Imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern bool ImmReleaseContext(IntPtr hWnd, IntPtr hImc);
+
+	[DllImport("Imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern IntPtr ImmCreateContext();
+
+	[DllImport("Imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern bool ImmDestroyContext(IntPtr hImc);
+
+	[DllImport("Imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern IntPtr ImmAssociateContext(IntPtr hWnd, IntPtr hImc);
+
+	[DllImport("imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern int ImmGetCompositionString(IntPtr hImc, uint dwIndex, IntPtr lpBuf, int dwBufLen);
+
+	[DllImport("imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern bool ImmSetCompositionString(IntPtr hImc, uint dwIndex, string lpComp, int dwCompLen,
+		string lpRead, int dwReadLen);
+
+	[DllImport("imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern int ImmGetCandidateList(IntPtr hImc, uint dwIndex, IntPtr lpCandList, int dwBufLen);
+
+	[DllImport("imm32.dll")]
+	public static extern IntPtr ImmGetDefaultIMEWnd(IntPtr hWnd);
+
+	[DllImport("Imm32.dll", CharSet = CharSet.Unicode)]
+	public static extern bool ImmNotifyIME(IntPtr hImc, uint dwAction, uint dwIndex, uint dwValue);
+#else
 	private const string DLL_NAME = "ReLogic.Native.dll";
 
 	[DllImport("ReLogic.Native.dll", CharSet = CharSet.Unicode)]
@@ -51,4 +_,5 @@
 	[DllImport("ReLogic.Native.dll", CharSet = CharSet.Unicode, EntryPoint = "ImeUi_IgnoreHotKey")]
 	[return: MarshalAs(UnmanagedType.I1)]
 	public static extern bool ImeUi_ShouldIgnoreHotKey(ref Message message);
+#endif
 }
