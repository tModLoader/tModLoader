--- src/Terraria/ReLogic/Localization/IME/WindowsIme.cs
+++ src/TerrariaNetCore/ReLogic/Localization/IME/WindowsIme.cs
@@ -1,6 +_,5 @@
 using System;
-using System.Runtime.InteropServices;
-using System.Windows.Forms;
+using Microsoft.Xna.Framework.Input;
 using ReLogic.Localization.IME.Windows;
 using ReLogic.OS.Windows;
 
@@ -11,81 +_,75 @@
 	private IntPtr _windowHandle;
 	private bool _isFocused;
 	private WindowsMessageHook _wndProcHook;
+	private readonly ReLogic.Localization.IME.Windows.ImeWrapper _imeWrapper;
 	private bool _disposedValue;
 
-	public override string CompositionString => Marshal.PtrToStringUni(ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCompositionString()).ToString();
-
-	public override bool IsCandidateListVisible => ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_IsCandidateListVisible();
-
-	public override uint SelectedCandidate => ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCandidateSelection();
-
-	public override uint CandidateCount => ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCandidatePageSize();
+	public override uint CandidateCount => _imeWrapper.ImeUi_GetCandidatePageSize();
+
+	public override string CompositionString => _imeWrapper.ImeUi_GetCompositionString();
+
+	public override bool IsCandidateListVisible => _imeWrapper.ImeUi_IsCandidateListVisible();
+
+	public override uint SelectedCandidate => _imeWrapper.ImeUi_GetCandidateSelection();
 
 	public WindowsIme(WindowsMessageHook wndProcHook, IntPtr windowHandle)
 	{
 		_wndProcHook = wndProcHook;
 		_windowHandle = windowHandle;
 		_isFocused = ReLogic.OS.Windows.NativeMethods.GetForegroundWindow() == _windowHandle;
+		_imeWrapper = new ImeWrapper();
 		_wndProcHook.AddMessageFilter(this);
-		ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Initialize(_windowHandle);
+		_imeWrapper.ImeUi_Initialize(windowHandle, true);
 	}
 
 	protected override void OnEnable()
 	{
-		if (_isFocused)
-			ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: true);
+		_imeWrapper.ImeUi_Enable(bEnable: true);
 	}
 
 	protected override void OnDisable()
 	{
-		ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_FinalizeString();
-		ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: false);
+		_imeWrapper.ImeUi_FinalizeString();
+		_imeWrapper.ImeUi_Enable(bEnable: false);
 	}
 
-	public override string GetCandidate(uint index) => Marshal.PtrToStringUni(ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_GetCandidate(index));
+	public override string GetCandidate(uint index) => _imeWrapper.ImeUi_GetCandidate(index);
 
 	public bool PreFilterMessage(ref Message message)
 	{
-		if (message.Msg == 8) {
+		if (message.msg == 8) {
-			ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: false);
+			_imeWrapper.ImeUi_Enable(bEnable: false);
 			_isFocused = false;
 			return true;
 		}
 
-		if (message.Msg == 7) {
+		if (message.msg == 7) {
 			if (base.IsEnabled)
-				ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Enable(bEnable: true);
+				_imeWrapper.ImeUi_Enable(bEnable: true);
 
 			_isFocused = true;
 			return true;
 		}
 
+		if (message.msg == 641) {
+			message.lParam = IntPtr.Zero;
+			return false;
+		}
+
 		if (!base.IsEnabled)
 			return false;
 
-		bool trapped = false;
-		IntPtr lParam = message.LParam;
-		ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_ProcessMessage(message.HWnd, message.Msg, message.WParam, ref lParam, ref trapped);
-		message.LParam = lParam;
-		if (trapped)
-			return true;
-
-		switch (message.Msg) {
+		switch (message.msg) {
 			case 81:
 				return true;
-			case 641:
-				message.LParam = IntPtr.Zero;
-				break;
 			case 269:
 				return true;
 			case 642:
 				return true;
 			case 258:
-				OnKeyPress((char)message.WParam.ToInt32());
+				OnKeyPress((char)message.wParam.ToInt32());
 				break;
 			case 256:
-				if (!ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_ShouldIgnoreHotKey(ref message))
-					ReLogic.OS.Windows.NativeMethods.TranslateMessage(ref message);
 				break;
 		}
 
@@ -98,8 +_,7 @@
 			if (base.IsEnabled)
 				Disable();
 
-			_wndProcHook.RemoveMessageFilter(this);
-			ReLogic.Localization.IME.Windows.NativeMethods.ImeUi_Uninitialize();
+			_imeWrapper.ImeUi_Uninitialize();
 			_disposedValue = true;
 		}
 	}
