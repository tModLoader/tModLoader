--- src/Terraria/Terraria/MonoLaunch.cs
+++ src/TerrariaNetCore/Terraria/MonoLaunch.cs
@@ -2,7 +_,10 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Reflection;
+using System.Runtime.InteropServices;
+using System.Runtime.Loader;
 using Terraria;
 
 namespace Terraria;
@@ -13,6 +_,9 @@
 
 	private static void Main(string[] args)
 	{
+#if NETCORE
+		AssemblyLoadContext.Default.ResolvingUnmanagedDll += ResolveNativeLibrary;
+#else
 		AppDomain.CurrentDomain.AssemblyResolve += delegate (object sender, ResolveEventArgs sargs) {
 			string resourceName = new AssemblyName(sargs.Name).Name + ".dll";
 			string text = Array.Find(typeof(Program).Assembly.GetManifestResourceNames(), (string element) => element.EndsWith(resourceName));
@@ -25,9 +_,55 @@
 				return Assembly.Load(array);
 			}
 		};
+#endif
 
 		Environment.SetEnvironmentVariable("FNA_WORKAROUND_WINDOW_RESIZABLE", "1");
 		Program.LaunchGame(args, monoArgs: true);
 	}
+
+#if NETCORE
+	public static readonly string NativesDir = Path.Combine(Environment.CurrentDirectory, "Libraries", "Native", NativePlatformDir);
+
+	private static string NativePlatformDir =>
+		RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? "Windows" :
+		RuntimeInformation.IsOSPlatform(OSPlatform.Linux) ? "Linux" :
+		RuntimeInformation.IsOSPlatform(OSPlatform.OSX) ? "OSX" :
+		throw new InvalidOperationException("Unknown OS.");
+
+	public static readonly object resolverLock = new();
+
+	// Note: AssemblyLoadContext.Default.ResolvingUnmanagedDll is only called if the dll is not found on PATH
+	// In a production environment, you need to prepend to PATH prioritise your shipped libraries, making this logging mostly useless.
+	private static IntPtr ResolveNativeLibrary(Assembly assembly, string name)
+	{
+		// This method shouldn't be throwing exceptions, in case we're in a TryLoad scenario.
+		lock (resolverLock) {
+			if (assemblies.TryGetValue(name, out var handle))
+				return handle;
+
+			Console.WriteLine($"Native Resolve: {assembly.FullName} -> {name}");
+
+			var files = Directory.GetFiles(NativesDir, $"*{name}*", SearchOption.AllDirectories);
+			if (files.FirstOrDefault() is not string path) {
+				Console.WriteLine("\tnot found");
+				return IntPtr.Zero;
+			}
+
+			// This method shouldn't be throwing exceptions, in case we're in a TryLoad scenario, but we still want exception info
+			Console.WriteLine($"\tattempting load {path}");
+			try {
+				handle = NativeLibrary.Load(path);
+			}
+			catch (Exception e) {
+				Console.WriteLine($"\t\tFailed to load {name}.\n{e}");
+				return IntPtr.Zero;
+			}
+
+			Console.WriteLine("\tsuccess");
+			return assemblies[name] = handle;
+		}
+	}
+#endif
 }
+
 #endif
