--- src/Terraria/Terraria/MonoLaunch.cs
+++ src/TerrariaNetCore/Terraria/MonoLaunch.cs
@@ -2,7 +_,10 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Reflection;
+using System.Runtime.InteropServices;
+using System.Runtime.Loader;
 using Terraria;
 
 internal static class MonoLaunch
@@ -11,6 +_,7 @@
 	private static readonly Dictionary<string, IntPtr> assemblies = new Dictionary<string, IntPtr>();
 
 	private static void Main(string[] args) {
+		/*
 		AppDomain.CurrentDomain.AssemblyResolve += delegate (object sender, ResolveEventArgs sargs) {
 			string resourceName = new AssemblyName(sargs.Name).Name + ".dll";
 			string text = Array.Find(typeof(Program).Assembly.GetManifestResourceNames(), (string element) => element.EndsWith(resourceName));
@@ -23,9 +_,55 @@
 				return Assembly.Load(array);
 			}
 		};
+		*/
+
+#if NETCORE
+		AssemblyLoadContext.Default.ResolvingUnmanagedDll += ResolveNativeLibrary;
+#endif
 
 		Environment.SetEnvironmentVariable("FNA_WORKAROUND_WINDOW_RESIZABLE", "1");
 		Program.LaunchGame(args, monoArgs: true);
 	}
+
+#if NETCORE
+	public static readonly string NativesDir = Path.Combine(Environment.CurrentDirectory, "Libraries", "Native", NativePlatformDir);
+	private static string NativePlatformDir =>
+		RuntimeInformation.IsOSPlatform(OSPlatform.Windows) ? "Windows" :
+		RuntimeInformation.IsOSPlatform(OSPlatform.Linux) ? "Linux" :
+		RuntimeInformation.IsOSPlatform(OSPlatform.OSX) ? "OSX" :
+		throw new InvalidOperationException("Unknown OS.");
+
+	public static readonly object resolverLock = new();
+
+	// Note: AssemblyLoadContext.Default.ResolvingUnmanagedDll is only called if the dll is not found on PATH
+	// In a production environment, you need to prepend to PATH prioritise your shipped libraries, making this logging mostly useless.
+	private static IntPtr ResolveNativeLibrary(Assembly assembly, string name) {
+		lock (resolverLock) {
+			try {
+				if (assemblies.TryGetValue(name, out var handle)) {
+					return handle;
+				}
+
+				Console.WriteLine($"Native Resolve: {assembly.FullName} -> {name}");
+
+				var files = Directory.GetFiles(NativesDir, $"*{name}*", SearchOption.AllDirectories);
+				var match = files.FirstOrDefault();
+
+				if (match is null) {
+					throw new FileNotFoundException($"Failed to find Native Library: {Path.Combine(NativesDir, name + ".dll")}");
+				}
+
+				Console.WriteLine($"\tattempting load {match}");
+				handle = NativeLibrary.Load(match);
+				Console.WriteLine("\tsuccess");
+				return assemblies[name] = handle;
+			}
+			catch (DirectoryNotFoundException e) {
+				throw new DirectoryNotFoundException("A needed library file was missing from the tModLoader directory. " + e.Message, e);
+			}
+		}
+	}
+#endif
 }
+
 #endif
