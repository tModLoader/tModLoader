--- src/Terraria/Terraria/Terraria.csproj
+++ src/TerrariaNetCore/Terraria/Terraria.csproj
@@ -2,89 +_,130 @@
   <Import Project="../Configuration.targets" />
   <Import Project="../../WorkspaceInfo.targets" />
   <PropertyGroup>
-    <OutputType>WinExe</OutputType>
+    <OutputType>Exe</OutputType>
     <Version>1.4.3.4</Version>
     <Company>Re-Logic</Company>
     <Copyright>Copyright Â© 2022 Re-Logic</Copyright>
     <RootNamespace>Terraria</RootNamespace>
-    <OutputName>Terraria</OutputName>
+    <AssemblyName>Terraria</AssemblyName>
+    <GenerateRuntimeConfigDevFile>true</GenerateRuntimeConfigDevFile>
   </PropertyGroup>
   <PropertyGroup Condition="$(Configuration.Contains('Server'))">
-    <OutputType>Exe</OutputType>
-    <OutputName>$(OutputName)Server</OutputName>
+    <AssemblyName>$(AssemblyName)Server</AssemblyName>
   </PropertyGroup>
   <PropertyGroup Condition="$(Configuration.Contains('Debug'))">
-    <OutputName>$(OutputName)Debug</OutputName>
+    <AssemblyName>$(AssemblyName)Debug</AssemblyName>
+  </PropertyGroup>
+  <!-- Avoid overwriting Terraria(Server).exe (if it's not Debug it's release) -->
+  <PropertyGroup Condition="!$(Configuration.Contains('Debug'))">
+    <AssemblyName>$(AssemblyName)Release</AssemblyName>
   </PropertyGroup>
   <PropertyGroup>
-    <PdbFile>bin\$(OutputName)</PdbFile>
+    <OutputName>$(AssemblyName)</OutputName>
     <ApplicationIcon>Icon.ico</ApplicationIcon>
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="CsvHelper" />
-    <Reference Include="FNA" Condition="$(DefineConstants.Contains('FNA'))" />
     <Reference Include="Ionic.Zip.CF" />
-    <Reference Include="MP3Sharp" Condition="$(DefineConstants.Contains('CLIENT'))" />
-    <Reference Include="Microsoft.Xna.Framework" Condition="$(DefineConstants.Contains('XNA'))" />
-    <Reference Include="Microsoft.Xna.Framework.Game" Condition="$(DefineConstants.Contains('XNA'))" />
-    <Reference Include="Microsoft.Xna.Framework.Graphics" Condition="$(DefineConstants.Contains('XNA'))" />
-    <Reference Include="Microsoft.Xna.Framework.Xact" Condition="$(DefineConstants.Contains('XNA'))" />
-    <Reference Include="NVorbis.System.ValueTuple" />
+    <ProjectReference Include="../../../FNA/FNA.Core.csproj" />
+    <Reference Include="MP3Sharp" />
     <Reference Include="Newtonsoft.Json" />
-    <Reference Include="NVorbis" Condition="$(DefineConstants.Contains('CLIENT'))" />
+    <Reference Include="NVorbis" />
     <Reference Include="RailSDK.Net" />
     <ProjectReference Include="../ReLogic/ReLogic.csproj" />
-    <EmbeddedResource Include="../ReLogic/bin/$(Configuration)/$(TargetFramework)/ReLogic.dll">
-      <Link>Libraries/ReLogic/ReLogic.dll</Link>
-      <LogicalName>Terraria.Libraries.ReLogic.ReLogic.dll</LogicalName>
-    </EmbeddedResource>
-    <Reference Include="Steamworks.NET">
+    <Reference Include="Steamworks.NET" />
-      <HintPath Condition="$(DefineConstants.Contains('WINDOWS'))">Libraries/Windows/Steamworks.NET.dll</HintPath>
-      <HintPath Condition="$(DefineConstants.Contains('MONO'))">Libraries/Mono/Steamworks.NET.dll</HintPath>
-    </Reference>
     <Reference Include="SteelSeriesEngineWrapper" />
-    <Reference Include="System" />
-    <Reference Include="System.Core" />
-    <Reference Include="System.Drawing" />
-    <Reference Include="System.Runtime.Serialization" />
-    <Reference Include="System.Windows.Forms">
-      <HintPath Condition="$(DefineConstants.Contains('Mono'))">Libraries/Mono/System.Windows.Forms.dll</HintPath>
-    </Reference>
-    <Reference Include="WindowsBase" />
   </ItemGroup>
   <ItemGroup>
     <EmbeddedResource Include="GameContent/Creative/Content/*" />
     <EmbeddedResource Include="GameContent/Metadata/MaterialData/*" />
     <EmbeddedResource Include="GameContent/WorldBuilding/*" />
     <EmbeddedResource Include="IO/Data/*" />
-    <EmbeddedResource Include="Libraries/**" />
-    <EmbeddedResource Remove="Libraries/FNA/**" />
-    <EmbeddedResource Remove="Libraries/XNA/**" />
-    <EmbeddedResource Remove="Libraries/Native/**" />
-    <EmbeddedResource Remove="Libraries/Windows/**" Condition="!$(DefineConstants.Contains('WINDOWS'))" />
-    <EmbeddedResource Remove="Libraries/Mono/**" Condition="!$(DefineConstants.Contains('MONO'))" />
     <EmbeddedResource Include="Localization/Content/**" />
     <EmbeddedResource Include="Microsoft/**" />
   </ItemGroup>
+  <ItemGroup>
+    <Compile Remove="Social/WeGame/AsyncTaskHelper.cs" />
+    <Compile Remove="Social/WeGame/CurrentThreadRunner.cs" />
+    <None Remove="Libraries/Mono/**" />
+    <None Remove="Libraries/Windows/**" />
+    <None Remove="Libraries/XNA/**" />
+    <Content Include="Libraries/Native/**" CopyToOutputDirectory="PreserveNewest" />
+  </ItemGroup>
+  <PropertyGroup>
+    <_ActualOutputDirectory>$(TerrariaSteamPath)</_ActualOutputDirectory>
+  </PropertyGroup>
+  <Target Name="CopyToSteamDir" AfterTargets="Build">
+    <!-- copy files systematically to output folder -->
     <ItemGroup>
-      <None Remove="Libraries/Native/**" />
+      <BinFiles Include="$(TargetDir)**" />
     </ItemGroup>
-  <Target Name="EditBin" AfterTargets="Build">
+    <Message Text="Copying $(AssemblyName) to '$(_ActualOutputDirectory)'..." Importance="high" />
+    <Copy SourceFiles="@(BinFiles)" DestinationFolder="$(_ActualOutputDirectory)/%(RecursiveDir)" SkipUnchangedFiles="True" />
+    <!-- todo, purge old libraries on other platforms -->
+    <Exec Command="robocopy &quot;$(TargetDir)Libraries&quot; &quot;$(_ActualOutputDirectory)\Libraries&quot; /MIR" ContinueOnError="true" StandardOutputImportance="low" Condition="'$(OS)' == 'Windows_NT'">
+      <Output TaskParameter="ExitCode" PropertyName="PurgeExitCode" />
+    </Exec>
+    <Warning Text="\Libraries file purge failed (robocopy /MIR Exit Code: $(PurgeExitCode)). Old files may not be removed." Condition="'$(PurgeExitCode)' != 2 AND '$(PurgeExitCode)' != 0" />
+  </Target>
+  <!--See first answer in https://stackoverflow.com/questions/55946010/how-to-specify-output-folder-for-the-referenced-nuget-packages for how this was created-->
+  <!--Dotnet Core 3.0 and later don't support subdirectory searching; so we use workaround https://github.com/dotnet/sdk/issues/10366#issuecomment-508854737 -->
+  <Target Name="BuildRedirectNugetFilesToLib" AfterTargets="ResolveLockFileCopyLocalFiles">
+    <ItemGroup>
+      <ReferenceCopyLocalPaths>
+        <DirectoryInPackage>$([System.String]::Copy('%(PathInPackage)').Remove($([System.String]::Copy('%(PathInPackage)').LastIndexOf('/'))).Replace('/', '\'))</DirectoryInPackage>
+      </ReferenceCopyLocalPaths>
+    </ItemGroup>
+    <ItemGroup>
+      <ReferenceCopyLocalPaths>
+        <DestinationSubDirectory>Libraries\$([System.String]::Copy('%(NuGetPackageID)').ToLower())\%(NuGetPackageVersion)\%(DirectoryInPackage)\</DestinationSubDirectory>
+      </ReferenceCopyLocalPaths>
+    </ItemGroup>
+  </Target>
+  <!-- In order to get pdbs/xmls while waiting for NET6, we use https://github.com/dotnet/sdk/issues/1458#issuecomment-420456386 -->
+  <Target Name="_ResolveCopyLocalNuGetPackagePdbsAndXml" Condition="$(CopyLocalLockFileAssemblies) == true" AfterTargets="ResolveReferences">
+    <ItemGroup>
+      <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).pdb')" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != '' and Exists('%(RootDir)%(Directory)%(Filename).pdb')" />
+      <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).xml')" Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)' != '' and Exists('%(RootDir)%(Directory)%(Filename).xml')" />
+    </ItemGroup>
+  </Target>
+  <Target Name="RedirectAssemblyReferencesToLib" AfterTargets="ResolveAssemblyReferences">
+    <ItemGroup>
+      <!--To match deps.json for runtime resolving, paths must be of the form Libraries/<name>/<version>-->
+      <!--Note that associated files, like pdbs/xmls won't be resolved properly here. Prefer nuget packages for that-->
+      <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ResolveAssemblyReference'">
+        <DirectoryVersion>$([System.String]::Copy('%(ReferenceCopyLocalPaths.FusionName)').Remove($([System.String]::Copy('%(ReferenceCopyLocalPaths.FusionName)').IndexOf(", C"))).Substring($([System.String]::Copy('%(ReferenceCopyLocalPaths.FusionName)').IndexOf(","))).Substring(10))</DirectoryVersion>
+      </ReferenceCopyLocalPaths>
+      <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ResolveAssemblyReference'">
+        <DestinationSubDirectory>Libraries\%(ReferenceCopyLocalPaths.OriginalItemSpec)\%(ReferenceCopyLocalPaths.DirectoryVersion)\</DestinationSubDirectory>
+      </ReferenceCopyLocalPaths>
+    </ItemGroup>
+  </Target>
+  <Target Name="RedirectProjectReferencesToLib" AfterTargets="ResolveAssemblyReferences">
+    <ItemGroup>
+      <!--Version is bugged in deps.json for ProjectReferences, doesn't reflect AssemblyVersion for whatever reason. Uses 1.0.0-->
+      <!--As well, FusionName isn't available, so alternate string manipulation to get Name-->
+      <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ProjectReference'">
+        <VersionHack>1.0.0</VersionHack>
+        <DllName>$([System.String]::Copy('%(ReferenceCopyLocalPaths.ResolvedFrom)').Remove($([System.String]::Copy('%(ReferenceCopyLocalPaths.ResolvedFrom)').IndexOf(".dll"))).SubString($([System.String]::Copy('%(ReferenceCopyLocalPaths.ResolvedFrom)').LastIndexOf("\"))).Substring(1))</DllName>
+      </ReferenceCopyLocalPaths>
+      <ReferenceCopyLocalPaths Condition="%(ReferenceCopyLocalPaths.ReferenceSourceTarget) == 'ProjectReference'">
+        <DestinationSubDirectory>Libraries\%(ReferenceCopyLocalPaths.DllName)\%(ReferenceCopyLocalPaths.VersionHack)\</DestinationSubDirectory>
+      </ReferenceCopyLocalPaths>
+    </ItemGroup>
+  </Target>
+  <Target Name="OverwriteDevRuntimeTargets" AfterTargets="GenerateBuildRuntimeConfigurationFiles" Condition="$(GenerateRuntimeConfigDevFile) == 'true'">
     <PropertyGroup>
-      <EditBinOpts>/largeaddressaware</EditBinOpts>
-      <DumpBin>/headers</DumpBin>
-    </PropertyGroup>
-    <PropertyGroup Condition="$(DefineConstants.Contains('DEBUG'))">
-      <EditBinOpts>$(EditBinOpts) /stack:0x800000</EditBinOpts>
-    </PropertyGroup>
-    <Message Text="Applying editbin $(EditBinOpts)" Importance="high" />
-    <Exec Command="..\largeaddresstool\editbin $(EditBinOpts) &quot;$(TargetPath)&quot;" />
-    <Message Text="Checking headers with dumpbin." Importance="high" />
-    <Exec Command="..\largeaddresstool\dumpbin $(DumpBin) &quot;$(TargetPath)&quot; | findstr &quot;large&quot;" />
-  </Target>
-  <Target Name="CopyToStreamDir" AfterTargets="EditBin" Condition="$(Configuration.Contains('Windows'))">
-    <Message Text="Copying $(OutputName) to Steam Dir..." Importance="high" />
-    <Copy SourceFiles="$(TargetPath)" DestinationFiles="$(TerrariaSteamPath)\$(OutputName).exe" />
-    <Copy SourceFiles="$(TargetDir)$(OutputName).pdb" DestinationFolder="$(TerrariaSteamPath)" />
+      <DevRuntimeConfig>
+{
+  "runtimeOptions": {
+    "additionalProbingPaths": [
+      "Libraries"
+    ]
+  }
+}
+      </DevRuntimeConfig>
+    </PropertyGroup>
+    <WriteLinesToFile File="$(ProjectRuntimeConfigDevFilePath)" Lines="$(DevRuntimeConfig)" Overwrite="true" Encoding="UTF-8" />
   </Target>
 </Project>
