--- src/Terraria/Terraria/Terraria.csproj
+++ src/TerrariaNetCore/Terraria/Terraria.csproj
@@ -1,90 +_,122 @@
 <Project Sdk="Microsoft.NET.Sdk">
+
 	<Import Project="../Configuration.targets" />
 	<Import Project="../../WorkspaceInfo.targets" />
+	<Import Project="../../../tModBuildTasks/BuildTasks.targets" />
+
+	<!-- General -->
 	<PropertyGroup>
-		<OutputType>WinExe</OutputType>
+		<OutputType>Exe</OutputType>
 		<Version>1.4.4.9</Version>
 		<Company>Re-Logic</Company>
 		<Copyright>Copyright Â© 2022 Re-Logic</Copyright>
 		<RootNamespace>Terraria</RootNamespace>
-		<OutputName>Terraria</OutputName>
+		<AssemblyName>Terraria</AssemblyName>
-	</PropertyGroup>
-	<PropertyGroup Condition="$(Configuration.Contains('Server'))">
-		<OutputType>Exe</OutputType>
-		<OutputName>$(OutputName)Server</OutputName>
-	</PropertyGroup>
-	<PropertyGroup Condition="$(Configuration.Contains('Debug'))">
-		<OutputName>$(OutputName)Debug</OutputName>
-	</PropertyGroup>
-	<PropertyGroup>
-		<PdbFile>bin\$(OutputName)</PdbFile>
 		<ApplicationIcon>Icon.ico</ApplicationIcon>
+
+		<!-- Avoid overwriting Terraria.exe (if it's not Debug it's release) -->
+		<AssemblyName Condition="$(Configuration.Contains('Debug'))">$(AssemblyName)Debug</AssemblyName>
+		<AssemblyName Condition="!$(Configuration.Contains('Debug'))">$(AssemblyName)Release</AssemblyName>
+		<OutputName>$(AssemblyName)</OutputName>
 	</PropertyGroup>
+
+	<!-- Build Configuration -->
+	<PropertyGroup>
+		<LibrariesDirectory>Libraries</LibrariesDirectory>
+		<GenerateRuntimeConfigDevFile>true</GenerateRuntimeConfigDevFile>
+		<CopyDebugSymbolFilesFromPackages>true</CopyDebugSymbolFilesFromPackages>
+		<CopyDocumentationFilesFromPackages>true</CopyDocumentationFilesFromPackages>
+	</PropertyGroup>
+
+	<!-- References -->
 	<ItemGroup>
+		<ProjectReference Include="../../../FNA/FNA.Core.csproj" />
 		<ProjectReference Include="../ReLogic/ReLogic.csproj" />
 		<EmbeddedResource Include="../ReLogic/bin/$(Configuration)/$(TargetFramework)/ReLogic.dll">
 			<Link>Libraries/ReLogic/ReLogic.dll</Link>
 			<LogicalName>Terraria.Libraries.ReLogic.ReLogic.dll</LogicalName>
 		</EmbeddedResource>
+
 		<Reference Include="CsvHelper" />
-		<Reference Include="FNA" Condition="$(DefineConstants.Contains('FNA'))" />
 		<Reference Include="Ionic.Zip.CF" />
-		<Reference Include="MP3Sharp" Condition="$(DefineConstants.Contains('CLIENT'))" />
-		<Reference Include="Microsoft.Xna.Framework" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="Microsoft.Xna.Framework.Game" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="Microsoft.Xna.Framework.Graphics" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="Microsoft.Xna.Framework.Xact" Condition="$(DefineConstants.Contains('XNA'))" />
-		<Reference Include="NVorbis.System.ValueTuple" />
+		<Reference Include="MP3Sharp" />
 		<Reference Include="Newtonsoft.Json" />
-		<Reference Include="NVorbis" Condition="$(DefineConstants.Contains('CLIENT'))" />
+		<Reference Include="NVorbis" />
 		<Reference Include="RailSDK.Net" />
-		<Reference Include="Steamworks.NET">
-			<HintPath Condition="$(DefineConstants.Contains('WINDOWS'))">Libraries/Windows/Steamworks.NET.dll</HintPath>
-			<HintPath Condition="$(DefineConstants.Contains('MONO'))">Libraries/Mono/Steamworks.NET.dll</HintPath>
-		</Reference>
 		<Reference Include="SteelSeriesEngineWrapper" />
-		<Reference Include="System" />
-		<Reference Include="System.Core" />
-		<Reference Include="System.Drawing" />
-		<Reference Include="System.Runtime.Serialization" />
-		<Reference Include="System.Windows.Forms">
-			<HintPath Condition="$(DefineConstants.Contains('Mono'))">Libraries/Mono/System.Windows.Forms.dll</HintPath>
-		</Reference>
-		<Reference Include="WindowsBase" />
+
+		<PackageReference Include="Steamworks.NET" Version="20.1.0" />
 	</ItemGroup>
+
+	<!-- Embedded Resources -->
 	<ItemGroup>
 		<EmbeddedResource Include="GameContent/Creative/Content/*" />
 		<EmbeddedResource Include="GameContent/Metadata/MaterialData/*" />
 		<EmbeddedResource Include="GameContent/WorldBuilding/*" />
 		<EmbeddedResource Include="IO/Data/*" />
-		<EmbeddedResource Include="Libraries/**" />
-		<EmbeddedResource Remove="Libraries/FNA/**" />
-		<EmbeddedResource Remove="Libraries/XNA/**" />
-		<EmbeddedResource Remove="Libraries/Native/**" />
-		<EmbeddedResource Remove="Libraries/Windows/**" Condition="!$(DefineConstants.Contains('WINDOWS'))" />
-		<EmbeddedResource Remove="Libraries/Mono/**" Condition="!$(DefineConstants.Contains('MONO'))" />
 		<EmbeddedResource Include="Localization/Content/**" />
 		<EmbeddedResource Include="Microsoft/**" />
 	</ItemGroup>
+
+	<!-- Files -->
 	<ItemGroup>
-		<None Remove="Libraries/Native/**" />
+		<None Remove="Libraries/Mono/**" />
+		<None Remove="Libraries/Windows/**" />
+		<None Remove="Libraries/XNA/**" />
+		<Content Include="Libraries/Native/**" CopyToOutputDirectory="PreserveNewest" />
 	</ItemGroup>
-	<Target Name="EditBin" AfterTargets="Build">
-		<PropertyGroup>
-			<EditBinOpts>/largeaddressaware</EditBinOpts>
-			<DumpBin>/headers</DumpBin>
-		</PropertyGroup>
-		<PropertyGroup Condition="$(DefineConstants.Contains('DEBUG'))">
-			<EditBinOpts>$(EditBinOpts) /stack:0x800000</EditBinOpts>
-		</PropertyGroup>
-		<Message Text="Applying editbin $(EditBinOpts)" Importance="high" />
-		<Exec Command="..\largeaddresstool\editbin $(EditBinOpts) &quot;$(TargetPath)&quot;" />
-		<Message Text="Checking headers with dumpbin." Importance="high" />
-		<Exec Command="..\largeaddresstool\dumpbin $(DumpBin) &quot;$(TargetPath)&quot; | findstr &quot;large&quot;" />
-	</Target>
-	<Target Name="CopyToStreamDir" AfterTargets="EditBin" Condition="$(Configuration.Contains('Windows'))">
-		<Message Text="Copying $(OutputName) to Steam Dir..." Importance="high" />
-		<Copy SourceFiles="$(TargetPath)" DestinationFiles="$(TerrariaSteamPath)\$(OutputName).exe" />
-		<Copy SourceFiles="$(TargetDir)$(OutputName).pdb" DestinationFolder="$(TerrariaSteamPath)" />
-	</Target>
+
+	<!-- Import tasks -->
+	<UsingTask TaskName="SynchronizeDirectories" AssemblyFile="$(BuildTasksAssemblyFile)" TaskFactory="$(BuildTasksTaskFactory)" />
+	<UsingTask TaskName="OrganizeReferenceDestinations" AssemblyFile="$(BuildTasksAssemblyFile)" TaskFactory="$(BuildTasksTaskFactory)" />
+
+	<!-- Organize output copies of Project, NuGet, and directly referenced libraries under a single tidy folder. -->
+	<Target Name="OrganizeAllReferences" AfterTargets="ResolveAssemblyReferences" BeforeTargets="GenerateBuildDependencyFile;CopyFilesToOutputDirectory">
+		<!-- Run the task. -->
+		<OrganizeReferenceDestinations BaseDirectory="$(LibrariesDirectory)" ReferenceCopyLocalPaths="@(ReferenceCopyLocalPaths)">
+			<Output TaskParameter="ReferenceCopyLocalPaths" ItemName="ReferenceCopyLocalPaths_New" />
+		</OrganizeReferenceDestinations>
+
+		<!-- This has to be done because the Output element above can only append items, and is unable to replace them. -->
+		<ItemGroup>
+			<ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
+			<ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths_New)" />
+		</ItemGroup>
+	</Target>
+
+	<!-- Overwrites runtimeconfig.dev.json probing paths for the runtime to look only into our custom libraries directory. -->
+	<Target Name="OverwriteDevRuntimeTargets" AfterTargets="GenerateBuildRuntimeConfigurationFiles" Condition="$(GenerateRuntimeConfigDevFile) == 'true'">
+		<PropertyGroup>
+			<DevRuntimeConfig>
+{
+	"runtimeOptions": {
+		"additionalProbingPaths": [
+			"$(LibrariesDirectory)"
+		]
+	}
+}
+			</DevRuntimeConfig>
+		</PropertyGroup>
+
+		<WriteLinesToFile File="$(ProjectRuntimeConfigDevFilePath)" Lines="$(DevRuntimeConfig)" Overwrite="true" Encoding="UTF-8" />
+	</Target>
+
+	<!-- Installs the build's output into the relevant game folder. -->
+	<Target Name="CopyToActualOutputDirectory" AfterTargets="Build">
+		<PropertyGroup>
+			<_ActualOutputDirectory>$(TerrariaSteamPath)</_ActualOutputDirectory>
+		</PropertyGroup>
+
+		<!-- Copy files systematically to output folder -->
+		<ItemGroup>
+			<BinFiles Include="$(TargetDir)**" />
+		</ItemGroup>
+
+		<Message Text="Copying $(AssemblyName) to '$(_ActualOutputDirectory)'..." Importance="high" />
+		<Copy SourceFiles="@(BinFiles)" DestinationFolder="$(_ActualOutputDirectory)/%(RecursiveDir)" SkipUnchangedFiles="True" />
+
+		<!-- Copy the Libraries folder, purging excessive files -->
+		<SynchronizeDirectories Source="$(TargetDir)Libraries" Destination="$(_ActualOutputDirectory)/Libraries" />
+	</Target>
+
 </Project>
